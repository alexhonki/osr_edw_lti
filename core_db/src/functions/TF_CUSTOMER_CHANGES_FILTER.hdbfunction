FUNCTION "functions::TF_CUSTOMER_CHANGES_FILTER"
	(
		IM_FILTER NVARCHAR(5000) default '',
		IM_FROM	  VARCHAR(6),
		IM_TO     VARCHAR(6),
		IM_REACTION_TYPE VARCHAR(200)
	)
       RETURNS TABLE (
		"TIME_SEGMENT" 				INT,
		"FILTER_NEW_CUSTOMERS"		INT,
		"FILTER_REACT_CUSTOMERS"	INT
	) 
       LANGUAGE SQLSCRIPT 
       SQL SECURITY INVOKER AS 
BEGIN 
-- Default Reaction Type
	DECLARE LV_REACTION_TYPE 	VARCHAR(200);
	--DECLARE LV_FROM INT;
	
	-- Get the Reaction type configured ---> needs to be extended in future to support multiple
	IF :IM_REACTION_TYPE IS NULL OR LENGTH(:IM_REACTION_TYPE) = 0 THEN
		CALL "procedures.utils::PR_CONF_GET_REACTION_TYPE"(:LV_REACTION_TYPE);
	ELSE
		LV_REACTION_TYPE := :IM_REACTION_TYPE;
	END IF;


	-- FIltered data
	IF length(IM_FILTER) > 0 OR IM_FILTER IS NOT NULL THEN
		T_FILTERED = select CUST_ID from "functions::TF_CUSTOMER_FILTER_FROM_TO"(:IM_FILTER,:IM_FROM,:IM_TO);
		
		RETURN  SELECT TO_INT(INIT_TS) AS "TIME_SEGMENT" , FILTER_NEW_CUSTOMERS, FILTER_REACT_CUSTOMERS FROM 
		(
				SELECT B.INIT_TS,
				"TIME_SEGMENT",
				"TOTAL_NEW_CUSTOMERS" AS "FILTER_NEW_CUSTOMERS",
				"TOTAL_REACT_CUSTOMERS" AS "FILTER_REACT_CUSTOMERS"			
				FROM	
		( 
		select 
					"TIME_SEGMENT", 
					- sum("TOTAL_REACT_CUSTOMERS") "TOTAL_REACT_CUSTOMERS", 
					sum("TOTAL_NEW_CUSTOMERS") "TOTAL_NEW_CUSTOMERS" 
					from(
		
			select 	A."INIT_TS" "TIME_SEGMENT", 
					COUNT(A."CUST_ID") "TOTAL_REACT_CUSTOMERS", 
					0 "TOTAL_NEW_CUSTOMERS"
				FROM "db::app.CustomerReactions" A
				INNER JOIN :T_FILTERED B on A."CUST_ID" = B."CUST_ID"
				WHERE A."REACTION_TYPE" = :LV_REACTION_TYPE
			  	AND A."INIT_TS" <= TO_INT(:IM_TO) AND A."INIT_TS" >= TO_INT(:IM_FROM)
				GROUP BY A."INIT_TS" 
			UNION
			select Z."INIT_TS" "TIME_SEGMENT", 
			       0 "TOTAL_REACT_CUSTOMERS", 
			       COUNT(Z."CUST_ID") "TOTAL_NEW_CUSTOMERS" 
				from "db::app.CustomerEvents" Z 
				INNER JOIN :T_FILTERED Y on Z."CUST_ID" = Y."CUST_ID"
				WHERE "EVENT_NAME" like 'Assessment Posted%' and Z."INIT_TS" <= TO_INT(:IM_TO) AND Z."INIT_TS" >= TO_INT(:IM_FROM)
				GROUP BY Z."INIT_TS"
		)
		GROUP BY "TIME_SEGMENT" 
		order by "TIME_SEGMENT" ) A 
		RIGHT OUTER JOIN 
		(
			SELECT CALMONTH AS INIT_TS FROM "synonyms::mtimedimensionmonth" where calmonth >= TO_INT(:IM_FROM) and calmonth <= TO_INT(:IM_TO)
		) B ON A.TIME_SEGMENT = B.INIT_TS );
		 
	END IF;
END;