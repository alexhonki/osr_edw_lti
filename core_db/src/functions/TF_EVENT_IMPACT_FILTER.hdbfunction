FUNCTION "functions::TF_EVENT_IMPACT_FILTER" ( 
		IN IM_FILTER 	NVARCHAR(5000) default '',	-- Filter
		IN IM_FROM 		VARCHAR(6), 				-- From Time Segment YYYYMM
		IN IM_TO 		VARCHAR(6), 				-- To Time Segment YYYYMM
		IN IM_REACTION_TYPE VARCHAR(200) 
	) 
	RETURNS table (
		"EVENT_ID"		INTEGER,
		"EVENT_IMPACT" 	INTEGER					-- Event Impact
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
BEGIN
	-- Default Reaction Type
	DECLARE LV_REACTION_TYPE 	VARCHAR(200);
	-- Impact Threshold Variable
	DECLARE LV_IMPACT_THRESHOLD INT := 1;
	
	--------------------------------------------------------------------------------------------------
	-- Get the Reaction type configured ---> needs to be extended in future to support multiple
	--------------------------------------------------------------------------------------------------
	IF :IM_REACTION_TYPE IS NULL OR LENGTH(:IM_REACTION_TYPE) = 0 THEN
		CALL "procedures.utils::PR_CONF_GET_REACTION_TYPE"(:LV_REACTION_TYPE);
	ELSE
		LV_REACTION_TYPE := :IM_REACTION_TYPE;
	END IF;
	
	--------------------------------------------------------------------------------------------------
	-- Set Impact Threshold
	--------------------------------------------------------------------------------------------------
	SELECT TOP 1 TO_INT(COALESCE("FROM_VALUE","TO_VALUE","FROM_DEFAULT")) 
 		INTO LV_IMPACT_THRESHOLD
 		FROM "models.adm::CV_CONFIG"
 		WHERE "BUCKET_ID" = 'IMPACT_THRESHOLD'
	 	  AND "REACTION_TYPE" 	= :LV_REACTION_TYPE
	 	;	
 		
	--------------------------------------------------------------------------------------------------
	-- OUTPUT
	--------------------------------------------------------------------------------------------------	
	RETURN SELECT
			-- FIELDS
				b."EVENT_ID.ID" as "EVENT_ID", 
				TO_INT(count(distinct a.cust_id)) "EVENT_IMPACT"	-- Filtered Event Impact
			-- TABLE
			FROM "functions::TF_CUSTOMER_FILTER_REACTION"(:IM_FILTER,:IM_FROM,:IM_TO,:LV_REACTION_TYPE) a
			-- JOIN
			INNER JOIN "db::app.CustomerEvents" b ON a.cust_id = b."CUST_ID"
			-- Filter enabled events
			INNER JOIN "db::adm.config.event.name" c on b."EVENT_ID.ID" = c."ID"
			-- WHERE		
			WHERE b.init_ts <= TO_INT(:IM_TO) 
			  AND b.init_ts >= TO_INT(:IM_FROM)
			  AND b.init_date <= a."REACTION_DATE"
			  AND c."IS_ENABLED" = 1
			-- GROUP BY
			GROUP BY b."EVENT_ID.ID"
			HAVING count(distinct a.cust_id) >= :LV_IMPACT_THRESHOLD;		
END;