FUNCTION "functions::TF_EVENT_INFLUENCE_IMPACT_FILTER" (
		IN IM_FILTER 	NVARCHAR(5000) default '',	-- Filter
		IN IM_FROM 		VARCHAR(6), -- From Time Segment YYYYMM
		IN IM_TO VARCHAR(6), -- YYYYMM
		IN IM_REACTION_TYPE VARCHAR(200)
	) 
	RETURNS TABLE (
		"EVENT_ID"			INTEGER,
		"EVENT_IMPACT" 		INTEGER,
		"TOTAL_CUSTOMERS" 	INTEGER,
		"INFLUENCE" 		INTEGER
	)
       LANGUAGE SQLSCRIPT 
       SQL SECURITY INVOKER AS 
BEGIN 
	DECLARE LV_TO_TS		 		VARCHAR(6);
	DECLARE LV_FROM_TS		 		VARCHAR(6);
	-- Default Reaction Type
	DECLARE LV_REACTION_TYPE 	VARCHAR(200);
	-- Impact Threshold Variable
	DECLARE LV_IMPACT_THRESHOLD INT := 1;
	-- Influence Threshold
--	DECLARE LV_INFLUENCE_THRESHOLD INT;
	
	-- Get the Reaction type configured ---> needs to be extended in future to support multiple
	IF :IM_REACTION_TYPE IS NULL OR LENGTH(:IM_REACTION_TYPE) = 0 THEN
		CALL "procedures.utils::PR_CONF_GET_REACTION_TYPE"(:LV_REACTION_TYPE);
	ELSE
		LV_REACTION_TYPE := :IM_REACTION_TYPE;
	END IF;
	
	-- Set Default To Time Segment
	IF :IM_TO IS NULL OR length(:IM_TO) = 0 THEN
		CALL "procedures.utils::PR_CONF_GET_PREDICTION_TIME_SEGMENT"(:LV_TO_TS);
	ELSE
		LV_TO_TS := :IM_TO;
	END IF;	
	
	-- Set Default From Time Segment
	IF :IM_FROM IS NULL OR length(:IM_FROM) = 0 THEN
		LV_FROM_TS := '201001';
	ELSE
		LV_FROM_TS := :IM_FROM;
	END IF;
	
	------------------------------------------------
	-- Set Impact Threshold
	------------------------------------------------
	SELECT TOP 1 TO_INT(COALESCE("FROM_VALUE","TO_VALUE","FROM_DEFAULT")) 
	 	INTO LV_IMPACT_THRESHOLD
	 	FROM "models.adm::CV_CONFIG"
	 	WHERE "BUCKET_ID" 		= 'IMPACT_THRESHOLD'
	 	  AND "REACTION_TYPE" 	= :LV_REACTION_TYPE;
	------------------------------------------------
	-- Get Valid Customers
	------------------------------------------------
	LT_CUSTOMERS = SELECT "CUST_ID" 
					FROM "db::app.Customer" 
					WHERE "STATUS" = 0
				      AND "INIT_TS" <= TO_INT(:LV_TO_TS);
	------------------------------------------------
	-- Influence and event impact
	------------------------------------------------
	RETURN SELECT EVENT_ID, 
				SUM(reaction_value) AS EVENT_IMPACT, 
				COUNT(CUST_ID) AS TOTAL_CUSTOMERS, 
				ROUND(( SUM(reaction_value) / COUNT(CUST_ID) ) * 100) AS INFLUENCE
			FROM (
					SELECT DISTINCT cdd.cust_id, 
						cdd.from_ts, 
						cdd.to_ts,
						cdd.reaction_value, 
						ce."EVENT_ID.ID" AS event_id
					FROM (
							SELECT cd.cust_id, 
								cd.to_ts, 
								CASE
									WHEN add_months(cd.to_due_date,-18) <= cd.from_due_date 
										THEN year(cd.from_due_date) * 100 + month(cd.from_due_date)
										ELSE year(add_months(cd.to_due_date,-18)) * 100 + month(add_months(cd.to_due_date,-18))
								END AS from_ts, 
								cd.reaction_value
							FROM (
									SELECT cv2.cust_id, 
										cv2.init_date AS to_due_date, 
										IFNULL(cr."REACTION_VALUE",0) AS reaction_value, 
										IFNULL((SELECT max(cv1.init_date)
												FROM "db::app.CustomerValues" AS cv1
												WHERE cv1.init_time_segment < cv2.init_time_segment
													AND cv1.cust_id = cv2.cust_id),ADD_MONTHS(cv2.init_date, -18)
										) AS from_due_date, 
										cv2.init_time_segment AS to_ts
									FROM "db::app.CustomerValues" AS cv2
									INNER JOIN "functions::TF_CUSTOMER_FILTER_FROM_TO"(:IM_FILTER,:LV_FROM_TS,:LV_TO_TS) AS cf
										ON cv2.cust_id = cf.cust_id
									LEFT OUTER JOIN "db::app.CustomerReactions" AS cr
										ON cv2.cust_id = cr.cust_id
											AND cv2.init_date = cr.init_date
									WHERE cv2.init_time_segment >= TO_INT(:LV_FROM_TS)
									AND cv2.init_time_segment < TO_INT(:LV_TO_TS)
								) AS cd
						) AS cdd
					INNER JOIN "db::app.CustomerEvents" AS ce
						ON cdd.cust_id = ce.cust_id
						AND cdd.from_ts <= ce.init_ts
						AND cdd.to_ts > ce.init_ts
					WHERE ce.init_ts >= TO_INT(:LV_FROM_TS)
					AND ce.init_ts < TO_INT(:LV_TO_TS)
				) AS ei
				INNER JOIN "db::adm.config.event.name" AS en
					ON event_id = en.id
			WHERE en.is_enabled = 1
			GROUP BY event_id, en.event_name
			HAVING SUM(reaction_value) >= :LV_IMPACT_THRESHOLD
			ORDER BY event_id ASC;
END;