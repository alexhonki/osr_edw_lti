FUNCTION "functions::TF_CUSTOMER_CHANGES" 
	(
		IM_FILTER NVARCHAR(5000) default '',
		IM_FROM	  VARCHAR(6),
		IM_TO     VARCHAR(6),
		IM_REACTION_TYPE VARCHAR(200) default ''
	)
       RETURNS TABLE (
		"TIME_SEGMENT" 				INT,
		"TOTAL_NEW_CUSTOMERS" 		INT,
		"TOTAL_REACT_CUSTOMERS"		INT,
		"FILTER_NEW_CUSTOMERS"		INT,
		"FILTER_REACT_CUSTOMERS"	INT
	) 
       LANGUAGE SQLSCRIPT 
       SQL SECURITY INVOKER AS 
BEGIN 
-- Default Reaction Type
	DECLARE LV_REACTION_TYPE 	VARCHAR(200);
	
	-- Get the Reaction type configured ---> needs to be extended in future to support multiple
	IF :IM_REACTION_TYPE IS NULL OR LENGTH(:IM_REACTION_TYPE) = 0 THEN
		CALL "procedures.utils::PR_CONF_GET_REACTION_TYPE"(:LV_REACTION_TYPE);
	ELSE
		LV_REACTION_TYPE := :IM_REACTION_TYPE;
	END IF;


	-- FIltered data
	IF length(:IM_FILTER) > 0 AND :IM_FILTER IS NOT NULL THEN
		RETURN select 					"TIME_SEGMENT",
					sum("TOTAL_NEW_CUSTOMERS") "TOTAL_NEW_CUSTOMERS",
					sum("TOTAL_REACT_CUSTOMERS") "TOTAL_REACT_CUSTOMERS",
					sum("FILTER_NEW_CUSTOMERS") "FILTER_NEW_CUSTOMERS",
					sum("FILTER_REACT_CUSTOMERS") "FILTER_REACT_CUSTOMERS" from 
				( SELECT 
					"TIME_SEGMENT",
/*					"TOTAL_NEW_CUSTOMERS",
					"TOTAL_REACT_CUSTOMERS",
					0 AS "FILTER_NEW_CUSTOMERS",
					0 AS "FILTER_REACT_CUSTOMERS"	*/
					"TOTAL_NEW_CUSTOMERS" "FILTER_NEW_CUSTOMERS",
					"TOTAL_REACT_CUSTOMERS" "FILTER_REACT_CUSTOMERS",
					0 AS "TOTAL_NEW_CUSTOMERS",
					0 AS "TOTAL_REACT_CUSTOMERS"			
					FROM
				( 
					select 
						"TIME_SEGMENT", 
						- sum("TOTAL_REACT_CUSTOMERS") "TOTAL_REACT_CUSTOMERS", 
						sum("TOTAL_NEW_CUSTOMERS") "TOTAL_NEW_CUSTOMERS" 
						from
						(select "INIT_TS" "TIME_SEGMENT", COUNT("CUST_ID") "TOTAL_REACT_CUSTOMERS", 0 "TOTAL_NEW_CUSTOMERS"
								FROM "db::app.CustomerReactions"
								WHERE "REACTION_TYPE" = :LV_REACTION_TYPE
								  AND "INIT_TS" <= TO_INT(:IM_TO) AND "INIT_TS" >= TO_INT(:IM_FROM)
								GROUP BY "INIT_TS"
						UNION 		
						select "INIT_TS" "TIME_SEGMENT", 0 "TOTAL_REACT_CUSTOMERS", COUNT("CUST_ID") "TOTAL_NEW_CUSTOMERS" 
							from "db::app.Customer"  
							WHERE "INIT_TS" <= TO_INT(:IM_TO) AND "INIT_TS" >= TO_INT(:IM_FROM)
							GROUP BY "INIT_TS"
						) 
							GROUP BY "TIME_SEGMENT" 
							 
				) 
				UNION
				select 					"TIME_SEGMENT",
/*					0 AS "TOTAL_NEW_CUSTOMERS",
					0 AS "TOTAL_REACT_CUSTOMERS",
					"FILTER_NEW_CUSTOMERS",
					"FILTER_REACT_CUSTOMERS" */
					0 AS "FILTER_NEW_CUSTOMERS",
					0 AS "FILTER_REACT_CUSTOMERS",
					"FILTER_NEW_CUSTOMERS" "TOTAL_NEW_CUSTOMERS",
					"FILTER_REACT_CUSTOMERS" "TOTAL_REACT_CUSTOMERS" 					
					from "functions::TF_CUSTOMER_CHANGES_FILTER"(:IM_FILTER,:IM_FROM,:IM_TO,:LV_REACTION_TYPE) ) GROUP BY "TIME_SEGMENT" ;
		
	
	ELSE


		RETURN SELECT 
				"TIME_SEGMENT",
				"TOTAL_NEW_CUSTOMERS",
				"TOTAL_REACT_CUSTOMERS",
				0 AS "FILTER_NEW_CUSTOMERS",
				0 AS "FILTER_REACT_CUSTOMERS"			
				FROM
			( 
				select 
					"TIME_SEGMENT", 
					- sum("TOTAL_REACT_CUSTOMERS") "TOTAL_REACT_CUSTOMERS", 
					sum("TOTAL_NEW_CUSTOMERS") "TOTAL_NEW_CUSTOMERS" 
					from
					(select "INIT_TS" "TIME_SEGMENT", COUNT("CUST_ID") "TOTAL_REACT_CUSTOMERS", 0 "TOTAL_NEW_CUSTOMERS"
							FROM "db::app.CustomerReactions"
							WHERE "REACTION_TYPE" = :LV_REACTION_TYPE
							  AND "INIT_TS" <= TO_INT(:IM_TO) AND "INIT_TS" >= TO_INT(:IM_FROM)
							GROUP BY "INIT_TS"
					UNION 		
					select "INIT_TS" "TIME_SEGMENT", 0 "TOTAL_REACT_CUSTOMERS", COUNT("CUST_ID") "TOTAL_NEW_CUSTOMERS" 
						from "db::app.Customer"  
						WHERE "INIT_TS" <= TO_INT(:IM_TO) AND "INIT_TS" >= TO_INT(:IM_FROM)
						GROUP BY "INIT_TS"
						) 
						GROUP BY "TIME_SEGMENT" 
						order by "TIME_SEGMENT" );
	END IF;
END;