FUNCTION "functions::TF_STRING_TO_ROW" (IN IM_FILTER NVARCHAR(5000) ,IN IM_DELIMINATOR VARCHAR(1) default ',' ) 
	RETURNS table (
		"ATTR_KEY" 		NVARCHAR(100),
		"ATTR_NAME" 	NVARCHAR(100),
		"ATTR_VALUE"	NVARCHAR(200)
--		"COUNT"			INTEGER
		
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER AS
BEGIN
	DECLARE LV_COUNT 	INT;
	DECLARE LV_FILTER 	NVARCHAR(5000) := replace(:IM_FILTER,'''','');
	DECLARE LV_LIST 	NVARCHAR(100) ARRAY;
	DECLARE LV_NAME 	NVARCHAR(100) ARRAY;
	DECLARE LV_VALUE 	NVARCHAR(200) ARRAY;
	DECLARE LV_INDEX 	INT;
	
	
	-- Get count of deliminator
	select OCCURRENCES_REGEXPR('(' || :IM_DELIMINATOR || ')' IN :IM_FILTER) + 1 as "COUNT"  INTO LV_COUNT from "synonyms::dummy";
	
	
	FOR LV_INDEX IN 1..:LV_COUNT DO
	
		IF :LV_COUNT > 0 and :LV_INDEX < :LV_COUNT  THEN

			LV_LIST[:LV_INDEX] 	:= SUBSTR_BEFORE (:LV_FILTER, :IM_DELIMINATOR);
			LV_NAME[:LV_INDEX] 	:= UPPER( SUBSTR_BEFORE (:LV_LIST[:LV_INDEX], ':'));
			LV_VALUE[:LV_INDEX] := SUBSTR_AFTER (:LV_LIST[:LV_INDEX], ':');
			
			LV_FILTER := SUBSTR_AFTER (:LV_FILTER, :IM_DELIMINATOR);
		ELSE
			LV_LIST[:LV_INDEX] := :LV_FILTER;
			LV_NAME[:LV_INDEX] 	:= UPPER( SUBSTR_BEFORE (:LV_LIST[:LV_INDEX], ':') );
			LV_VALUE[:LV_INDEX] := SUBSTR_AFTER (:LV_LIST[:LV_INDEX], ':');			
		END IF;
	
	END FOR;
	
	-- Create Table from Array
	var_table = unnest(:LV_LIST,:LV_NAME,:LV_VALUE) as ("ATTR_KEY","ATTR_NAME","ATTR_VALUE");
	return select "ATTR_KEY","ATTR_NAME","ATTR_VALUE"  from :var_table;

END;