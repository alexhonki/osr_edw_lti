FUNCTION "functions::TF_CUSTOMER_BY_IMPACT_EVENTS" (
		IN IM_FILTER 	NVARCHAR(5000) default '',	-- Filter
		IN IM_FROM 		VARCHAR(6), -- From Time Segment YYYYMM
		IN IM_TO VARCHAR(6), -- YYYYMM
		IN IM_REACTION_TYPE VARCHAR(200),
		IN IM_EVENT_ID INTEGER
	) 
       RETURNS TABLE (
		"CUST_ID"			INTEGER,
		"FROM_TS" 			INTEGER,
		"TO_TS" 			INTEGER,
		"DUE_AMOUNT"		DOUBLE,
		"DUE_DATE"			TIMESTAMP,
		"REACTION_VALUE" 	INTEGER,
		"EVENT_ID"			INTEGER,
		"EVENT_DATE"		TIMESTAMP
	) 
       LANGUAGE SQLSCRIPT 
       SQL SECURITY INVOKER AS 
BEGIN 
/*****************************  
       Write your function logic 
 *****************************/ 
 	DECLARE LV_TO_TS		 		VARCHAR(6);
	DECLARE LV_FROM_TS		 		VARCHAR(6);
	-- Default Reaction Type
	DECLARE LV_REACTION_TYPE 	VARCHAR(200);

	-- Get the Reaction type configured ---> needs to be extended in future to support multiple
	IF :IM_REACTION_TYPE IS NULL OR LENGTH(:IM_REACTION_TYPE) = 0 THEN
		CALL "procedures.utils::PR_CONF_GET_REACTION_TYPE"(:LV_REACTION_TYPE);
	ELSE
		LV_REACTION_TYPE := :IM_REACTION_TYPE;
	END IF;
	
	-- Set Default To Time Segment
	IF :IM_TO IS NULL OR length(:IM_TO) = 0 THEN
		CALL "procedures.utils::PR_CONF_GET_PREDICTION_TIME_SEGMENT"(:LV_TO_TS);
	ELSE
		LV_TO_TS := :IM_TO;
	END IF;	
	
	-- Set Default From Time Segment
	IF :IM_FROM IS NULL OR length(:IM_FROM) = 0 THEN
		LV_FROM_TS := '201001';
	ELSE
		LV_FROM_TS := :IM_FROM;
	END IF;

	IF :IM_EVENT_ID IS NULL OR length(:IM_EVENT_ID) = 0 OR :IM_EVENT_ID = 0 THEN
		RETURN  SELECT cdd.cust_id, 
					cdd.from_ts, 
					cdd.to_ts,
					cdd.due_amount,
					cdd.due_date,
					cdd.reaction_value, 
					ce."EVENT_ID.ID" AS event_id,
					max(ce.init_date) AS event_date
				FROM (
					SELECT cd.cust_id, 
							year(cd.to_due_date) * 100 + month(cd.to_due_date) as to_ts, 
							CASE
								WHEN add_months(cd.to_due_date,-18) <= cd.from_due_date 
									THEN year(cd.from_due_date) * 100 + month(cd.from_due_date)
									ELSE year(add_months(cd.to_due_date,-18)) * 100 + month(add_months(cd.to_due_date,-18))
							END AS from_ts, 
							cd.reaction_value,
							cd.to_due_date as due_date,
							cd.due_amount
						FROM (
								SELECT cv.cust_id, cv.to_due_date,cv.from_due_date,cv.due_amount, IFNULL(cr."REACTION_VALUE",0) AS reaction_value 
									from ( Select cv.cust_id, 
												cv.init_date AS to_due_date, 
												lag(cv.init_date,1, add_months(cv.init_date,-18)) over (partition by cv.cust_id order by cv.init_date) as from_due_date,
												cv.value AS due_amount
											FROM "db::app.CustomerValues" AS cv
											INNER JOIN "functions::TF_CUSTOMER_FILTER_FROM_TO"(:IM_FILTER,:LV_FROM_TS,:LV_TO_TS) AS cf
												ON cv.cust_id = cf.cust_id
											WHERE cv.init_time_segment >= TO_INT(:LV_FROM_TS)
											AND cv.init_time_segment <= TO_INT(:LV_TO_TS)
											union
											select distinct cv.cust_id, 
												to_date(31129999,'ddmmyyyy') AS to_due_date,
												max(cv.init_date) over (partition by cv.cust_id) as from_due_date,
												0 AS due_amount
											FROM "db::app.CustomerValues" AS cv
											INNER JOIN "functions::TF_CUSTOMER_FILTER_FROM_TO"(:IM_FILTER,:LV_FROM_TS,:LV_TO_TS) AS cf
												ON cv.cust_id = cf.cust_id
											WHERE cv.init_time_segment >= TO_INT(:LV_FROM_TS)
											AND cv.init_time_segment <= TO_INT(:LV_TO_TS)
									) AS cv
									LEFT OUTER JOIN "db::app.CustomerReactions" AS cr
										ON cv.cust_id = cr.cust_id
											AND cv.to_due_date = cr.init_date
							) AS cd
					) AS cdd
				INNER JOIN "db::app.CustomerEvents" AS ce
					ON cdd.cust_id = ce.cust_id
					AND cdd.from_ts <= ce.init_ts
					AND cdd.due_date >= ce.init_date
				WHERE ce.init_ts >= TO_INT(:LV_FROM_TS)
				AND ce.init_ts <= TO_INT(:LV_TO_TS)
				GROUP BY cdd.cust_id, from_ts, to_ts, due_amount, due_date, reaction_value, ce."EVENT_ID.ID";
	ELSE
		RETURN  SELECT cdd.cust_id, 
					cdd.from_ts, 
					cdd.to_ts,
					cdd.due_amount,
					cdd.due_date,
					cdd.reaction_value, 
					ce."EVENT_ID.ID" AS event_id,
					max(ce.init_date) AS event_date
				FROM (
					SELECT cd.cust_id,
							year(cd.to_due_date) * 100 + month(cd.to_due_date) as to_ts,
							CASE
								WHEN add_months(cd.to_due_date,-18) <= cd.from_due_date 
									THEN year(cd.from_due_date) * 100 + month(cd.from_due_date)
									ELSE year(add_months(cd.to_due_date,-18)) * 100 + month(add_months(cd.to_due_date,-18))
							END AS from_ts, 
							cd.reaction_value,
							cd.to_due_date as due_date,
							cd.due_amount
						FROM (
								SELECT cv.cust_id, cv.to_due_date,cv.from_due_date,cv.due_amount, IFNULL(cr."REACTION_VALUE",0) AS reaction_value 
									from ( Select cv.cust_id, 
												cv.init_date AS to_due_date, 
												lag(cv.init_date,1, add_months(cv.init_date,-18)) over (partition by cv.cust_id order by cv.init_date) as from_due_date,
												cv.value AS due_amount
											FROM "db::app.CustomerValues" AS cv
											INNER JOIN "functions::TF_CUSTOMER_FILTER_FROM_TO"(:IM_FILTER,:LV_FROM_TS,:LV_TO_TS) AS cf
												ON cv.cust_id = cf.cust_id
											WHERE cv.init_time_segment >= TO_INT(:LV_FROM_TS)
											AND cv.init_time_segment <= TO_INT(:LV_TO_TS)
											union
											select distinct cv.cust_id, 
												to_date(31129999,'ddmmyyyy') AS to_due_date,
												max(cv.init_date) over (partition by cv.cust_id) as from_due_date,
												0 AS due_amount
											FROM "db::app.CustomerValues" AS cv
											INNER JOIN "functions::TF_CUSTOMER_FILTER_FROM_TO"(:IM_FILTER,:LV_FROM_TS,:LV_TO_TS) AS cf
												ON cv.cust_id = cf.cust_id
											WHERE cv.init_time_segment >= TO_INT(:LV_FROM_TS)
											AND cv.init_time_segment <= TO_INT(:LV_TO_TS)
									) AS cv
									LEFT OUTER JOIN "db::app.CustomerReactions" AS cr
										ON cv.cust_id = cr.cust_id
											AND cv.to_due_date = cr.init_date
							) AS cd
					) AS cdd
				INNER JOIN "db::app.CustomerEvents" AS ce
					ON cdd.cust_id = ce.cust_id
					AND cdd.from_ts <= ce.init_ts
					AND cdd.due_date >= ce.init_date
				WHERE ce."EVENT_ID.ID" = :IM_EVENT_ID 
				AND ce.init_ts >= TO_INT(:LV_FROM_TS)
				AND ce.init_ts <= TO_INT(:LV_TO_TS)
				GROUP BY cdd.cust_id, from_ts, to_ts, due_amount, due_date, reaction_value, ce."EVENT_ID.ID";
	END IF;
END;