PROCEDURE "procedures.utils::PR_PAYMENT_DAYS_AFTER_DUE_DATA" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
  
  /* 

[DESCRIPTION]

- EPO Data - DS Requirement

*/

LT_DUE_DATES_PER_OPBEL =
	
	SELECT  TAXPAYER.CUST_ID AS "CUST_ID", TAXPAYER.INIT_DATE AS JOIN_DATE ,DEBTOR_DATA.GPART, BETRH , DEBTOR_DATA.FAEDN, DEBTOR_DATA.OPBEL, AUGDT, AUGBT, PERSL,
								       B.FAEDN AS INV_DUEDATE, 
								     			B3.DueDate as EPODueDate, CASE WHEN B4.REISSUE_DUE_DATE = '00000000' THEN NULL ELSE B4.REISSUE_DUE_DATE END AS REISSUE_DUE_DATE
									FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" DEBTOR_DATA 
									   INNER JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_DFKKINVDOC_H" B 
												ON  DEBTOR_DATA.XBLNR =  CAST(LPAD(B.INVDOCNO,16,0) AS VARCHAR)
													LEFT JOIN
												(SELECT  B2.OPBEL, DueDate  FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" A2 
														INNER JOIN 
												(SELECT  PPKEY, OPBEL, DueDate FROM (SELECT DISTINCT A1.PPKEY, opbel, DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPP" A1
														INNER JOIN 	
												(SELECT PPKEY,MAX(PRDAT) as DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPD" GROUP BY PPKEY) B1 on A1.PPKEY = B1.PPKEY )) B2
												   ON A2.PPKEY = B2.PPKEY WHERE PPCAT = 'Z7' AND PPSTA in ('1','')) B3 ON DEBTOR_DATA.OPBEL = B3.OPBEL
												   LEFT JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_LTAXASFB" B4
													ON B4.ASSESS_FBNUM = DEBTOR_DATA.FBNUM
									INNER JOIN
							    "db::app.Customer" TAXPAYER ON TAXPAYER.EXT_ID = DEBTOR_DATA.GPART
									WHERE  KOFIZ='LT' AND HVORG = '4000' AND TVORG='0150' AND AUGRD IN ('01','08','15', ''); 

LT_DATA_FILTERED = SELECT 	CUST_ID, 
			JOIN_DATE,
			(DUEAMOUNT - CLEAREDAMOUNT) AS "VALUE",
			case  when month(DUE_DATE) < 7 then concat (year(DUE_DATE)-1, concat('-',year(DUE_DATE)))
            else concat (year(DUE_DATE), concat('-',year(DUE_DATE)+1)) end fin_year,
			TO_TIMESTAMP(DUE_DATE) AS "INIT_DATE",
			TO_TIMESTAMP("MAX_CLEARING_DATE") AS MAX_CLEARING_DATE,
			CASE WHEN days_between(DUE_DATE,MAX_CLEARING_DATE) > 0 THEN 'Yes' 
			WHEN days_between(DUE_DATE,MAX_CLEARING_DATE) <= 0 THEN 'No' 
			END as DEBTOR,
			CASE WHEN EPO IS NOT NULL THEN 'Yes'
			WHEN EPO IS NULL THEN 'No' 
			END AS EPO,
			REISSUE,INV_DD
			
	 FROM ( 
	SELECT CUST_ID, DUEAMOUNT, CLEAREDAMOUNT, DUE_DATE, "MAX_CLEARING_DATE", EPO,REISSUE,INV_DD, JOIN_DATE
						FROM(
								SELECT CUST_ID, MAX("FAEDN") AS "MAX_DUE_DATE", MAX("AUGDT") AS "MAX_CLEARING_DATE", SUM("BETRH") AS "DUEAMOUNT", SUM("AUGBT") AS "CLEAREDAMOUNT", 
									MAX(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) as DUE_DATE,
									MAX(EPODueDate) AS EPO,MAX(REISSUE_DUE_DATE) AS REISSUE,MAX(INV_DUEDATE) AS INV_DD,
									MAX(JOIN_DATE) AS JOIN_DATE
									FROM
									:LT_DUE_DATES_PER_OPBEL
									GROUP BY CUST_ID, OPBEL
							));


TMP_TABLE = SELECT A.CUST_ID, FIN_YEAR, ATTRIBUTE_VALUE AS FTT, 
LAG(DEBTOR) OVER (PARTITION BY A.cust_id ORDER BY A.init_date) AS DEBTOR_PREVIOUS_YR,
TO_INT(DAYS_BETWEEN(TO_DATE(JOIN_DATE), '2018-09-22') / 30) "MONTHS_WITH_COMP" ,
EPO AS EPO_CREATED, DEBTOR AS DEBTOR_THIS_YEAR
FROM
	:LT_DATA_FILTERED A
	INNER JOIN 
	(SELECT CUST_ID, INIT_DATE, END_DATE, ATTRIBUTE_VALUE FROM "db::app.CustomerAttributes" WHERE ATTRIBUTE_ID = 3) B
	ON A.CUST_ID = B.CUST_ID AND TO_DATE(A.INIT_DATE) BETWEEN B.INIT_DATE AND B.END_DATE,
	 "models.apps.customer::CV_ACTIVE_CUSTOMER" C WHERE A.CUST_ID = C.CUST_ID;
  
  
  SELECT TOP 1 * FROM :TMP_TABLE;	

   
   
END