PROCEDURE "procedures.utils::PR_CONF_CREATE_EVENT_FROM_TEMPLATE" 
	(
		IN I_TEMPLATE_ID INT,
		IN IT_PARAMETERS "db::adm.types.parameters" DEFAULT EMPTY,
		OUT O_EVENT_ID	INT
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
  DECLARE LV_CATEGORY_NAME	NVARCHAR(256);
	DECLARE LV_EVENT_NAME 		NVARCHAR(256);
	DECLARE LV_DESCRIPTION		NVARCHAR(500);
	
	DECLARE LV_INDEX 			INT;
	DECLARE LA_VALUE_LIST 		NVARCHAR(256) ARRAY;
	DECLARE LV_EVENT_ID			INT;
	
	-- Get Template Data
	LT_TEMPLATE 	= SELECT TOP 1 * FROM "db::adm.config.event.name" WHERE "ID" = :I_TEMPLATE_ID;	
	LT_PARAMETERS	= SELECT 					
						A."EVENT.ID",
						A."POSITION",
						A."PARAMETER_NAME",
						IFNULL(B."PARAMETER_VALUE",A."PARAMETER_VALUE") "PARAMETER_VALUE",
						A."PARAMETER_DESCRIPTION",
						A."PARAMETER_TYPE"
						FROM "db::adm.config.event.parameters" A
						LEFT OUTER JOIN :IT_PARAMETERS B ON A."PARAMETER_NAME" = B."PARAMETER_NAME"
						WHERE "EVENT.ID" = :I_TEMPLATE_ID;
		
	IF NOT IS_EMPTY(:LT_TEMPLATE) THEN
		-- Read Entry by index
		LV_EVENT_NAME 		:= :LT_TEMPLATE.EVENT_NAME[1];
		LV_CATEGORY_NAME	:= :LT_TEMPLATE.CATEGORY_NAME[1];
		LV_DESCRIPTION		:= :LT_TEMPLATE.DESCRIPTION[1];
		
		LA_VALUE_LIST := ARRAY_AGG(:LT_PARAMETERS.PARAMETER_VALUE ORDER BY POSITION ASC);	
		
		-- replace text by parameter order
		FOR LV_INDEX IN 1..CARDINALITY(:LA_VALUE_LIST) DO
			LV_EVENT_NAME 	:= REPLACE( :LV_EVENT_NAME, '{' || :LV_INDEX || '}',  LTRIM(RTRIM(:LA_VALUE_LIST[:LV_INDEX])) );
			LV_DESCRIPTION 	:= REPLACE( :LV_DESCRIPTION, '{' || :LV_INDEX || '}',  LTRIM(RTRIM(:LA_VALUE_LIST[:LV_INDEX])) );	
		END FOR;
		
		-- Look for unique events by name/category
		LT_EVENT = SELECT "ID" 
					FROM "db::adm.config.event.name" 
					WHERE UPPER("EVENT_NAME") = UPPER(:LV_EVENT_NAME)
					  AND UPPER("CATEGORY_NAME") = UPPER(:LV_CATEGORY_NAME)
					  AND TYPE <> 0;
		
		IF IS_EMPTY(:LT_EVENT) THEN
			LT_EVENT_NEW =
				SELECT "ID",	
					REPLACE_REGEXPR('\n' IN :LV_EVENT_NAME WITH '' )			"EVENT_NAME",
					:LV_CATEGORY_NAME 		"CATEGORY_NAME",
					"ID" 					"TEMPLATE_ID",
					:LV_DESCRIPTION 		"DESCRIPTION",
					0						"IS_ENABLED", 
					MAP("TYPE",0,1,2,4) 	"TYPE",
					SESSION_USER			"CREATED_BY",
					CURRENT_UTCTIMESTAMP 	"CREATED_ON",
					"PROC_SCHEMA",
					"PROC_NAME",				
					"PROC_INTERVAL"
					FROM :LT_TEMPLATE;
					
			
			SELECT "sequences::AdminEventId".NEXTVAL INTO O_EVENT_ID FROM "synonyms::dummy";
					
			-- CREATE TEMPLATE
			INSERT INTO	"db::adm.config.event.name" 
					("ID", "EVENT_NAME", "CATEGORY_NAME", "DESCRIPTION", "IS_ENABLED", "TYPE", "CREATED.BY", "CREATED.DATE", "PROC_SCHEMA", "PROC_NAME", "PROC_INTERVAL","TEMPLATE_ID")
					(SELECT :O_EVENT_ID, "EVENT_NAME", "CATEGORY_NAME", "DESCRIPTION", "IS_ENABLED", "TYPE", "CREATED_BY", "CREATED_ON", "PROC_SCHEMA", "PROC_NAME", "PROC_INTERVAL",:I_TEMPLATE_ID FROM :LT_EVENT_NEW );	

			-- CREATE PARAMETERS
			INSERT INTO "db::adm.config.event.parameters"
			("EVENT.ID", "POSITION", "PARAMETER_NAME", "PARAMETER_VALUE", "PARAMETER_DESCRIPTION", "PARAMETER_TYPE") 	
			SELECT
				:O_EVENT_ID "EVENT.ID",
			 	A.POSITION,
			 	A.PARAMETER_NAME,
			 	A.PARAMETER_VALUE,
			 	A.PARAMETER_DESCRIPTION,
			 	A.PARAMETER_TYPE
				FROM :LT_PARAMETERS A WHERE A.PARAMETER_NAME IS NOT NULL;
				
			COMMIT;		
	--	ELSE
		 -- THROW EXECEPTION - Event Already defined
		END IF;
					
	END IF;
	
	
	
END