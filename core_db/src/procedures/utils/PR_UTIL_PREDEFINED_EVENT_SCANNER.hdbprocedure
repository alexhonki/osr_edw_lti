PROCEDURE "procedures.utils::PR_UTIL_PREDEFINED_EVENT_SCANNER" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   -- Get Templates Events
						/* TYPE 	
						0 = Predefined Event TEMPLATE 
						1 = Predefined Event
						2 = RESERVED 
						3 = ATOMIC EVENT for now
						4 = RESERVED
					   */
	LT_EVENT_NAME = SELECT * FROM "db::adm.config.event.name" WHERE "TYPE" IN (0);
	
	-- Get Pre-defined Events
	LT_PREDEFINED = -- Customer Defined Predefined events
					/*SELECT 
							"SCHEMA_NAME", 
							"PROCEDURE_NAME",
							"PROCEDURE_OID", 
							SUBSTRING_REGEXPR('@BEGIN_DEFINITION([\w\W]+)@END_DEFINITION' IN "DEFINITION" GROUP 1) "METADATA",
							'USER' "DEFINED_BY"
							FROM "SYS"."PROCEDURES"
							WHERE "SCHEMA_NAME" = 'CRI_CUSTOM'
							  AND "PROCEDURE_NAME" LIKE 'CRI_CUSTOM.events::PR_EVENT%'
							  -- Exclude Procs Already loaded
							  AND "SCHEMA_NAME" || '.' || "PROCEDURE_NAME" NOT IN (SELECT "PROC_SCHEMA" || '.' || "PROC_NAME" FROM :LT_EVENT_NAME WHERE NOT ("PROC_NAME" IS NULL OR LENGTH("PROC_NAME") <= 0 ))
					UNION */
					--  SAP Defined Predefined Event Templates
					SELECT 
							"SCHEMA_NAME", 
							"PROCEDURE_NAME",
							"PROCEDURE_OID", 
							SUBSTRING_REGEXPR('@BEGIN_DEFINITION([\w\W]+)@END_DEFINITION' IN "DEFINITION" GROUP 1) "METADATA",
							'SAP' "DEFINED_BY"
							FROM "synonyms::proceduresynonym"
							WHERE "PROCEDURE_NAME" LIKE 'procedures.events.generic::PR_%'
							  AND "SCHEMA_NAME" || '.' || "PROCEDURE_NAME" NOT IN (SELECT "PROC_SCHEMA" || '.' || "PROC_NAME" FROM :LT_EVENT_NAME WHERE NOT ("PROC_NAME" IS NULL OR LENGTH("PROC_NAME") <= 0 ));
	
	-- Get Metadata
	LT_PREDFINED_EVENTS = SELECT
							"SCHEMA_NAME" 		"PROC_SCHEMA", 
							"PROCEDURE_NAME"	"PROC_NAME",
							"PROCEDURE_OID",
							"DEFINED_BY",
							-- User Scalar Function to set each field
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'EVENT_NAME') 			"EVENT_NAME",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'CATEGORY_NAME') 		"CATEGORY_NAME",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'DESCRIPTION') 		"DESCRIPTION",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'TYPE') 				"TYPE",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'PARAMETER_NAME') 		"PARAMETER_NAME",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'PARAMETER_TYPE') 		"PARAMETER_TYPE",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'PARAMETER_DESC') 		"PARAMETER_DESCRIPTION",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'PARAMETER_DEFAULTS') 	"PARAMETER_DEFAULTS",
							"functions::TS_UTIL_PREDEFINED_EVENT_METADATA"("METADATA",'PROCESS_INTERVAL') 	"PROC_INTERVAL"
							FROM :LT_PREDEFINED;

	/*******************************************************************************************************
	 * Get Pre-defined Parameters.
	 * Assign Parameter description and default value and exclude EVENT_ID
	 *******************************************************************************************************/
	 ----- !!!! Section needs to be reviewed
	LT_PREDEFINED_PARAM = SELECT "PROCEDURE_OID", "PARAMETER_NAME", "PARAMETER_TYPE", "PARAMETER_DESCRIPTION", "PARAMETER_DEFAULTS" FROM :LT_PREDFINED_EVENTS;
	
	-- Format Parameters
	CALL "procedures.utils::PR_UTIL_PREDEFINED_EVENT_PARAMETERS" (:LT_PREDEFINED_PARAM,:LT_PARAMETERS);		
	/*******************************************************************************************************
	 * Assign instance number to event name if there is more than one with the same name
	 *******************************************************************************************************/						  
	LT_PARITIONED = SELECT *, 
		ROW_NUMBER() OVER (PARTITION BY "CATEGORY_NAME", "EVENT_NAME" ORDER BY "DEFINED_BY", "CATEGORY_NAME", "EVENT_NAME", "PROCEDURE_OID") "INSTANCE"
		FROM :LT_PREDFINED_EVENTS
		WHERE  "EVENT_NAME" is not null
		ORDER BY "DEFINED_BY", "CATEGORY_NAME", "EVENT_NAME";
		
	LT_NEW_TEMPLATE = 	
		SELECT
			"sequences::AdminEventId".NEXTVAL "EVENT_ID",
			"PROCEDURE_OID", 
			"PROC_SCHEMA",
			"PROC_NAME",
			"PROC_INTERVAL",
			-- Set Instance
			CASE WHEN "INSTANCE" <= 1 THEN
				"EVENT_NAME"
			ELSE
			 "EVENT_NAME" || ' #' || "INSTANCE"
			END AS "EVENT_NAME",
			
			"CATEGORY_NAME",
			"DESCRIPTION",
			-- Set event type
			CASE WHEN "TYPE" = 'TEMPLATE' THEN
				MAP("DEFINED_BY",'SAP',0,'USER',2)
			ELSE
				MAP("DEFINED_BY",'SAP',1,'USER',4)
			END "TYPE",
			
			SESSION_USER 			"CREATED_BY",
			CURRENT_UTCTIMESTAMP	"CREATED_ON"
		
		FROM :LT_PARITIONED;
		
		
	
	IF NOT IS_EMPTY(:LT_NEW_TEMPLATE)  THEN
		
		-- CREATE TEMPLATE
		INSERT INTO	"db::adm.config.event.name" 
				("ID", "EVENT_NAME", "CATEGORY_NAME", "DESCRIPTION", "IS_ENABLED", "TYPE", "CREATED.BY", "CREATED.DATE", "PROC_SCHEMA", "PROC_NAME", "PROC_INTERVAL")
				(SELECT "sequences::AdminEventId".NEXTVAL, "EVENT_NAME", "CATEGORY_NAME", "DESCRIPTION", 0 "IS_ENABLED", "TYPE", "CREATED_BY", "CREATED_ON", "PROC_SCHEMA", "PROC_NAME", "PROC_INTERVAL" FROM :LT_NEW_TEMPLATE);	
		COMMIT;
		-- CREATE PARAMETERS
		INSERT INTO "db::adm.config.event.parameters"
		("EVENT.ID", "POSITION", "PARAMETER_NAME", "PARAMETER_VALUE", "PARAMETER_DESCRIPTION","PARAMETER_TYPE") 	
		SELECT
			B."EVENT_ID",
		 	A.POSITION,
		 	A.PARAMETER_NAME,
		 	A.PARAMETER_VALUE,
		 	A.PARAMETER_DESCRIPTION,
		 	A.PARAMETER_TYPE
			FROM :LT_PARAMETERS A
			LEFT OUTER JOIN :LT_NEW_TEMPLATE B ON A."PROCEDURE_OID" = B."PROCEDURE_OID";
		COMMIT;
	END IF; 
END