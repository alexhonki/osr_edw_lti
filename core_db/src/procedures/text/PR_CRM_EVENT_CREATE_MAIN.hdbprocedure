PROCEDURE "procedures.text::PR_CRM_EVENT_CREATE_MAIN" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/

	DECLARE CURSOR c_crm FOR
		SELECT EVENT_NAME, CATEGORY_NAME FROM "db::text.CRM_Event_Mapping" ORDER BY PRIORITY ASC;
	DECLARE LT_OBJECT_ID TABLE (OBJECT_ID NVARCHAR(10));
	DECLARE LT_EVENT TABLE (CUST_ID BIGINT,
		DESCRIPTION VARCHAR(1000),
		EVENT_NAME VARCHAR(200),
		EVENT_GROUP VARCHAR(200),
		INIT_DATE TIMESTAMP,
		END_DATE TIMESTAMP,
		INIT_TS INTEGER,
		END_TS INTEGER);

	FOR curr_row AS c_crm DO
		CALL "procedures.text::PR_RETURN_CRM_EVENT_DATA"(curr_row.EVENT_NAME, curr_row.CATEGORY_NAME,:LT_OBJECT_ID ,:LT_EVENT, LT_EVENT ,LT_OBJECT_ID);
	END FOR;
	LT_FINAL_EVENT = SELECT * FROM :LT_EVENT ;
				
	
	INSERT INTO "db::app.CustomerEvents"
	("CUST_ID", "EVENT_GROUP", "EVENT_NAME", "INIT_DATE", "END_DATE", "DESCRIPTION", "INIT_TS", "END_TS")
			(SELECT CUST_ID, EVENT_GROUP, EVENT_NAME, INIT_DATE, END_DATE, DESCRIPTION, INIT_TS, END_TS from :LT_FINAL_EVENT);
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_TYPE=>'CRM' );
END