PROCEDURE "procedures.text::PR_CRM_EVENT_POPULATE" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
DECLARE LV_EVENT_ID INT;

LT_CRM_EVENTS = SELECT A.CUST_ID as CUST_ID,
	  C.ID as EVENT_ID,
	  C.CATEGORY_NAME as EVENT_GROUP,
	  C.EVENT_NAME as EVENT_NAME,
	  A.POSTING_DATE as INIT_DATE,
	  A.POSTING_DATE as END_DATE,
	  C.EVENT_NAME as DESCRIPTION,
	  LEFT(A.POSTING_DATE,6) as INIT_TS,
	  NULL as END_TS
   FROM "models.crm::CV_CRM_INTERACTION" as A
   JOIN "$TA_db::text.cleanText.Index_CleanedText" as B  ON A."OBJECT_ID" = B."ID"
   JOIN "db::adm.config.event.name" as C ON UPPER(B."TA_TOKEN") = UPPER(C."EVENT_NAME")
   WHERE CATEGORY_NAME = 'EVENTFROMCRM';
   
-- Identify Events with no entry in Config table
LT_MISC_EVENTS = SELECT CUST_ID,OBJECT_ID,POSTING_DATE, A.TA_TOKEN
					FROM "models.crm::CV_CRM_INTERACTION" as B
					JOIN "$TA_db::text.cleanText.Index_CleanedText" as A ON A."ID" = B."OBJECT_ID"
					WHERE A.TA_TOKEN NOT IN (SELECT EVENT_NAME FROM :LT_CRM_EVENTS);
					
LT_CRM_MISC = SELECT CUST_ID,
				NULL as EVENT_ID,
				TA_TOKEN  as EVENT_NAME,
				'EVENTFROMCRM' as EVENT_GROUP,
				POSTING_DATE as INIT_DATE,
				POSTING_DATE as END_DATE,
				TA_TOKEN as DESCRIPTION,
				LEFT(POSTING_DATE,6) as INIT_TS,
				NULL as END_TS,
				ROW_NUMBER() OVER ( PARTITION BY "OBJECT_ID" ) as ROW_NUM
				FROM :LT_MISC_EVENTS;
				
					
	
INSERT INTO "db::app.CustomerEvents"
	("CUST_ID","EVENT_ID.ID", "EVENT_GROUP", "EVENT_NAME", "INIT_DATE", "END_DATE", "DESCRIPTION", "INIT_TS", "END_TS")
			(SELECT CUST_ID, EVENT_ID, EVENT_GROUP, EVENT_NAME, INIT_DATE, END_DATE, DESCRIPTION, INIT_TS, END_TS from :LT_CRM_EVENTS);
			
INSERT INTO "db::app.CustomerEvents"
	("CUST_ID","EVENT_ID.ID", "EVENT_GROUP", "EVENT_NAME", "INIT_DATE", "END_DATE", "DESCRIPTION", "INIT_TS", "END_TS")
			(SELECT CUST_ID, EVENT_ID, EVENT_GROUP, EVENT_NAME, INIT_DATE, END_DATE, DESCRIPTION, INIT_TS, END_TS from :LT_CRM_MISC 
			WHERE ROW_NUM = 1);
			
SELECT max(ID) into LV_EVENT_ID from "db::adm.config.event.name"  ;
CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"( :LV_EVENT_ID + 1);
END