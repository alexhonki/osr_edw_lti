PROCEDURE "procedures.text::PR_RETURN_CRM_EVENT_DATA" (
	IN IV_EVENT_NAME STRING,
	IN IV_EVENT_GROUP STRING,
	IN IT_EXCL_ID TABLE (
		OBJECT_ID NVARCHAR(10)
		),
	IN IT_EVENT_OUT TABLE(
		CUST_ID BIGINT,
		DESCRIPTION VARCHAR(1000),
		EVENT_NAME VARCHAR(200),
		EVENT_GROUP VARCHAR(200),
		INIT_DATE TIMESTAMP,
		END_DATE TIMESTAMP,
		INIT_TS INTEGER,
		END_TS INTEGER
		),
	OUT OT_EVENT_OUT TABLE(
		CUST_ID BIGINT,
		DESCRIPTION VARCHAR(1000),
		EVENT_NAME VARCHAR(200),
		EVENT_GROUP VARCHAR(200),
		INIT_DATE TIMESTAMP,
		END_DATE TIMESTAMP,
		INIT_TS INTEGER,
		END_TS INTEGER
		),
	OUT OT_EXCL_ID TABLE (
		OBJECT_ID NVARCHAR(10)
		)
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   DECLARE CURSOR C_CRM_FILTER_CONFIG FOR
		SELECT SEARCH_STRING, EXCLUSION FROM "db::text.CRM_Event_Mapping" WHERE EVENT_NAME = :IV_EVENT_NAME;
   DECLARE LV_FILTER_QUERY STRING;
   DECLARE IDX INTEGER;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	
	LV_FILTER_QUERY = '';
	IDX = 1;
	FOR CURR_ROW AS C_CRM_FILTER_CONFIG DO 
		IF :IDX = 1 THEN 
			LV_FILTER_QUERY = CONCAT(CONCAT('description like ''%', CURR_ROW.SEARCH_STRING), '%''');
		ELSE 
			LV_FILTER_QUERY = CONCAT(CONCAT(CONCAT(CONCAT(LV_FILTER_QUERY, 'OR '), 'description like ''%'), CURR_ROW.SEARCH_STRING), '%''');
		END IF;
		
		if curr_row.exclusion != 0
			then 
				LV_FILTER_QUERY = CONCAT(CONCAT(CONCAT(CONCAT(LV_FILTER_QUERY, 'OR '), 'description not like ''%'), CURR_ROW.SEARCH_STRING), '%''');
		end if;
		IDX = IDX + 1;
	END FOR;
   	LT_TEMP = SELECT CUST_ID,
					OBJECT_ID,
					DESCRIPTION,
					(CASE when DIRECTION = '1' then 'OUTBOUND'
						 WHEN DIRECTION = '0' THEN 'INBOUND'
					END) AS DIRECTION,
					CATEGORY_DESC,
					:IV_EVENT_NAME as EVENT_NAME,
					:IV_EVENT_GROUP as EVENT_GROUP,
					POSTING_DATE as INIT_DATE,
					POSTING_DATE as END_DATE,
					LEFT(POSTING_DATE,6) as INIT_TS,
				    NULL as END_TS FROM "models.crm::CV_CRM_INTERACTION" WHERE OBJECT_ID NOT IN (SELECT OBJECT_ID FROM :IT_EXCL_ID);
	LT_TEMP_FILTER = APPLY_FILTER(:LT_TEMP, :LV_FILTER_QUERY);
	OT_EVENT_OUT = SELECT CUST_ID,
							CONCAT(CONCAT(CONCAT(CONCAT(DIRECTION, ' '), CATEGORY_DESC), ' '), DESCRIPTION) AS DESCRIPTION,
							EVENT_NAME,
							EVENT_GROUP,
							INIT_DATE,
							END_DATE,
							INIT_TS,
							END_TS FROM :LT_TEMP_FILTER 
							UNION 
							SELECT CUST_ID,
							DESCRIPTION,
							EVENT_NAME,
							EVENT_GROUP,
							INIT_DATE,
							END_DATE,
							INIT_TS,
							END_TS FROM :IT_EVENT_OUT;
	OT_EXCL_ID = SELECT OBJECT_ID FROM :IT_EXCL_ID UNION SELECT OBJECT_ID FROM :LT_TEMP_FILTER;
END