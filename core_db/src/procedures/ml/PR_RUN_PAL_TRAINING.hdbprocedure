PROCEDURE "procedures.ml::PR_RUN_PAL_TRAINING" 
	(
		IN 	I_MODEL_FLAG TINYINT DEFAULT 1,
		IN	IT_DATA	"db::ml.train.data" default "db::ml.train.data",
		OUT OT_NN_RESULT "db::ml.train.nn_result" DEFAULT EMPTY,
		OUT OT_NN_MODEL "db::ml.train.nn_model" DEFAULT EMPTY,
		OUT OT_RF_MODEL "db::ml.train.rf_model" DEFAULT EMPTY
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
	-- NN Control Parameters
	DECLARE LA_CON_NAME 	VARCHAR(100) ARRAY	:= ARRAY('HIDDEN_LAYER_SIZE','HIDDEN_LAYER_ACTIVE_FUNC','OUTPUT_LAYER_ACTIVE_FUNC','LEARNING_RATE','MOMENTUM_FACTOR','FUNCTIONALITY','TRAINING_STYLE','MAX_ITERATION','NORMALIZATION','WEIGHT_INIT');
	DECLARE LA_CON_INTARGS	INTEGER ARRAY;
	DECLARE LA_DOUBLEARGS	DOUBLE ARRAY;
	DECLARE LA_STRINGARGS 	VARCHAR(100)  ARRAY;
	
	DECLARE NN_HIDDEN_LAYER_SIZE VARCHAR(100);
	DECLARE NN_HIDDEN_LAYER_ACTIVE_FUNC, NN_OUTPUT_LAYER_ACTIVE_FUNC, NN_FUNCTIONALITY, NN_TRAINING_STYLE, NN_MAX_ITERATION, NN_NORMALIZATION, NN_WEIGHT_INIT INT;
	DECLARE NN_LEARNING_RATE, NN_MOMENTUM_FACTOR DOUBLE;
	
	-- RF Control Parameters
	--TBC Removed Columns 'SPLIT_THRESHOLD','CALCULATE_OOB' as not being populated and empty values resulting in error 
	--DECLARE RF_CON_NAME 	VARCHAR(100) ARRAY 	:= ARRAY('TREES_NUM','SEED','NODE_SIZE','THREAD_NUMBER','SPLIT_THRESHOLD','CALCULATE_OOB');
	-- DECLARE RF_CON_NAME 	VARCHAR(100) ARRAY 	:= ARRAY('TREES_NUM','SEED','NODE_SIZE','THREAD_NUMBER');
	DECLARE RF_CON_NAME 	VARCHAR(100) ARRAY 	:= ARRAY('SEED','THREAD_RATIO', 'HAS_ID', 'TREES_NUM', 'NODE_SIZE', 'TRY_NUM', 'CATEGORICAL_VARIABLE', 'STRATA', 'STRATA');
	DECLARE RF_CON_INTARGS	INTEGER ARRAY;
	DECLARE RF_DOUBLEARGS	DOUBLE ARRAY;
	DECLARE RF_STRINGARGS 	VARCHAR(100)  ARRAY;
	
	DECLARE RF_SEED, RF_HAS_ID, RF_TREES_NUM, RF_NODE_SIZE, RF_TRY_NUM, STRATA_Z, STRATA_O INTEGER;
	DECLARE RF_THREAD_RATIO, PORTION_Z, PORTION_O DOUBLE;
	DECLARE RF_CATEGORICAL_VARIABLE NVARCHAR(100);
	
	
	/***************************************************************************************************/
	/******************************************** NN PARAMETERS ****************************************/
	LT_PARAMS = 
		SELECT PARAMETER_NAME, INT_PARAMETER, DOUBLE_PARAMETER, STRING_PARAMETER
		FROM "db::ml.config.MLParameters"
		WHERE "PARAMETER_NAME" LIKE 'NN_%'
		AND IS_ENABLED = 1;
		
	SELECT STRING_PARAMETER INTO NN_HIDDEN_LAYER_SIZE FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_HIDDEN_LAYER_SIZE';
	SELECT INT_PARAMETER INTO NN_HIDDEN_LAYER_ACTIVE_FUNC FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_OUTPUT_LAYER_ACTIVE_FUNC';
	SELECT INT_PARAMETER INTO NN_OUTPUT_LAYER_ACTIVE_FUNC FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_HIDDEN_LAYER_ACTIVE_FUNC';
	SELECT INT_PARAMETER INTO NN_FUNCTIONALITY FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_FUNCTIONALITY';
	SELECT INT_PARAMETER INTO NN_TRAINING_STYLE FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_TRAINING_STYLE';
	SELECT INT_PARAMETER INTO NN_MAX_ITERATION FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_MAX_ITERATION';
	SELECT INT_PARAMETER INTO NN_NORMALIZATION FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_NORMALIZATION';
	SELECT INT_PARAMETER INTO NN_WEIGHT_INIT FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_WEIGHT_INIT';
	SELECT DOUBLE_PARAMETER INTO NN_LEARNING_RATE FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_LEARNING_RATE';
	SELECT DOUBLE_PARAMETER INTO NN_MOMENTUM_FACTOR FROM :LT_PARAMS WHERE PARAMETER_NAME = 'NN_MOMENTUM_FACTOR';
	
	LA_CON_INTARGS := ARRAY(NULL, :NN_HIDDEN_LAYER_ACTIVE_FUNC, :NN_OUTPUT_LAYER_ACTIVE_FUNC,NULL,NULL, :NN_FUNCTIONALITY,
		:NN_TRAINING_STYLE, :NN_MAX_ITERATION, :NN_NORMALIZATION, :NN_WEIGHT_INIT);
	LA_DOUBLEARGS := ARRAY(NULL,NULL,NULL, :NN_LEARNING_RATE, :NN_MOMENTUM_FACTOR,NULL,NULL,NULL,NULL,NULL);
	LA_STRINGARGS := ARRAY(:NN_HIDDEN_LAYER_SIZE,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
	
	-- NN Control Table
	LT_CONTROL = UNNEST(:LA_CON_NAME,:LA_CON_INTARGS,:LA_DOUBLEARGS, :LA_STRINGARGS)  AS (NAME,INTARGS,DOUBLEARGS,STRINGARGS);	


	/***************************************************************************************************/
	/******************************************** RF PARAMETERS ****************************************/
	
	LT_PARAMS = 
		SELECT PARAMETER_NAME, INT_PARAMETER, DOUBLE_PARAMETER, STRING_PARAMETER
		FROM "db::ml.config.MLParameters"
		WHERE "PARAMETER_NAME" LIKE 'RF_%'
		AND IS_ENABLED = 1;
	
	LT_CONTINUOUS_COLS = 
		SELECT 
			'CONTINUOUS_COL' "PARAMETER_NAME",
			TO_INT("INT_PARAMETER")+1 "INT_PARAMETER",
			"DOUBLE_PARAMETER",
			NULL "STRING_PARAMETER" 
 	 	FROM :LT_PARAMS WHERE "PARAMETER_NAME" = 'RF_CONTINUOUS_COL';
	
	--select * from :LT_CONTINUOUS_COLS;
	SELECT INT_PARAMETER INTO RF_SEED FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_SEED';	
	SELECT DOUBLE_PARAMETER INTO RF_THREAD_RATIO FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_THREAD_RATIO';
	SELECT INT_PARAMETER INTO RF_HAS_ID FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_HAS_ID';
	SELECT INT_PARAMETER INTO RF_TREES_NUM FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_TREES_NUM';
	SELECT INT_PARAMETER INTO RF_NODE_SIZE FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_NODE_SIZE';
	SELECT INT_PARAMETER INTO RF_TRY_NUM FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_TRY_NUM';
	SELECT STRING_PARAMETER INTO RF_CATEGORICAL_VARIABLE FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_CATEGORICAL_VARIABLE';
	
	SELECT INT_PARAMETER INTO STRATA_Z FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_STRATA' AND INT_PARAMETER = 0;	
	SELECT DOUBLE_PARAMETER INTO PORTION_Z FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_STRATA' AND INT_PARAMETER = 0;
	SELECT INT_PARAMETER INTO STRATA_O FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_STRATA' AND INT_PARAMETER = 1;	
	SELECT DOUBLE_PARAMETER INTO PORTION_O FROM :LT_PARAMS WHERE PARAMETER_NAME = 'RF_STRATA' AND INT_PARAMETER = 1;
	
	

	RF_CON_INTARGS := ARRAY(:RF_SEED, NULL, :RF_HAS_ID, :RF_TREES_NUM, :RF_NODE_SIZE, :RF_TRY_NUM, NULL, :STRATA_Z, :STRATA_O)  || ARRAY_AGG(:LT_CONTINUOUS_COLS."INT_PARAMETER" ORDER BY "INT_PARAMETER");
	RF_DOUBLEARGS := ARRAY(NULL,:RF_THREAD_RATIO, NULL,NULL, NULL, NULL, NULL, :PORTION_Z, :PORTION_O)  || ARRAY_AGG(:LT_CONTINUOUS_COLS."DOUBLE_PARAMETER" ORDER BY "INT_PARAMETER");
	RF_STRINGARGS := ARRAY(NULL,NULL,NULL,NULL, NULL, NULL, :RF_CATEGORICAL_VARIABLE, NULL, NULL)  || ARRAY_AGG(:LT_CONTINUOUS_COLS."STRING_PARAMETER" ORDER BY "INT_PARAMETER");
	
	RF_CON_NAME := :RF_CON_NAME || ARRAY_AGG(:LT_CONTINUOUS_COLS."PARAMETER_NAME" ORDER BY "INT_PARAMETER");
	
	-- RF Control Table
	RF_CONTROL = UNNEST(:RF_CON_NAME,:RF_CON_INTARGS,:RF_DOUBLEARGS, :RF_STRINGARGS)  AS (NAME,INTARGS,DOUBLEARGS,STRINGARGS);

	IF :I_MODEL_FLAG = 1 THEN -- run NN prediction
		CALL "procedures.ml::PR_PAL_NN_TRAIN"(:IT_DATA, :LT_CONTROL , OT_NN_RESULT, OT_NN_MODEL);
	
		-- Persist
		TRUNCATE TABLE "db::ml.train.nn_result";
		TRUNCATE TABLE "db::ml.train.nn_model";
		
		
		INSERT INTO "db::ml.train.nn_result" (SELECT * FROM :OT_NN_RESULT);
		INSERT INTO "db::ml.train.nn_model" (SELECT * FROM :OT_NN_MODEL);
		COMMIT;
	ELSE -- run RF prediction
		CALL "procedures.ml::PR_PAL_RF_TRAIN"(:IT_DATA, :RF_CONTROL , OT_RF_MODEL, OT_RF_VAR, OT_RF_ERROR, OT_RF_CONF);
		--CALL _SYS_AFL.PAL_RANDOM_DECISION_TREES (PAL_RDT_DATA_TBL, #PAL_PARAMETER_TBL, PAL_RDT_MODEL_TBL, ?, ?, ?) WITH OVERVIEW;
		--CALL _SYS_AFL.PAL_RANDOM_DECISION_TREES (:IT_DATA, :RF_CONTROL , OT_RF_MODEL, OT_RF_VAR, OT_RF_ERROR, OT_RF_CONF);
		-- Persist
		TRUNCATE TABLE "db::ml.train.rf_conf_matrix";
		TRUNCATE TABLE "db::ml.train.rf_model";
		TRUNCATE TABLE "db::ml.train.rf_error";
		TRUNCATE TABLE "db::ml.train.rf_var_imp";
		
		
		INSERT INTO "db::ml.train.rf_conf_matrix" (SELECT * FROM :OT_RF_CONF);
		INSERT INTO "db::ml.train.rf_model" (SELECT * FROM :OT_RF_MODEL);
		INSERT INTO "db::ml.train.rf_error" (SELECT * FROM :OT_RF_ERROR);
		INSERT INTO "db::ml.train.rf_var_imp" (SELECT * FROM :OT_RF_VAR);
		COMMIT;
	END IF;
END