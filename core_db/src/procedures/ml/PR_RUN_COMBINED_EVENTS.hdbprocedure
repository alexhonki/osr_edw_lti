PROCEDURE "procedures.ml::PR_RUN_COMBINED_EVENTS"
	(
		IN I_REACTION_TYPE	VARCHAR(200),
		IN I_INFLUENCE_FACTOR INT DEFAULT 2,
		IN I_WINDOW_PERIOD INT DEFAULT 12,
		OUT RESULT_TABLE "db::ml.combined.result" 
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
-- Custom Exception
	DECLARE no_reactions CONDITION FOR SQL_ERROR_CODE 10000;
	
	DECLARE LA_COMBINED_ID NVARCHAR(500) ARRAY;
	DECLARE LA_EVENT_ID INT ARRAY;
	DECLARE LV_EVENT_ID INT;
	DECLARE LV_ID_LIST NVARCHAR(500) ;
	DECLARE LV_COUNT INT;
	DECLARE LV_TEMPLATE_ID INT;
	
	DECLARE LV_TO INT;
	DECLARE LV_FROM INT;
	DECLARE LV_INDEX TIMESTAMP;
	DECLARE I_GROUP_NO INT := 1;
	DECLARE V_INDEX INT;
		
	--------------------------------------------------------------------------------------------------------
	-- Set Control Parameters
	--------------------------------------------------------------------------------------------------------
	-- THREAD_NUMBER
	BEGIN
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_THREAD_NUMBER','Thread number',1,10,null,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_THREAD_NUMBER';
	END;
	-- MIN_SUPPORT
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_MIN_SUPPORT','Minimum Support',1,null,0.1,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_MIN_SUPPORT';
	END;
	--MIN_CONFIDENCE
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_MIN_CONFIDENCE','Minimum Confidence',1,null,0.5,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_MIN_CONFIDENCE';
	END;
	--MIN_LIFT	
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_MIN_LIFT','Minimum Lift',1,null,0.1,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_MIN_LIFT';
	END;
	-- MAXITEMLENGTH
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_MAXITEMLENGTH','Maximum Length',1,1000,null,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_MAXITEMLENGTH';
	END;
	-- MAX_CONSEQUENT
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_MAX_CONSEQUENT','Max Consequent',1,2,null,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_MAX_CONSEQUENT';
	END;
	-- TIMEOUT
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_TIMEOUT','Timeout',1,172800,null,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_TIMEOUT';
	END;
	-- 
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_RHS_RESTRICT','RHS',1,null,null,'00');
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_RHS_RESTRICT';
	END;
	
	BEGIN 
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT2_LHS_IS_COMPLEMENTARY_RHS','LHS_IS_COMPLEMENTARY_RHS',1,1,null,null);
		SELECT 1 INTO LV_COUNT FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT2_LHS_IS_COMPLEMENTARY_RHS';
	END;

	--------------------------------------------------------------------------------------------------------
	-- Training period from configuration
	--------------------------------------------------------------------------------------------------------
	SELECT TO_DATE INTO LV_INDEX FROM "functions::TF_CONF_COMBINED_EVENTS_TRAINING_DATE"();
	
	LV_TO = YEAR(:LV_INDEX)*100 + MONTH(:LV_INDEX);
	LV_FROM = YEAR(ADD_MONTHS(:LV_INDEX, -60))*100 + MONTH(ADD_MONTHS(:LV_INDEX, -60)) + 1;				
	--------------------------------------------------------------------------------------------------------
	-- Signature Values
	--------------------------------------------------------------------------------------------------------
 	LT_PARAMS = SELECT REPLACE(PARAMETER_NAME,'FPG_COMB_EVT2_','') "NAME", INT_PARAMETER "INTARGS", DOUBLE_PARAMETER "DOUBLEARGS", STRING_PARAMETER "STRINGARGS"
				FROM "db::ml.config.MLParameters"
				WHERE "PARAMETER_NAME" LIKE 'FPG_COMB_EVT2_%'
				AND IS_ENABLED = 1;
	
	--------------------------------------------------------------------------------------------------------
	-- Create Extra Parameters for Control Table	
	--------------------------------------------------------------------------------------------------------
	LT_CONTROL	= 	SELECT CAST( "NAME" AS VARCHAR(100)) "NAME", "INTARGS", "DOUBLEARGS", "STRINGARGS" FROM :LT_PARAMS;

	--------------------------------------------------------------------------------------------------------
	-- Get Only enabled Events
	--------------------------------------------------------------------------------------------------------
	LT_EVENT_NAME = SELECT "ID" FROM "db::adm.config.event.name" WHERE "IS_ENABLED" = 1;

	--------------------------------------------------------------------------------------------------------
	-- Get Valid Reactions for time period
	--------------------------------------------------------------------------------------------------------
	-- GET CUSTOMER WITH ONE EVENT_ID (MAX DATE)
	--

	--------------------------------------------------------------------------------------------------------
	-- Prepare Input Data
	--------------------------------------------------------------------------------------------------------
	------ AJ START
	-- table function to fetch the data
	/*********************************
	LT_CUSTOMERS_BY_IMPACT = 
	CUST_ID
	FROM_TS
	TO_TS
	DUE_AMOUNT
	DUE_DATE
	REACTION_VALUE
	EVENT_ID
	EVENT_DATE
	*********************************/
	LT_CUSTOMERS_BY_IMPACT = SELECT CBI.* 
								FROM "functions::TF_CUSTOMER_BY_IMPACT_EVENTS"(''/*IM_FILTER <NVARCHAR(5000)>*/,
                                                                                        :LV_FROM/*IM_FROM <VARCHAR(6)>*/,
                                                                                        :LV_TO/*IM_TO <VARCHAR(6)>*/,
                                                                                        ''/*IM_REACTION_TYPE <VARCHAR(200)>*/,
                                                                                        NULL/*IM_EVENT_ID <INTEGER>*/) as CBI
								INNER JOIN "db::adm.config.event.name" CEN ON CBI.EVENT_ID = CEN.ID
								AND CEN.SOURCE <> 'COMBINED';

	TRUNCATE TABLE "db::ml.combined.rawEvents";
	INSERT INTO "db::ml.combined.rawEvents"(
		"CUST_ID",
		EVENT_ID,
		INIT_DATE,
		REACTION_DATE,
		GROUP_NO
		)
		(
		SELECT  
		"CUST_ID",
		"EVENT_ID",
		"EVENT_DATE",
		CASE WHEN "REACTION_VALUE" = 1 THEN "DUE_DATE" ELSE NULL END AS "REACTION_DATE",
		CASE WHEN "REACTION_VALUE" = 1 THEN NULL ELSE 1 END AS "GROUP_NO"
		FROM :LT_CUSTOMERS_BY_IMPACT 
		);


	--	Prepare input data for FPGROWTH method
	-- 	"TRANS" : Unique transaction/bucket ID
	-- 	"ITEM" 	: Event ID in transaction 

	-- Prepare Data with Events happened
	LT_DATA_FROM_EVENTS = SELECT CONCAT("CUST_ID", "TO_TS") AS TRANS, "EVENT_ID" AS ITEM
				FROM :LT_CUSTOMERS_BY_IMPACT;

	-- Unique "CUST_ID", "FROM_TS" and "TO_TS" combinations where customer is reacted
	LT_TMP = SELECT DISTINCT "CUST_ID", "FROM_TS", "TO_TS"
				FROM :LT_CUSTOMERS_BY_IMPACT --
				WHERE "REACTION_VALUE" = 1
				ORDER BY "CUST_ID";

	-- Insert event '00' in data for transactions for which Customer is reacted
	LT_DATA_IN =SELECT * FROM :LT_DATA_FROM_EVENTS
				UNION
				SELECT CONCAT(A."CUST_ID", A."TO_TS") AS TRANS, '00' AS ITEM
					FROM :LT_TMP A;
	/*
	LT_DATA_IN =SELECT * FROM :LT_DATA_FROM_EVENTS
				UNION
				SELECT CONCAT(A."CUST_ID", A."TO_TS") AS TRANS, '00' AS ITEM
					FROM :LT_TMP A
					JOIN "db::app.CustomerReactions" B
					ON A."CUST_ID" = B."CUST_ID"
					WHERE B."INIT_TS" BETWEEN A."FROM_TS" AND A."TO_TS";
	*/
	------ AJ END

	--------------------------------------------------------------------------------------------------------
	-- Run FP-GROWTH Algorithm
	--------------------------------------------------------------------------------------------------------
	-- LT_DATA_IN = select * from #PAL_FPGROWTH_DATA_TBL;

	CALL "procedures.ml::PR_PAL_FPGROWTH" (:LT_DATA_IN, :LT_CONTROL, RESULT_TABLE);
--	DROP TABLE #TBL_NON_REACTED_EVENTS;
--	DROP TABLE #TBL_REACTED_EVENTS;
--	DROP TABLE #PAL_FPGROWTH_DATA_TBL;
END