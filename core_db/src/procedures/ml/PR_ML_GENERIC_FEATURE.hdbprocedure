PROCEDURE "procedures.ml::PR_ML_GENERIC_FEATURE" 
(
		IN TRAIN_FLAG INT,
		IN REACTION_TYPE VARCHAR(100),
		IN END_DATE DATE,
		IN CUSTOMERS_TABLE "db::ml.type.customer_list",
		IN EVENTS_TABLE "db::app.CustomerEvents"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
	DECLARE END_TS NVARCHAR(6);
	DECLARE INACTIVE_ID INT;
	/***************************************************************
	*	THE UPPER AND LOWER LIMITS OF EACH OF THE BUCKETS
	*	REQUIRED SINCE THE BUCKETS DO NOT NECESSARILY OVERLAP
	****************************************************************/
	DECLARE HIGH_IMPACT_UPPER INT;
	DECLARE HIGH_IMPACT_LOWER INT;
	DECLARE MED_IMPACT_UPPER INT;
	DECLARE MED_IMPACT_LOWER INT;
	DECLARE LOW_IMPACT_UPPER INT;
	DECLARE LOW_IMPACT_LOWER INT;
	
	DECLARE HIGH_INFLUENCE_UPPER INT;
	DECLARE HIGH_INFLUENCE_LOWER INT;
	DECLARE MED_INFLUENCE_UPPER INT;
	DECLARE MED_INFLUENCE_LOWER INT;
	DECLARE LOW_INFLUENCE_UPPER INT;
	DECLARE LOW_INFLUENCE_LOWER INT;
	
	SELECT TOP 1 TO_VARCHAR(YEAR(:END_DATE) * 100 + MONTH(:END_DATE)) INTO END_TS FROM "synonyms::dummy";
	
	-- GET THE FROM AND TO VALUES FOR EACH OF THE BUCKETS
	LT_BUCKETS = SELECT BUCKET_ID, SEQ, FROM_VALUE, TO_VALUE
	--FROM "_SYS_BIC"."sap.cri.model.adm/CV_CONFIG" TBC
	FROM "models.adm::CV_CONFIG"
	WHERE REACTION_TYPE = :REACTION_TYPE
	AND BUCKET_ID IN ('IMPACT', 'INFLUENCE');
	
		-- STORE THE VALUES RETURNED ABOVE INTO THE VARIABLES
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO HIGH_IMPACT_LOWER, HIGH_IMPACT_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'IMPACT'
	AND "SEQ" = 3;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO MED_IMPACT_LOWER, MED_IMPACT_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'IMPACT'
	AND "SEQ" = 2;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO LOW_IMPACT_LOWER, LOW_IMPACT_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'IMPACT'
	AND "SEQ" = 1;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO HIGH_INFLUENCE_LOWER, HIGH_INFLUENCE_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'INFLUENCE'
	AND "SEQ" = 3;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO MED_INFLUENCE_LOWER, MED_INFLUENCE_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'INFLUENCE'
	AND "SEQ" = 2;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO LOW_INFLUENCE_LOWER, LOW_INFLUENCE_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'INFLUENCE'
	AND "SEQ" = 1;
	
		-- CREATE TABLE TO TEMPORARY STORE THE CREATED FEATURES
	CREATE LOCAL TEMPORARY TABLE #FEATURES_TABLE (
		"CUST_ID" INT,
		"DATA_MONTH" INT,
		"TOTAL_EVENTS" INT,
		"TOTAL_EVENTS_30DAYS" INT,
		"TOTAL_EVENTS_90DAYS" INT,
		"TOTAL_EVENTS_180DAYS" INT,
		"TOTAL_EVENTS_360DAYS" INT,
		"TOTAL_EVENTS_HIGH_INFLUENCE" INT,
		"TOTAL_EVENTS_MEDIUM_INFLUENCE" INT,
		"TOTAL_EVENTS_LOW_INFLUENCE" INT,
		"HIGH_INFLUENCE_EVENTS_30DAYS" INT,
		"HIGH_INFLUENCE_EVENTS_90DAYS" INT,
		"HIGH_INFLUENCE_EVENTS_180DAYS" INT,
		"HIGH_INFLUENCE_EVENTS_360DAYS" INT,
		"TOTAL_EVENTS_HIGH_IMPACT" INT,
		"TOTAL_EVENTS_MEDIUM_IMPACT" INT,
		"TOTAL_EVENTS_LOW_IMPACT" INT,
		"TOTAL_PREDEFINED_EVENTS" INT,
		"PREDEFINED_EVENTS_30DAYS" INT,
		"PREDEFINED_EVENTS_90DAYS" INT,
		"PREDEFINED_EVENTS_180DAYS" INT,
		"PREDEFINED_EVENTS_360DAYS" INT,
		"AVG_MONTHLY_EVENTS" INT,
		"TOTAL_MONTHS_WITH_COMPANY" INT,
	---------------- START OF SPECIFIC FEATURES ---------------------
		"PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW" INT,
		"OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW" INT,
		"OUT_FINAL_DEMAND_DUNNING_ALL_YEARS" INT,
		"PAYMENT_EXTENSION_ENQ" INT,
		"OUT_GARNISHEE_NOTICE_WITHIN_WINDOW" INT,
		"OUT_GARNISHEE_NOTICE_ALL_YEARS" INT,
		"LEGAL_LETTER_WITHIN_WINDOW" INT,
		"LEGAL_LETTER_ALL_YEARS" INT,
		"PAYMENT_PLAN_WITHIN_WINDOW" INT,
		"PAYMENT_PLAN_ALL_YEARS" INT,
		"MORTGAGEE_LETTER_WITHIN_WINDOW" INT,
		"MORTGAGEE_LETTER_ALL_YEARS" INT,
		"DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW" INT,
		"DEBT_MANAGEMENT_EVENTS_ALL_YEARS" INT,
		"PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS" INT,
		"TOTAL_COMBINED_EVENTS" INT,
		"MISSED_INSTALMENT_PAYMENT" INT,
		"RECIEVE_NEW_LAND_EVALUATION" INT,
		"INCREASE_LAND_VALUE_30_PER" INT,
		"INCRESE_TAX_50_PER_PLUS" INT,
		"INCREASE_LAND_VALUE_50_PER" INT,
		"PROMISED_PAYMENT_LATE" INT,
		"BANKRUPT" INT,
		"INSTALMENT_OR_EPO_CREATED" INT,
		"FIRST_TIME_TAXPAYER" INT,
		"AB_DOC_CLEARED" INT,
		"ASSESSMENT" INT,
		"DEBTOR_LAST_6_MONTHS" INT,
		"DEBTOR_IN_PAST" INT,
		"DECREASE_LAND_VALUE_BY_20_PER" INT,
		"DECREASE_PARCELS_10_PLUS" INT,
		"DECREASE_INTEREST_LAND_HOLDINGS" INT,
		"PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT" DOUBLE, 
		"PAST_DEBTOR_RATIO_PER_ASSESSMENT" DOUBLE ,
		"ASSESSMENT_IND_ORG_AMNT" INT,
		"REACTED" INT
	);
	
	INSERT INTO #FEATURES_TABLE (
		SELECT CUST_ID, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, REACTED
		FROM :CUSTOMERS_TABLE
	);
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, REACTED)
	SELECT 
		CUST_ID, 
		REACTED
	FROM :CUSTOMERS_TABLE;
	
	
	/***************************************************************
	*	FEATURES EXTRACTION CODE FOR GENERIC FEATURES 
	****************************************************************/
	-- 0. DATA MONTH
	TMP0 = 
	SELECT "CUST_ID" "CUST_ID", MONTH(:END_DATE) AS DATA_MONTH
	FROM :CUSTOMERS_TABLE
	GROUP BY "CUST_ID";
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, DATA_MONTH)
	SELECT CUST_ID, DATA_MONTH
	FROM :TMP0 a;
	
	-- 1. TOTAL # EVENT
	TMP1 =
	SELECT "CUST_ID" "CUST_ID", COUNT(*) AS TOTAL_EVENTS
	FROM :EVENTS_TABLE
	GROUP BY "CUST_ID";
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS)
	SELECT CUST_ID, TOTAL_EVENTS
	FROM :TMP1 a;
	
	CUST_EVENTS =
		SELECT
			A."CUST_ID" "CUST_ID",
			A.INIT_DATE,
			A."EVENT_ID.ID" "EVENT_ID",
			:END_DATE AS FINAL_DATE
		FROM
			:EVENTS_TABLE A
		JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID;


	-- 2. TOTAL # EVENT PAST 1 MON
	TMP2 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_30DAYS
	FROM
		:CUST_EVENTS	
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -30)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_30DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_30DAYS
	FROM :TMP2 a;
	
	
	-- 3. TOTAL # EVENT PAST 3 MON
	TMP3 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_90DAYS
	FROM
		:CUST_EVENTS
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -90)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_90DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_90DAYS
	FROM :TMP3 a;
	
	
	-- 4. TOTAL # EVENT PAST 6 MON
	TMP4 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_180DAYS
	FROM
		:CUST_EVENTS
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -180)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_180DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_180DAYS
	FROM :TMP4 a;
	
	
	-- 5. TOTAL # EVENTS PAST 1 YEAR
	TMP5 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_360DAYS
	FROM
		:CUST_EVENTS
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -360)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_360DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_360DAYS
	FROM :TMP5 a;
	
	/*  INFLUENCE BASED FEATURES */
	
	/*
	*	REUSABLE QUERY TO GET ALL RELEVANT FIELDS FROM THE EVENT_INFLUENCE
	*	TABLE FUNCTION
	*/
 	EVENT_INFLUENCE = 
		SELECT B."CUST_ID" "CUST_ID", B.INIT_DATE, A.EVENT_IMPACT, A.INFLUENCE, A.EVENT_ID
		FROM "functions::TF_EVENT_INFLUENCE"(:END_TS, :REACTION_TYPE) A
		JOIN :EVENTS_TABLE B
		ON A.EVENT_ID = B."EVENT_ID.ID";
	
	
	-- 6. TOTAL # EVENTS HIGH INF
	TMP6 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_HIGH_INFLUENCE
	FROM :EVENT_INFLUENCE
	WHERE INFLUENCE >= :HIGH_INFLUENCE_LOWER
	AND INFLUENCE < :HIGH_INFLUENCE_UPPER
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_HIGH_INFLUENCE)
	SELECT CUST_ID, a.TOTAL_EVENTS_HIGH_INFLUENCE
	FROM :TMP6 a;
	
	
	-- 7. TOTAL # EVENTS MED INF
	
	TMP7 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_MEDIUM_INFLUENCE
	FROM :EVENT_INFLUENCE
	WHERE INFLUENCE >= :MED_INFLUENCE_LOWER
	AND INFLUENCE < :MED_INFLUENCE_UPPER
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_MEDIUM_INFLUENCE)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_MEDIUM_INFLUENCE
	FROM :TMP7 a;


	-- 8. TOTAL # EVENTS LOW INF
	TMP8 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_LOW_INFLUENCE
	FROM :EVENT_INFLUENCE
	WHERE INFLUENCE >= :LOW_INFLUENCE_LOWER
	AND INFLUENCE < :LOW_INFLUENCE_UPPER
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_LOW_INFLUENCE)
	SELECT CUST_ID, a.TOTAL_EVENTS_LOW_INFLUENCE
	FROM :TMP8 a;
	
	
	
	--	REUSABLE QUERY TO GET EVERY EVENT THE CUSTOMER EXPERIENCED
 	CUST_REACT =
	SELECT
		CUST_ID,
		:END_DATE AS FINAL_DATE
	FROM :CUSTOMERS_TABLE;
	
	
	-- 9. TOTAL # EVENTS HIGH INF PAST MONTH
	TMP9 =
	SELECT
		A.CUST_ID,
		COUNT(*) AS HIGH_INFLUENCE_EVENTS_30DAYS
	FROM :EVENT_INFLUENCE A
	JOIN :CUST_REACT C
	ON A.CUST_ID = C.CUST_ID
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -30)
	AND
		INIT_DATE < FINAL_DATE
	AND
		INFLUENCE >= :HIGH_INFLUENCE_LOWER
	AND
		INFLUENCE < :HIGH_INFLUENCE_UPPER
	GROUP BY A.CUST_ID;

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_30DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_30DAYS
	FROM :TMP9 a;
	
	-- 10. TOTAL # EVENTS HIGH INF PAST 3 MONTH
	TMP10 =
	SELECT
		A.CUST_ID,
		COUNT(*) AS HIGH_INFLUENCE_EVENTS_90DAYS
	FROM :EVENT_INFLUENCE A
	JOIN :CUST_REACT C
	ON A.CUST_ID = C.CUST_ID
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -90)
	AND
		INIT_DATE < FINAL_DATE
	AND
		INFLUENCE >= :HIGH_INFLUENCE_LOWER
	AND
		INFLUENCE < :HIGH_INFLUENCE_UPPER
	GROUP BY A.CUST_ID;

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_90DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_90DAYS
	FROM :TMP10 a;
	
	-- 11. TOTAL # EVENTS HIGH INF PAST 6 MONTH
	TMP11 =
	SELECT
		C.CUST_ID,
		COUNT(*) AS HIGH_INFLUENCE_EVENTS_180DAYS
	FROM :EVENT_INFLUENCE A
	JOIN :CUST_REACT C
	ON A.CUST_ID = C.CUST_ID
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -180)
	AND
		INIT_DATE < FINAL_DATE
	AND
		INFLUENCE >= :HIGH_INFLUENCE_LOWER
	AND
		INFLUENCE < :HIGH_INFLUENCE_UPPER
	GROUP BY C.CUST_ID;
	

	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_180DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_180DAYS
	FROM :TMP11 a;
	
	-- 12. TOTAL # EVENTS HIGH INF PAST 1 YEAR
	TMP12 =
	SELECT
		A.CUST_ID,
		COUNT(*) AS HIGH_INFLUENCE_EVENTS_360DAYS
	FROM :EVENT_INFLUENCE A
	JOIN :CUST_REACT C
	ON A.CUST_ID = C.CUST_ID
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -360)
	AND
		INIT_DATE < FINAL_DATE
	AND
		INFLUENCE >= :HIGH_INFLUENCE_LOWER
	AND
		INFLUENCE < :HIGH_INFLUENCE_UPPER
	GROUP BY A.CUST_ID;

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_360DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_360DAYS
	FROM :TMP12 a;
	
	
	/* IMPACT BASED FEATURES */
	
	/*
	*	REUSABLE QUERY TO GET ALL RELEVANT FIELDS FROM THE EVENT_IMPACT
	*	TABLE FUNCTION
	*/
 	EVENT_IMPACT = 
		SELECT A.EVENT_ID, A.EVENT_IMPACT, B."CUST_ID" "CUST_ID"
		FROM "functions::TF_EVENT_IMPACT"(:END_TS, :REACTION_TYPE) A
		JOIN :EVENTS_TABLE B
		ON A.EVENT_ID = B."EVENT_ID.ID";

		
	-- 13. TOTAL # EVENTS HIGH IMPACT
	TMP13 =	
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_HIGH_IMPACT
	FROM :EVENT_IMPACT
	WHERE EVENT_IMPACT >= :HIGH_IMPACT_LOWER
	AND EVENT_IMPACT < :HIGH_IMPACT_UPPER
	GROUP BY CUST_ID;

	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_HIGH_IMPACT)
	SELECT CUST_ID, a.TOTAL_EVENTS_HIGH_IMPACT
	FROM :TMP13 a;
	
	-- 14. TOTAL # EVENTS MED IMPACT
	TMP14 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_MEDIUM_IMPACT
	FROM :EVENT_IMPACT
	WHERE EVENT_IMPACT < :MED_IMPACT_UPPER
	AND EVENT_IMPACT >= :MED_IMPACT_LOWER
	GROUP BY CUST_ID;
	
	UPDATE #FEATURES_TABLE b
	SET b.TOTAL_EVENTS_MEDIUM_IMPACT = a.TOTAL_EVENTS_MEDIUM_IMPACT
	FROM :TMP14 a, #FEATURES_TABLE b
	WHERE a.CUST_ID = b.CUST_ID;
	
	-- 15. TOTAL # EVENTS LOW IMPACT	
	TMP15 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_LOW_IMPACT
	FROM :EVENT_IMPACT
	WHERE EVENT_IMPACT < :LOW_IMPACT_UPPER
	AND EVENT_IMPACT >= :LOW_IMPACT_LOWER
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_LOW_IMPACT)
	SELECT CUST_ID, a.TOTAL_EVENTS_LOW_IMPACT
	FROM :TMP15 a;
	
	/* DAYS TO REACT EVENT BASED FEATURES */	
	
	/*
	*	REUSABLE QUERY TO GET ALL OF THE RELEVANT FIELDS FROM
	*	THE DAYS TO REACT TABLE FUNCTION
	*/
 	EVENT_DTR =
	SELECT B."CUST_ID" "CUST_ID", A.DAYS_TO_REACT
	FROM "functions::TF_EVENT_DAYS_TO_REACT"(:END_TS,:REACTION_TYPE) A
	INNER JOIN :EVENTS_TABLE B
	ON A.EVENT_ID = B."EVENT_ID.ID";
	

	/* PREDEFINED EVENT BASED FEATURES */

 	ALL_PREDEFINED_EVENTS_ID = SELECT DISTINCT "ID" FROM "db::adm.config.event.name" WHERE "TYPE"=1;

	IF IS_EMPTY(:ALL_PREDEFINED_EVENTS_ID) THEN
		--This statement executes if there are no predefined event IDs in the table	
		
		-- 20. Total number of predefined events the customers have
		INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_PREDEFINED_EVENTS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;	
		
		-- 21. # of Predefined events in the past 30 days	    
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_30DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		      
		-- 22. # of Predefined events in the past 90 days
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_90DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		            
		-- 23. # of Predefined events in the past 180 days  
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_180DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		 
		-- 24. # of Predefined events in the past 360 days
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_360DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;

	ELSE  
		--Otherwise if there is predefined event IDs
	
   /*
	*	REUSABLE QUERY TO EXTRACT THE EVENT BEGIN DATE AND CUSTOMER END DATE 
	*	FOR EVERY PREDEFINED EVENT AND CUSTOMER COMBINATION
	*/
	
 		EVENT_PREDEFINED =
			SELECT
				a."CUST_ID" "CUST_ID",
				a.INIT_DATE,
				:END_DATE AS DATE_TO_USE
			FROM 
				:EVENTS_TABLE a,
				:CUSTOMERS_TABLE b
			WHERE a."CUST_ID" = b.CUST_ID
			AND a."EVENT_ID.ID" IN (SELECT "ID" FROM :ALL_PREDEFINED_EVENTS_ID);
      
      --This executes when there are predefined events in the table
		
		-- 20. Total number of predefined events the customers have
		TMP20 = 
		SELECT "CUST_ID" "CUST_ID", COUNT(*) AS TOTAL_PREDEFINED_EVENTS
	    FROM :EVENTS_TABLE
	    WHERE "EVENT_ID.ID" IN (SELECT "ID" FROM :ALL_PREDEFINED_EVENTS_ID)
	    GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_PREDEFINED_EVENTS)
		SELECT CUST_ID, a.TOTAL_PREDEFINED_EVENTS
		FROM :TMP20 a;
	
	    -- 21. # of Predefined events in the past 30 days
		TMP21 =
		SELECT CUST_ID, COUNT(*) AS PREDEFINED_EVENTS_30DAYS 
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -30) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	    
	    INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_30DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_30DAYS
	    FROM :TMP21 a;
	
		-- 22. # of Predefined events in the past 90 days
		TMP22 =
		SELECT CUST_ID, COUNT(*) AS PREDEFINED_EVENTS_90DAYS
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -90) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	      
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_90DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_90DAYS
		FROM :TMP22 a;
	      
		-- 23. # of Predefined events in the past 180 days
		TMP23 =
		SELECT CUST_ID, COUNT(*) PREDEFINED_EVENTS_180DAYS
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -180) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	      
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_180DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_180DAYS
		FROM :TMP23 a;
	
		-- 24. # of Predefined events in the past 360 days
		TMP24 =
		SELECT CUST_ID, COUNT(*) AS PREDEFINED_EVENTS_360DAYS
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -360) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	            
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_360DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_360DAYS
		FROM :TMP24 a;
		
	END IF;

	-- 25. Average # of events in a month
	TMP25 =
		SELECT CUST_ID, TO_INT(SUM(EVENTS_COUNT)/COUNT(EVENTS_COUNT)) AS "AVG_EVENTS_PER_MONTH"
		FROM (
			SELECT "CUST_ID" "CUST_ID", INIT_TS, COUNT(*) AS EVENTS_COUNT
	        FROM :EVENTS_TABLE
	        GROUP BY "CUST_ID", INIT_TS
	        ORDER BY "CUST_ID", INIT_TS
		)
		GROUP BY CUST_ID;
	      
	INSERT INTO #FEATURES_TABLE (CUST_ID, AVG_MONTHLY_EVENTS)
	SELECT CUST_ID, a.AVG_EVENTS_PER_MONTH
	FROM :TMP25 a;

	-- 26. The time period the customer has been with the company
	TMP26 =
	SELECT
		a.CUST_ID,
		b.INIT_DATE,
		b.INIT_TS,
		TO_INT(DAYS_BETWEEN(TO_DATE(b.INIT_DATE),
			:END_DATE) / 30) "MONTHS_BETWEEN" 
	FROM 
		:CUSTOMERS_TABLE a,
		"models.apps.customer::CV_ACTIVE_CUSTOMER" b
	WHERE a.CUST_ID = b.CUST_ID;
            
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_MONTHS_WITH_COMPANY)
	SELECT CUST_ID, a.MONTHS_BETWEEN
	FROM :TMP26 a;

	
	/* INACTIVITY (NO EVENTS) BASED FEATURES */
	
	--Gets inactive ID
 	TEMP_ID = SELECT "ID" FROM (
		SELECT "ID" FROM  "db::adm.config.event.name"  
			WHERE TEMPLATE_ID = (SELECT "ID" as EVENT_ID FROM "db::adm.config.event.name" WHERE LOWER(EVENT_NAME) LIKE '%no activity%' AND "TYPE" = 0)
	);
		 
	IF IS_EMPTY(:TEMP_ID) THEN
		 		--If there are no inactive ID
		 INACTIVE_ID := 0;
	ELSE 
		 		--If there is an inactive ID
		 SELECT TOP 1 "ID" INTO INACTIVE_ID FROM :TEMP_ID;
	END IF;
	 
	------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------
	-- FEATURES EXTRACTION CODE FOR SPECIFIC FEATURES 
	------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------
	
	-- 39. EVENT_GROUP: PAYMENT ARRANGEMENT
	    TMP39 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(EVENT_GROUP) LIKE 'payment arrangement'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW)
		SELECT CUST_ID, a.PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW
		FROM :TMP39 a;
		
	-- 40. EVENT_NAME: 'Outbound FINAL DEMAND WITHIN PERIOD'
	-- aj free 20
	    TMP40 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(DESCRIPTION) LIKE 'out%dun%'
		OR LOWER(DESCRIPTION) LIKE 'out%fin% dem%'
		OR LOWER(DESCRIPTION) LIKE 'out%dem% fin%'
		GROUP BY "CUST_ID";

		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW)
		SELECT CUST_ID, a.OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW
		FROM :TMP40 a;
		
	-- 41. EVENT_NAME: 'Outbound FINAL DEMAND ALL YEARS'
	
	    TMP41 =
		SELECT
			B.CUST_ID "CUST_ID", COUNT(*) AS "OUT_FINAL_DEMAND_DUNNING_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE A.INIT_DATE <= :END_DATE
		AND (LOWER(DESCRIPTION) LIKE 'out%dun%'
		OR LOWER(DESCRIPTION) LIKE 'out%fin% dem%'
		OR LOWER(DESCRIPTION) LIKE 'out%dem% fin%')
		GROUP BY B.CUST_ID;
		
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_FINAL_DEMAND_DUNNING_ALL_YEARS)
		SELECT CUST_ID, a.OUT_FINAL_DEMAND_DUNNING_ALL_YEARS
		FROM :TMP41 a;
		
	-- 42. EVENT_NAME: 'Payment Extension'

	    TMP42 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "PAYMENT_EXTENSION_ENQ"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(DESCRIPTION) LIKE '%pay% ext%' 
		OR LOWER(DESCRIPTION) LIKE	'%py% ext%'
		OR LOWER(DESCRIPTION) LIKE  '%ext% pay%' 
		OR LOWER(DESCRIPTION) LIKE  '%ext% py%'
		OR LOWER(DESCRIPTION) LIKE  '%dun% block%'
		OR LOWER(DESCRIPTION) LIKE  '%int% block%'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_EXTENSION_ENQ)
		SELECT CUST_ID, a.PAYMENT_EXTENSION_ENQ
		FROM :TMP42 a;
		
	-- 43. EVENT_NAME: 'Outbound Garnishee Notice WITHIN WINDOW'

	    TMP43 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "OUT_GARNISHEE_NOTICE_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(DESCRIPTION) LIKE 'out% garn%'
		OR LOWER(DESCRIPTION) LIKE  'out%g/n%'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_GARNISHEE_NOTICE_WITHIN_WINDOW)
		SELECT CUST_ID, a.OUT_GARNISHEE_NOTICE_WITHIN_WINDOW
		FROM :TMP43 a;
	
	-- 44. EVENT_NAME: 'Outbound Garnishee ALL YEARS'


	    TMP44 =
		SELECT
			B.CUST_ID, COUNT(*) AS "OUT_GARNISHEE_NOTICE_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE A.INIT_DATE <= :END_DATE
		AND (LOWER(DESCRIPTION) LIKE 'out% garn%'
		OR LOWER(DESCRIPTION) LIKE  'out%g/n%')
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_GARNISHEE_NOTICE_ALL_YEARS)
		SELECT CUST_ID, a.OUT_GARNISHEE_NOTICE_ALL_YEARS
		FROM :TMP44 a;
		
	-- 45. EVENT_NAME: 'Legal Letter WITHIN WINDOW'
	    TMP45 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "LEGAL_LETTER_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(EVENT_NAME) LIKE 'legal letter'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, LEGAL_LETTER_WITHIN_WINDOW)
		SELECT CUST_ID, a.LEGAL_LETTER_WITHIN_WINDOW
		FROM :TMP45 a;
	
	-- 46. EVENT_NAME: 'legal letter ALL YEARS'
	    TMP46 =
		SELECT
			B.CUST_ID, COUNT(*) AS "LEGAL_LETTER_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE A.INIT_DATE <= :END_DATE
		AND (LOWER(A.EVENT_NAME) LIKE 'legal letter')
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, LEGAL_LETTER_ALL_YEARS)
		SELECT CUST_ID, a.LEGAL_LETTER_ALL_YEARS
		FROM :TMP46 a;
		
	-- 47. EVENT_NAME: 'pay plan or payment plan WITHIN WINDOW'

	    TMP47 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "PAYMENT_PLAN_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(DESCRIPTION) LIKE  '%pay% plan%'
			OR LOWER(DESCRIPTION) LIKE  '%pay% arr%'
			OR LOWER(DESCRIPTION) LIKE  '%inst% plan%'
			OR LOWER(DESCRIPTION) LIKE  '%inst% arr%'
			OR LOWER(DESCRIPTION) LIKE  '%p2p%'
			OR LOWER(DESCRIPTION) LIKE  '%promise% pay%'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_PLAN_WITHIN_WINDOW)
		SELECT CUST_ID, a.PAYMENT_PLAN_WITHIN_WINDOW
		FROM :TMP47 a;
	
	-- 48. EVENT_NAME: 'pay plan or payment plan ALL YEARS'

	    TMP48 =
		SELECT
			B.CUST_ID, COUNT(*) AS "PAYMENT_PLAN_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE A.INIT_DATE <= :END_DATE
		AND (LOWER(DESCRIPTION) LIKE  '%pay% plan%'
			OR LOWER(DESCRIPTION) LIKE  '%pay% arr%'
			OR LOWER(DESCRIPTION) LIKE  '%inst% plan%'
			OR LOWER(DESCRIPTION) LIKE  '%inst% arr%'
			OR LOWER(DESCRIPTION) LIKE  '%p2p%'
			OR LOWER(DESCRIPTION) LIKE  '%promise% pay%')
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_PLAN_ALL_YEARS)
		SELECT CUST_ID, a.PAYMENT_PLAN_ALL_YEARS
		FROM :TMP48 a;
		
	-- 49. EVENT_NAME: 'mortgagee letter WITHIN WINDOW'

	    TMP49 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "MORTGAGEE_LETTER_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(description) LIKE '%s%62 %'
		OR LOWER(description) LIKE '%mort% req%'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, MORTGAGEE_LETTER_WITHIN_WINDOW)
		SELECT CUST_ID, a.MORTGAGEE_LETTER_WITHIN_WINDOW
		FROM :TMP49 a;
	
	-- 50. EVENT_NAME: 'mortgagee letter ALL YEARS'
	    TMP50 =
		SELECT
			B.CUST_ID, COUNT(*) AS "MORTGAGEE_LETTER_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE A.INIT_DATE <= :END_DATE
		AND (LOWER(description) LIKE '%s%62 %'
		OR LOWER(description) LIKE '%mort% req%')
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, MORTGAGEE_LETTER_ALL_YEARS)
		SELECT CUST_ID, a.MORTGAGEE_LETTER_ALL_YEARS
		FROM :TMP50 a;		
		
	-- 51. EVENT_GROUP: DUNNING CONTACT/DEBT MANAGEMENT WITHIN WINDOW
	    TMP51 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(EVENT_GROUP) LIKE 'debt management'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW)
		SELECT a.CUST_ID, a.DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW
		FROM :TMP51 a;
	
	-- 52. EVENT_NAME: 'DUNNING CONTACT/DEBT MANAGEMENT ALL YEARS'
  
	   TMP52 =
		SELECT
			B.CUST_ID "CUST_ID", COUNT(*) AS "DEBT_MANAGEMENT_EVENTS_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE A.INIT_DATE <= :END_DATE
		AND (LOWER(A.EVENT_GROUP) LIKE 'debt management')
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, DEBT_MANAGEMENT_EVENTS_ALL_YEARS)
		SELECT a.CUST_ID, a.DEBT_MANAGEMENT_EVENTS_ALL_YEARS
		FROM :TMP52 a;			
		
		-- 53. EVENT_NAME: 'PAYMENT ARRANGEMENT ALL YEARS'
	    TMP53 =
		SELECT
			B.CUST_ID "CUST_ID", COUNT(*) AS "PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE LOWER(A.EVENT_GROUP) LIKE 'payment arrangement'
		AND A.INIT_DATE <= :END_DATE
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS)
		SELECT a.CUST_ID, a.PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS
		FROM :TMP53 a;	
		
		-- 54. EVENT_NAME: 'TOTAL_COMBINED_EVENTS'
	    TMP54 =
		SELECT "CUST_ID" "CUST_ID", COUNT(*) AS TOTAL_COMBINED_EVENTS
		FROM :EVENTS_TABLE
		GROUP BY "CUST_ID",EVENT_GROUP
		HAVING EVENT_GROUP = 'Combined Event';
		
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_COMBINED_EVENTS)
		SELECT a.CUST_ID, a.TOTAL_COMBINED_EVENTS
		FROM :TMP54 a;

		-- 55 : Missed Instalment payment
		TMP55 =
		SELECT "CUST_ID" "CUST_ID", 1 AS "MISSED_INSTALMENT_PAYMENT"               
		FROM :EVENTS_TABLE
		WHERE EVENT_NAME = 'Missed instalment payment'
		GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, MISSED_INSTALMENT_PAYMENT)
		SELECT a.CUST_ID, a.MISSED_INSTALMENT_PAYMENT
		FROM :TMP55 a;

		-- 61 : Receive new land evaluation
		TMP61 =
		SELECT
		"CUST_ID" "CUST_ID", 1 AS "RECIEVE_NEW_LAND_EVALUATION"
		FROM   :EVENTS_TABLE
		WHERE EVENT_NAME = 'Receive new land evaluation'
		GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, RECIEVE_NEW_LAND_EVALUATION)
		SELECT a.CUST_ID, a.RECIEVE_NEW_LAND_EVALUATION
		FROM :TMP61 a;


		-- 62 : Increase in Land Valuation by 30%
			TMP62 =
		SELECT
			"CUST_ID" "CUST_ID", 1 AS "INCREASE_LAND_VALUE_30_PER"
			FROM   :EVENTS_TABLE
			WHERE EVENT_NAME = 'Increase in Land Valuation by 30%'
			GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, INCREASE_LAND_VALUE_30_PER)
		SELECT a.CUST_ID, a.INCREASE_LAND_VALUE_30_PER
		FROM :TMP62 a;


		-- 63 : Increase in Tax Amount by 50% or more
		TMP63 =
		SELECT
			"CUST_ID" "CUST_ID", 1 AS "INCRESE_TAX_50_PER_PLUS"
			FROM   :EVENTS_TABLE
			WHERE EVENT_NAME = 'Increase in Tax Amount by 50% or more'
			GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, INCRESE_TAX_50_PER_PLUS)
		SELECT a.CUST_ID, a.INCRESE_TAX_50_PER_PLUS
		FROM :TMP63 a;


		-- 64 : Increase in Total Land Value by 50%
		TMP64 =
		SELECT
			"CUST_ID" "CUST_ID", 1 AS "INCREASE_LAND_VALUE_50_PER"
			FROM   :EVENTS_TABLE
			WHERE EVENT_NAME = 'Increase in Total Land Value by 50%'
			GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, INCREASE_LAND_VALUE_50_PER)
		SELECT a.CUST_ID, a.INCREASE_LAND_VALUE_50_PER
		FROM :TMP64 a;


		-- 65 : Promise to Pay Payment was Late
		TMP65 =
		SELECT
			"CUST_ID" "CUST_ID", 1 AS "PROMISED_PAYMENT_LATE"
			FROM   :EVENTS_TABLE
			WHERE EVENT_NAME ='Promise to Pay Payment was Late'
			GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, PROMISED_PAYMENT_LATE)
		SELECT a.CUST_ID, a.PROMISED_PAYMENT_LATE
		FROM :TMP65 a;


		-- 66 : BANKRUPT
		TMP66 =
		SELECT
			"CUST_ID" "CUST_ID", 1 AS "BANKRUPT"
			FROM   :EVENTS_TABLE
			WHERE EVENT_NAME = 'BANKRUPT'
			GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, BANKRUPT)
		SELECT a.CUST_ID, a.BANKRUPT
		FROM :TMP66 a;

		-- 67 : Installment plan or EPO created
		TMP67 =	
		SELECT
		"CUST_ID" "CUST_ID", 1 AS "INSTALMENT_OR_EPO_CREATED"
		FROM   :EVENTS_TABLE
		WHERE EVENT_NAME = 'Installment plan or EPO created'
		GROUP BY "CUST_ID";

		INSERT INTO #FEATURES_TABLE (CUST_ID, INSTALMENT_OR_EPO_CREATED)
		SELECT a.CUST_ID, a.INSTALMENT_OR_EPO_CREATED
		FROM :TMP67 a;



		-- First time taxpayer
		TMP68 =	
		SELECT "CUST_ID", CASE WHEN "ATTRIBUTE_VALUE" = 'Yes' then 1 else 0 end as "FIRST_TIME_TAXPAYER"
		FROM "db::app.CustomerAttributes"
		where "ATTRIBUTE_ID" = 3
		and :END_DATE BETWEEN "INIT_DATE" AND "END_DATE"
		AND "CUST_ID" IN (
		SELECT "CUST_ID"
		FROM 	:CUSTOMERS_TABLE
		);

		INSERT INTO #FEATURES_TABLE (CUST_ID, FIRST_TIME_TAXPAYER)
		SELECT a.CUST_ID, a.FIRST_TIME_TAXPAYER
		FROM :TMP68 a;


		-- AB document cleared fully
		TMP69 =
		SELECT "CUST_ID" "CUST_ID", count(*) AS "AB_DOC_CLEARED"               
		FROM :EVENTS_TABLE
		WHERE EVENT_NAME = 'AB Document Cleared Fully'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, AB_DOC_CLEARED)
		SELECT CUST_ID, a.AB_DOC_CLEARED
		FROM :TMP69 a;


		-- Assessment
		TMP70 =
		/*
		SELECT "CUST_ID" "CUST_ID", count(*) AS "ASSESSMENT"               
		FROM :EVENTS_TABLE
		WHERE EVENT_GROUP = 'Assessment'
		GROUP BY "CUST_ID";
		*/
		SELECT A."CUST_ID" "CUST_ID", count(*) AS "ASSESSMENT"               
        FROM "db::app.CustomerEvents" A
            INNER JOIN
            	:CUSTOMERS_TABLE B
            ON A."CUST_ID" = B."CUST_ID"
        WHERE A.EVENT_NAME LIKE 'Assessment Posted%'
        and A.INIT_DATE < :END_DATE
        and A.INIT_DATE > ADD_MONTHS(:END_DATE, -3)
        GROUP BY A."CUST_ID";


		INSERT INTO #FEATURES_TABLE (CUST_ID, ASSESSMENT)
		SELECT CUST_ID, a.ASSESSMENT
		FROM :TMP70 a;
		
		-- DEBTOR IN LAST 6 MONTHS
	 	TMP71 =
	 	SELECT 
	 		"CUST_ID" "CUST_ID", 1 AS DEBTOR_LAST_6_MONTHS
	 	FROM :CUSTOMERS_TABLE
	 	WHERE "REACTION_DATE" BETWEEN ADD_MONTHS(:END_DATE, -6) AND :END_DATE;
	 	
	 	INSERT INTO #FEATURES_TABLE (CUST_ID, DEBTOR_LAST_6_MONTHS)
		SELECT CUST_ID, a.DEBTOR_LAST_6_MONTHS
		FROM :TMP71 a;
		
		-- DEBTOR IN PAST
	 	TMP72 =
		/*
			SELECT 
 			A."CUST_ID" "CUST_ID", count(*) AS DEBTOR_IN_PAST
 			FROM "db::app.CustomerReactions" A
			INNER JOIN
			:CUSTOMERS_TABLE B
			ON A."CUST_ID" = B."CUST_ID"
			WHERE A."INIT_DATE" < :END_DATE
			GROUP BY A."CUST_ID";
		*/
		SELECT 
	        A."CUST_ID" "CUST_ID", count(*) AS DEBTOR_IN_PAST
	    FROM "db::app.CustomerReactions" A
	    INNER JOIN
	        :CUSTOMERS_TABLE B
	    ON A."CUST_ID" = B."CUST_ID"
        WHERE A.INIT_DATE < :END_DATE
        --AND A.INIT_DATE > ADD_MONTHS(:END_DATE, -36)
        GROUP BY A.CUST_ID;
			
		INSERT INTO #FEATURES_TABLE (CUST_ID, DEBTOR_IN_PAST)
		SELECT CUST_ID, a.DEBTOR_IN_PAST
		FROM :TMP72 a;
		
		-- Decrease in Land Valuation by 20%
		TMP73 =
		SELECT A.CUST_ID, 1 AS "DECREASE_LAND_VALUE_BY_20_PER"
		FROM 
		        :EVENTS_TABLE A
		INNER JOIN
		        :CUSTOMERS_TABLE C
		ON A.CUST_ID = C.CUST_ID
		WHERE "EVENT_NAME" = 'Decrease in Land Valuation by 20%'
		GROUP BY A.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, DECREASE_LAND_VALUE_BY_20_PER)
		SELECT CUST_ID, a.DECREASE_LAND_VALUE_BY_20_PER
		FROM :TMP73 a;
		
		
		-- Decrease in Number of Parcels Owned by 10 or more
		TMP74 =
		SELECT A.CUST_ID, 1 AS "DECREASE_PARCELS_10_PLUS"
		FROM 
		        :EVENTS_TABLE A
		INNER JOIN
		        :CUSTOMERS_TABLE C
		ON A.CUST_ID = C.CUST_ID
		WHERE "EVENT_NAME" = 'Decrease in Number of Parcels Owned by 10 or more'
		GROUP BY A.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, DECREASE_PARCELS_10_PLUS)
		SELECT CUST_ID, a.DECREASE_PARCELS_10_PLUS
		FROM :TMP74 a;
		
		
		-- Decreased interest in land holdings
		TMP75 =
		SELECT A.CUST_ID, 1 AS "DECREASE_INTEREST_LAND_HOLDINGS"
		FROM 
		        :EVENTS_TABLE A
		INNER JOIN
		        :CUSTOMERS_TABLE C
		ON A.CUST_ID = C.CUST_ID
		WHERE "EVENT_NAME" = 'Decreased interest in land holdings'
		GROUP BY A.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, DECREASE_INTEREST_LAND_HOLDINGS)
		SELECT CUST_ID, a.DECREASE_INTEREST_LAND_HOLDINGS
		FROM :TMP75 a;
		
		
		-- Late payment ratio per assessment
		TMP76 = 
		SELECT A.CUST_ID, CASE
                WHEN (B."late"/A."assessment") > 0 THEN ROUND((B."late"/A."assessment"),1)
                WHEN (B."late"/A."assessment") IS NULL THEN 0 END AS "PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT"
        FROM ((SELECT CUST_ID, COUNT(*) AS "assessment"
                FROM  "db::app.CustomerEvents"
                WHERE EVENT_NAME LIKE 'Assessment Posted%'
                 AND INIT_DATE < :END_DATE
                GROUP BY CUST_ID) as A
        INNER JOIN 
                :CUSTOMERS_TABLE C
        ON A.CUST_ID = C.CUST_ID
        LEFT JOIN
                (SELECT CUST_ID, COUNT(*) AS "late" 
                        FROM( SELECT CUST_ID, YEAR(INIT_DATE), COUNT(*) 
                                FROM "db::app.CustomerEvents" 
                                WHERE (EVENT_NAME LIKE 'Occ%ate%' OR EVENT_NAME LIKE '%Late Payment%')
                                 AND INIT_DATE < :END_DATE
                                GROUP BY CUST_ID, YEAR(INIT_DATE))
                         GROUP BY CUST_ID) AS B
                         ON A.CUST_ID = B.CUST_ID);
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT)
		SELECT CUST_ID, a.PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT
		FROM :TMP76 a;


		-- PAST DEBTOR RATIO per assessment
		TMP77 = 
       SELECT A.CUST_ID, CASE
                WHEN (B."defaulted"/A."assessment") > 0 THEN ROUND((B."defaulted"/A."assessment"),1)
                WHEN (B."defaulted"/A."assessment") IS NULL THEN 0 END AS "PAST_DEBTOR_RATIO_PER_ASSESSMENT"
        FROM ((SELECT CUST_ID, COUNT(*) AS "assessment"
                FROM  "db::app.CustomerEvents"
                WHERE "EVENT_NAME" LIKE 'Assessment Posted%'
                 AND INIT_DATE < :END_DATE
                 --and INIT_DATE > ADD_MONTHS(:END_DATE, -36)
                GROUP BY CUST_ID) as A
                INNER JOIN 
                :CUSTOMERS_TABLE C
                ON A.CUST_ID = C.CUST_ID
                LEFT JOIN
                        (SELECT CUST_ID, COUNT(*) AS "defaulted" 
                        FROM "db::app.CustomerReactions"
                         WHERE INIT_DATE < :END_DATE
                         --and INIT_DATE > ADD_MONTHS(:END_DATE, -36)
                        GROUP BY CUST_ID) as B
                        ON A.CUST_ID = B.CUST_ID);

		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAST_DEBTOR_RATIO_PER_ASSESSMENT)
		SELECT CUST_ID, a.PAST_DEBTOR_RATIO_PER_ASSESSMENT
		FROM :TMP77 a;

		TMP78 =
		SELECT A."CUST_ID" "CUST_ID", 
	        CASE 
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $25,000 - $50,000' THEN 1
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $1,00,000 - $1M' THEN 2
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $1,00,000 - $1M' THEN 3
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $1,000 - $2,500' THEN 4
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $1,000 - $2,500' THEN 5
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $2,500 - $5,000' THEN 6
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount under $500' THEN 7
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $25,000 - $50,000' THEN 8
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $5,000 - $10,000' THEN 9
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $5,000 - $10,000' THEN 10
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $10,000 - $25,000' THEN 11
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount over $1M' THEN 12
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $50,000 - $100,000' THEN 13
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $2,500 - $5,000' THEN 14
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount over $1M' THEN 15
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $50,000 - $100,000' THEN 16
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount under $500' THEN 17
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $500 - $1,000' THEN 18
                WHEN EVENT_NAME = 'Assessment Posted - ORG - Tax Amount $10,000 - $25,000' THEN 19
                WHEN EVENT_NAME = 'Assessment Posted - IND - Tax Amount $500 - $1,000' THEN 20
	        END AS ASSESSMENT_IND_ORG_AMNT               
        FROM "db::app.CustomerEvents" A
        INNER JOIN
	        :CUSTOMERS_TABLE B
        ON A."CUST_ID" = B."CUST_ID"
        WHERE A.EVENT_NAME LIKE 'Assessment Posted%'
        and A.INIT_DATE < :END_DATE
        and A.INIT_DATE > ADD_MONTHS(:END_DATE, -3);

    INSERT INTO #FEATURES_TABLE (CUST_ID, ASSESSMENT_IND_ORG_AMNT)
	SELECT CUST_ID, a.ASSESSMENT_IND_ORG_AMNT
	FROM :TMP78 a;

				
/***********************************************************************************************
* STORING FEATURES INTO THE TRAIN/PREDICTION DATASET TABLE
************************************************************************************************/		
	
	--LT_FINAL_FEATURES = 
 	CREATE LOCAL TEMPORARY TABLE #LT_FINAL_FEATURES AS (
		SELECT 
			"CUST_ID",
			MAX("DATA_MONTH") AS "DATA_MONTH",
			COALESCE(SUM("TOTAL_EVENTS"),0) AS "TOTAL_EVENTS",
			COALESCE(SUM("TOTAL_EVENTS_30DAYS"),0) AS "TOTAL_EVENTS_30DAYS",
			COALESCE(SUM("TOTAL_EVENTS_90DAYS"),0) AS "TOTAL_EVENTS_90DAYS",
			COALESCE(SUM("TOTAL_EVENTS_180DAYS"),0) AS "TOTAL_EVENTS_180DAYS",
			COALESCE(SUM("TOTAL_EVENTS_360DAYS"),0) AS "TOTAL_EVENTS_360DAYS",
			COALESCE(SUM("TOTAL_EVENTS_HIGH_INFLUENCE"),0) AS "TOTAL_EVENTS_HIGH_INFLUENCE",
			COALESCE(SUM("TOTAL_EVENTS_MEDIUM_INFLUENCE"),0) AS "TOTAL_EVENTS_MEDIUM_INFLUENCE",
			COALESCE(SUM("TOTAL_EVENTS_LOW_INFLUENCE"),0) AS "TOTAL_EVENTS_LOW_INFLUENCE",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_30DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_30DAYS",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_90DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_90DAYS",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_180DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_180DAYS",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_360DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_360DAYS",
			COALESCE(SUM("TOTAL_EVENTS_HIGH_IMPACT"),0) AS "TOTAL_EVENTS_HIGH_IMPACT",
			COALESCE(SUM("TOTAL_EVENTS_MEDIUM_IMPACT"),0) AS "TOTAL_EVENTS_MEDIUM_IMPACT",
			COALESCE(SUM("TOTAL_EVENTS_LOW_IMPACT"),0) AS "TOTAL_EVENTS_LOW_IMPACT",
			COALESCE(SUM("TOTAL_PREDEFINED_EVENTS"),0) AS "TOTAL_PREDEFINED_EVENTS",
			COALESCE(SUM("PREDEFINED_EVENTS_30DAYS"),0) AS "PREDEFINED_EVENTS_30DAYS",
			COALESCE(SUM("PREDEFINED_EVENTS_90DAYS"),0) AS "PREDEFINED_EVENTS_90DAYS",
			COALESCE(SUM("PREDEFINED_EVENTS_180DAYS"),0) AS "PREDEFINED_EVENTS_180DAYS",
			COALESCE(SUM("PREDEFINED_EVENTS_360DAYS"),0) AS "PREDEFINED_EVENTS_360DAYS",
			COALESCE(SUM("AVG_MONTHLY_EVENTS"),0) AS "AVG_MONTHLY_EVENTS",
			COALESCE(SUM("TOTAL_MONTHS_WITH_COMPANY"),0) AS "TOTAL_MONTHS_WITH_COMPANY",
			------------ START OF SPECIFIC FEATURES -------------------
			COALESCE(SUM("PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW"),0) AS "PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW",
			COALESCE(SUM("OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW"),0) AS "OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW",
			COALESCE(SUM("OUT_FINAL_DEMAND_DUNNING_ALL_YEARS"),0) AS "OUT_FINAL_DEMAND_DUNNING_ALL_YEARS",
			COALESCE(SUM("PAYMENT_EXTENSION_ENQ"),0) AS "PAYMENT_EXTENSION_ENQ",
			COALESCE(SUM("OUT_GARNISHEE_NOTICE_WITHIN_WINDOW"),0) AS "OUT_GARNISHEE_NOTICE_WITHIN_WINDOW",
			COALESCE(SUM("OUT_GARNISHEE_NOTICE_ALL_YEARS"),0) AS "OUT_GARNISHEE_NOTICE_ALL_YEARS",
			COALESCE(SUM("LEGAL_LETTER_WITHIN_WINDOW"),0) AS "LEGAL_LETTER_WITHIN_WINDOW",
			COALESCE(SUM("LEGAL_LETTER_ALL_YEARS"),0) AS "LEGAL_LETTER_ALL_YEARS",
			COALESCE(SUM("PAYMENT_PLAN_WITHIN_WINDOW"),0) AS "PAYMENT_PLAN_WITHIN_WINDOW",
			COALESCE(SUM("PAYMENT_PLAN_ALL_YEARS"),0) AS "PAYMENT_PLAN_ALL_YEARS",
			COALESCE(SUM("MORTGAGEE_LETTER_WITHIN_WINDOW"),0) AS "MORTGAGEE_LETTER_WITHIN_WINDOW",
			COALESCE(SUM("MORTGAGEE_LETTER_ALL_YEARS"),0) AS "MORTGAGEE_LETTER_ALL_YEARS",
			COALESCE(SUM("DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW"),0) AS "DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW",
			COALESCE(SUM("DEBT_MANAGEMENT_EVENTS_ALL_YEARS"),0) AS "DEBT_MANAGEMENT_EVENTS_ALL_YEARS",
			COALESCE(SUM("PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS"),0) AS "PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS",
			COALESCE(SUM("TOTAL_COMBINED_EVENTS"),0) AS "TOTAL_COMBINED_EVENTS",
			COALESCE(SUM("MISSED_INSTALMENT_PAYMENT"),0) AS "MISSED_INSTALMENT_PAYMENT",
			COALESCE(SUM("RECIEVE_NEW_LAND_EVALUATION"),0) AS "RECIEVE_NEW_LAND_EVALUATION",
			COALESCE(SUM("INCREASE_LAND_VALUE_30_PER"),0) AS "INCREASE_LAND_VALUE_30_PER",
			COALESCE(SUM("INCRESE_TAX_50_PER_PLUS"),0) AS "INCRESE_TAX_50_PER_PLUS",
			COALESCE(SUM("INCREASE_LAND_VALUE_50_PER"),0) AS "INCREASE_LAND_VALUE_50_PER",
			COALESCE(SUM("PROMISED_PAYMENT_LATE"),0) AS "PROMISED_PAYMENT_LATE",
			COALESCE(SUM("BANKRUPT"),0) AS "BANKRUPT",
			COALESCE(SUM("INSTALMENT_OR_EPO_CREATED"),0) AS "INSTALMENT_OR_EPO_CREATED",		
			COALESCE(SUM("FIRST_TIME_TAXPAYER"),0) AS "FIRST_TIME_TAXPAYER",
			COALESCE(SUM("AB_DOC_CLEARED"),0) AS "AB_DOC_CLEARED",
			COALESCE(SUM("ASSESSMENT"),0) AS "ASSESSMENT",
			COALESCE(SUM("DEBTOR_LAST_6_MONTHS"),0) AS "DEBTOR_LAST_6_MONTHS",
			COALESCE(SUM("DEBTOR_IN_PAST"),0) AS "DEBTOR_IN_PAST",
			COALESCE(SUM("DECREASE_LAND_VALUE_BY_20_PER"),0) AS "DECREASE_LAND_VALUE_BY_20_PER",
			COALESCE(SUM("DECREASE_PARCELS_10_PLUS"),0) AS "DECREASE_PARCELS_10_PLUS",
			COALESCE(SUM("DECREASE_INTEREST_LAND_HOLDINGS"),0) AS "DECREASE_INTEREST_LAND_HOLDINGS",
			COALESCE(SUM("PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT"),0) AS "PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT",
			COALESCE(SUM("PAST_DEBTOR_RATIO_PER_ASSESSMENT"),0) AS "PAST_DEBTOR_RATIO_PER_ASSESSMENT",
			COALESCE(SUM("ASSESSMENT_IND_ORG_AMNT"),0) AS "ASSESSMENT_IND_ORG_AMNT",
            MAX("REACTED") AS "REACTED"
		FROM #FEATURES_TABLE
		GROUP BY "CUST_ID");
		
	IF :TRAIN_FLAG = 1 THEN -- FOR CREATING TRAINING DATASET
		
		-- REMOVING OLD DATA FROM THE BACKUP TRAIN TABLE
		DELETE FROM "db::ml.bkup.train_data"
		WHERE REACTION_TYPE = :REACTION_TYPE;
		
		-- INSERTING THE NEW GENERATED DATA TO THE BACKUP TRAIN TABLE
		INSERT INTO "db::ml.bkup.train_data" (
			SELECT *, :REACTION_TYPE, CURRENT_DATE FROM #LT_FINAL_FEATURES
		);

		-- INSERTING thE NEW GENERATED DATA TO THE TRAIN TABLE
		TRUNCATE TABLE "db::ml.train.data";
		INSERT INTO "db::ml.train.data"
			SELECT 
				"DATA_MONTH",
				 "TOTAL_EVENTS",
				 "TOTAL_EVENTS_30DAYS",
				 "TOTAL_EVENTS_90DAYS",
				 "TOTAL_EVENTS_180DAYS",
				 "TOTAL_EVENTS_360DAYS",
				 "TOTAL_EVENTS_HIGH_INFLUENCE",
				 "TOTAL_EVENTS_MEDIUM_INFLUENCE",
				 "TOTAL_EVENTS_LOW_INFLUENCE",
				 "HIGH_INFLUENCE_EVENTS_30DAYS",
				 "HIGH_INFLUENCE_EVENTS_90DAYS",
				 "HIGH_INFLUENCE_EVENTS_180DAYS",
				 "HIGH_INFLUENCE_EVENTS_360DAYS",
				 "TOTAL_EVENTS_HIGH_IMPACT",
				 "TOTAL_EVENTS_MEDIUM_IMPACT",
				 "TOTAL_EVENTS_LOW_IMPACT",
				 "TOTAL_PREDEFINED_EVENTS",
				 "PREDEFINED_EVENTS_30DAYS",
				 "PREDEFINED_EVENTS_90DAYS",
				 "PREDEFINED_EVENTS_180DAYS",
				 "PREDEFINED_EVENTS_360DAYS",
				 "AVG_MONTHLY_EVENTS",
				 "TOTAL_MONTHS_WITH_COMPANY",
				 "PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW",
				 "OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW",
				 "OUT_FINAL_DEMAND_DUNNING_ALL_YEARS",
				 "PAYMENT_EXTENSION_ENQ",
				 "OUT_GARNISHEE_NOTICE_WITHIN_WINDOW",
				 "OUT_GARNISHEE_NOTICE_ALL_YEARS",
				 "LEGAL_LETTER_WITHIN_WINDOW",
				 "LEGAL_LETTER_ALL_YEARS",
				 "PAYMENT_PLAN_WITHIN_WINDOW",
				 "PAYMENT_PLAN_ALL_YEARS",
				 "MORTGAGEE_LETTER_WITHIN_WINDOW",
				 "MORTGAGEE_LETTER_ALL_YEARS",
				 "DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW",
				 "DEBT_MANAGEMENT_EVENTS_ALL_YEARS",
				 "PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS",
				 "TOTAL_COMBINED_EVENTS",
				 "MISSED_INSTALMENT_PAYMENT",
				 "RECIEVE_NEW_LAND_EVALUATION", 
				 "INCREASE_LAND_VALUE_30_PER", 
				 "INCRESE_TAX_50_PER_PLUS", 
				 "INCREASE_LAND_VALUE_50_PER", 
				 "PROMISED_PAYMENT_LATE", 
				 "BANKRUPT", 
				 "INSTALMENT_OR_EPO_CREATED", 
				 "FIRST_TIME_TAXPAYER", 
				 "AB_DOC_CLEARED", 
				 "ASSESSMENT", 
				 "DEBTOR_LAST_6_MONTHS",
				 "DEBTOR_IN_PAST",
				 "DECREASE_LAND_VALUE_BY_20_PER",
				 "DECREASE_PARCELS_10_PLUS",
				 "DECREASE_INTEREST_LAND_HOLDINGS", 
				 "PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT",
				 "PAST_DEBTOR_RATIO_PER_ASSESSMENT",
				 "ASSESSMENT_IND_ORG_AMNT",
				 "REACTED"
			FROM #LT_FINAL_FEATURES;
				
	ELSE -- FOR CREATING PREDICTION DATASET
		TRUNCATE TABLE "db::ml.predict.data";
		INSERT INTO "db::ml.predict.data"
			SELECT
				"CUST_ID" AS "ID",
				"DATA_MONTH",
				"TOTAL_EVENTS",
				"TOTAL_EVENTS_30DAYS",
				"TOTAL_EVENTS_90DAYS",
				"TOTAL_EVENTS_180DAYS",
				"TOTAL_EVENTS_360DAYS",
				"TOTAL_EVENTS_HIGH_INFLUENCE",
				"TOTAL_EVENTS_MEDIUM_INFLUENCE",
				"TOTAL_EVENTS_LOW_INFLUENCE",
				"HIGH_INFLUENCE_EVENTS_30DAYS",
				"HIGH_INFLUENCE_EVENTS_90DAYS",
				"HIGH_INFLUENCE_EVENTS_180DAYS",
				"HIGH_INFLUENCE_EVENTS_360DAYS",
				"TOTAL_EVENTS_HIGH_IMPACT",
				"TOTAL_EVENTS_MEDIUM_IMPACT",
				"TOTAL_EVENTS_LOW_IMPACT",
				"TOTAL_PREDEFINED_EVENTS",
				"PREDEFINED_EVENTS_30DAYS",
				"PREDEFINED_EVENTS_90DAYS",
				"PREDEFINED_EVENTS_180DAYS",
				"PREDEFINED_EVENTS_360DAYS",
				"AVG_MONTHLY_EVENTS",
				"TOTAL_MONTHS_WITH_COMPANY",
				"PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW",
				"OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW",
				"OUT_FINAL_DEMAND_DUNNING_ALL_YEARS",
				"PAYMENT_EXTENSION_ENQ",
				"OUT_GARNISHEE_NOTICE_WITHIN_WINDOW",
				"OUT_GARNISHEE_NOTICE_ALL_YEARS",
				"LEGAL_LETTER_WITHIN_WINDOW",
				"LEGAL_LETTER_ALL_YEARS",
				"PAYMENT_PLAN_WITHIN_WINDOW",
				"PAYMENT_PLAN_ALL_YEARS",
				"MORTGAGEE_LETTER_WITHIN_WINDOW",
				"MORTGAGEE_LETTER_ALL_YEARS",
				"DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW",
				"DEBT_MANAGEMENT_EVENTS_ALL_YEARS",
				"PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS",
				"TOTAL_COMBINED_EVENTS",
				"MISSED_INSTALMENT_PAYMENT",
				 "RECIEVE_NEW_LAND_EVALUATION", 
				 "INCREASE_LAND_VALUE_30_PER", 
				 "INCRESE_TAX_50_PER_PLUS", 
				 "INCREASE_LAND_VALUE_50_PER", 
				 "PROMISED_PAYMENT_LATE", 
				 "BANKRUPT", 
				 "INSTALMENT_OR_EPO_CREATED", 
				 "FIRST_TIME_TAXPAYER", 
				 "AB_DOC_CLEARED", 
				 "ASSESSMENT" ,
				 "DEBTOR_LAST_6_MONTHS",
				 "DEBTOR_IN_PAST",
				 "DECREASE_LAND_VALUE_BY_20_PER",
				 "DECREASE_PARCELS_10_PLUS",
				 "DECREASE_INTEREST_LAND_HOLDINGS", 
				 "PAST_LATE_PAYMENT_RATIO_PER_ASSESSMENT",
				 "PAST_DEBTOR_RATIO_PER_ASSESSMENT",
				 "ASSESSMENT_IND_ORG_AMNT"
			FROM #LT_FINAL_FEATURES;
		
		-- REMOVING OLD DATA FROM THE BACKUP TRAIN TABLE
		DELETE FROM "db::ml.bkup.predict_data"
		WHERE REACTION_TYPE = :REACTION_TYPE;
		
		-- INSERTING THE NEW GENERATED DATA TO THE BACKUP PREDICTION TABLE
		INSERT INTO "db::ml.bkup.predict_data" (
			SELECT *, 0, :REACTION_TYPE, CURRENT_DATE FROM "db::ml.predict.data");
	END IF;
	
	DROP TABLE #LT_FINAL_FEATURES;
	DROP TABLE #FEATURES_TABLE;
END