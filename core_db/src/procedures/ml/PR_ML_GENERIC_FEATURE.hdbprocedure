PROCEDURE "procedures.ml::PR_ML_GENERIC_FEATURE" 
(
		IN TRAIN_FLAG INT,
		IN REACTION_TYPE VARCHAR(100),
		IN END_DATE DATE,
		IN CUSTOMERS_TABLE "db::ml.type.customer_list",
		IN EVENTS_TABLE "db::app.CustomerEvents"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
 DECLARE END_TS NVARCHAR(6);
	DECLARE INACTIVE_ID INT;
	/***************************************************************
	*	THE UPPER AND LOWER LIMITS OF EACH OF THE BUCKETS
	*	REQUIRED SINCE THE BUCKETS DO NOT NECESSARILY OVERLAP
	****************************************************************/
	DECLARE HIGH_IMPACT_UPPER INT;
	DECLARE HIGH_IMPACT_LOWER INT;
	DECLARE MED_IMPACT_UPPER INT;
	DECLARE MED_IMPACT_LOWER INT;
	DECLARE LOW_IMPACT_UPPER INT;
	DECLARE LOW_IMPACT_LOWER INT;
	
	DECLARE HIGH_INFLUENCE_UPPER INT;
	DECLARE HIGH_INFLUENCE_LOWER INT;
	DECLARE MED_INFLUENCE_UPPER INT;
	DECLARE MED_INFLUENCE_LOWER INT;
	DECLARE LOW_INFLUENCE_UPPER INT;
	DECLARE LOW_INFLUENCE_LOWER INT;
	
 SELECT TOP 1 TO_VARCHAR(YEAR(:END_DATE) * 100 + MONTH(:END_DATE)) INTO END_TS FROM "synonyms::dummy";
	
	-- GET THE FROM AND TO VALUES FOR EACH OF THE BUCKETS
	LT_BUCKETS = SELECT BUCKET_ID, SEQ, FROM_VALUE, TO_VALUE
	--FROM "_SYS_BIC"."sap.cri.model.adm/CV_CONFIG" TBC
	FROM "models.adm::CV_CONFIG"
	WHERE REACTION_TYPE = :REACTION_TYPE
	AND BUCKET_ID IN ('IMPACT', 'INFLUENCE');
	
		-- STORE THE VALUES RETURNED ABOVE INTO THE VARIABLES
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO HIGH_IMPACT_LOWER, HIGH_IMPACT_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'IMPACT'
	AND "SEQ" = 3;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO MED_IMPACT_LOWER, MED_IMPACT_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'IMPACT'
	AND "SEQ" = 2;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO LOW_IMPACT_LOWER, LOW_IMPACT_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'IMPACT'
	AND "SEQ" = 1;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO HIGH_INFLUENCE_LOWER, HIGH_INFLUENCE_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'INFLUENCE'
	AND "SEQ" = 3;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO MED_INFLUENCE_LOWER, MED_INFLUENCE_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'INFLUENCE'
	AND "SEQ" = 2;
	
	SELECT "FROM_VALUE", "TO_VALUE"
	INTO LOW_INFLUENCE_LOWER, LOW_INFLUENCE_UPPER
	FROM :LT_BUCKETS
	WHERE "BUCKET_ID" = 'INFLUENCE'
	AND "SEQ" = 1;
	
		-- CREATE TABLE TO TEMPORARY STORE THE CREATED FEATURES
	CREATE LOCAL TEMPORARY TABLE #FEATURES_TABLE (
		"CUST_ID" INT,
		"DATA_MONTH" INT,
		"TOTAL_EVENTS" INT,
		"TOTAL_EVENTS_30DAYS" INT,
		"TOTAL_EVENTS_90DAYS" INT,
		"TOTAL_EVENTS_180DAYS" INT,
		"TOTAL_EVENTS_360DAYS" INT,
		"TOTAL_EVENTS_HIGH_INFLUENCE" INT,
		"TOTAL_EVENTS_MEDIUM_INFLUENCE" INT,
		"TOTAL_EVENTS_LOW_INFLUENCE" INT,
		"HIGH_INFLUENCE_EVENTS_30DAYS" INT,
		"HIGH_INFLUENCE_EVENTS_90DAYS" INT,
		"HIGH_INFLUENCE_EVENTS_180DAYS" INT,
		"HIGH_INFLUENCE_EVENTS_360DAYS" INT,
		"TOTAL_EVENTS_HIGH_IMPACT" INT,
		"TOTAL_EVENTS_MEDIUM_IMPACT" INT,
		"TOTAL_EVENTS_LOW_IMPACT" INT,
		"EVENTS_REACT_30DAYS" INT,
		"EVENTS_REACT_60DAYS" INT,
		"EVENTS_REACT_90DAYS" INT,
		"EVENTS_REACT_120DAYS" INT,
		"TOTAL_PREDEFINED_EVENTS" INT,
		"PREDEFINED_EVENTS_30DAYS" INT,
		"PREDEFINED_EVENTS_90DAYS" INT,
		"PREDEFINED_EVENTS_180DAYS" INT,
		"PREDEFINED_EVENTS_360DAYS" INT,
		"AVG_MONTHLY_EVENTS" INT,
		"TOTAL_MONTHS_WITH_COMPANY" INT,
		"INACTIVE_EVENTS" INT,
		"INACTIVE_EVENTS_30DAYS" INT,
		"INACTIVE_EVENTS_90DAYS" INT,
		"INACTIVE_EVENTS_180DAYS" INT,
		"NEGATIVE_SURVEY" INT,
		"NEGATIVE_SURVEY_30DAYS" INT,
		"NEGATIVE_SURVEY_90DAYS" INT,
		"NEGATIVE_SURVEY_180DAYS" INT,
		"TOTAL_QUERY_COMPLAINTS" INT,
		"TOTAL_QUERY_COMPLAINTS_30DAYS" INT,
		"TOTAL_QUERY_COMPLAINTS_90DAYS" INT,
		"TOTAL_QUERY_COMPLAINTS_180DAYS" INT,
	---------------- START OF SPECIFIC FEATURES ---------------------
		"PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW" INT,
		"OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW" INT,
		"OUT_FINAL_DEMAND_DUNNING_ALL_YEARS" INT,
		"PAYMENT_EXTENSION_ENQ" INT,
		"OUT_GARNISHEE_NOTICE_WITHIN_WINDOW" INT,
		"OUT_GARNISHEE_NOTICE_ALL_YEARS" INT,
		"LEGAL_LETTER_WITHIN_WINDOW" INT,
		"LEGAL_LETTER_ALL_YEARS" INT,
		"PAYMENT_PLAN_WITHIN_WINDOW" INT,
		"PAYMENT_PLAN_ALL_YEARS" INT,
		"MORTGAGEE_LETTER_WITHIN_WINDOW" INT,
		"MORTGAGEE_LETTER_ALL_YEARS" INT,
		"DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW" INT,
		"DEBT_MANAGEMENT_EVENTS_ALL_YEARS" INT,
		"PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS" INT,
		"REACTED" INT
	);
	
	INSERT INTO #FEATURES_TABLE (
		SELECT CUST_ID, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, REACTED
		FROM :CUSTOMERS_TABLE
	);
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, REACTED)
	SELECT 
		CUST_ID, 
		REACTED
	FROM :CUSTOMERS_TABLE;
	
	
	/***************************************************************
	*	FEATURES EXTRACTION CODE FOR GENERIC FEATURES 
	****************************************************************/
	-- 0. DATA MONTH
	TMP0 = 
	SELECT "CUST_ID" "CUST_ID", MONTH(:END_DATE) AS DATA_MONTH
	--FROM :EVENTS_TABLE : aj
	FROM :CUSTOMERS_TABLE
	GROUP BY "CUST_ID";
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, DATA_MONTH)
	SELECT CUST_ID, DATA_MONTH
	FROM :TMP0 a;
	
	-- 1. TOTAL # EVENT
	TMP1 =
	SELECT "CUST_ID" "CUST_ID", COUNT(*) AS TOTAL_EVENTS
	FROM :EVENTS_TABLE
	GROUP BY "CUST_ID";
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS)
	SELECT CUST_ID, TOTAL_EVENTS
	FROM :TMP1 a;
	
	CUST_EVENTS =
		SELECT
			A."CUST_ID" "CUST_ID",
			A.INIT_DATE,
			A."EVENT_ID.ID" "EVENT_ID",
			:END_DATE AS FINAL_DATE
		FROM
			:EVENTS_TABLE A
		JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID;


	-- 2. TOTAL # EVENT PAST 1 MON
	TMP2 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_30DAYS
	FROM
		:CUST_EVENTS	
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -30)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_30DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_30DAYS
	FROM :TMP2 a;
	
	
	-- 3. TOTAL # EVENT PAST 3 MON
	TMP3 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_90DAYS
	FROM
		:CUST_EVENTS
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -90)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_90DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_90DAYS
	FROM :TMP3 a;
	
	
	-- 4. TOTAL # EVENT PAST 6 MON
	TMP4 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_180DAYS
	FROM
		:CUST_EVENTS
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -180)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_180DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_180DAYS
	FROM :TMP4 a;
	
	
	-- 5. TOTAL # EVENTS PAST 1 YEAR
	TMP5 =
	SELECT
		CUST_ID,
		COUNT(*) AS TOTAL_EVENTS_360DAYS
	FROM
		:CUST_EVENTS
	WHERE
		INIT_DATE >= ADD_DAYS(FINAL_DATE, -360)
	AND
		INIT_DATE < FINAL_DATE
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_360DAYS)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_360DAYS
	FROM :TMP5 a;
	
	/*  INFLUENCE BASED FEATURES */
	
	/*
	*	REUSABLE QUERY TO GET ALL RELEVANT FIELDS FROM THE EVENT_INFLUENCE
	*	TABLE FUNCTION
	*/
 	EVENT_INFLUENCE = 
		SELECT B."CUST_ID" "CUST_ID", B.INIT_DATE, A.EVENT_IMPACT, A.INFLUENCE, A.EVENT_ID
		FROM "functions::TF_EVENT_INFLUENCE"(:END_TS, :REACTION_TYPE) A
		JOIN :EVENTS_TABLE B
		ON A.EVENT_ID = B."EVENT_ID.ID";
	
	
	-- 6. TOTAL # EVENTS HIGH INF
	-- aj - free 1
	-- feature : Missed instalment payment
	TMP6 =
	SELECT "CUST_ID" "CUST_ID", 1 AS "TOTAL_EVENTS_HIGH_INFLUENCE"               
	FROM :EVENTS_TABLE
	WHERE EVENT_NAME = 'Missed instalment payment'
	GROUP BY "CUST_ID";

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_HIGH_INFLUENCE)
	SELECT CUST_ID, a.TOTAL_EVENTS_HIGH_INFLUENCE
	FROM :TMP6 a;
	
	
	-- 7. TOTAL # EVENTS MED INF
	
	TMP7 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_MEDIUM_INFLUENCE
	FROM :EVENT_INFLUENCE
	WHERE INFLUENCE >= :MED_INFLUENCE_LOWER
	AND INFLUENCE < :MED_INFLUENCE_UPPER
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_MEDIUM_INFLUENCE)
	SELECT a.CUST_ID, a.TOTAL_EVENTS_MEDIUM_INFLUENCE
	FROM :TMP7 a;


	-- 8. TOTAL # EVENTS LOW INF
	TMP8 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_LOW_INFLUENCE
	FROM :EVENT_INFLUENCE
	WHERE INFLUENCE >= :LOW_INFLUENCE_LOWER
	AND INFLUENCE < :LOW_INFLUENCE_UPPER
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_LOW_INFLUENCE)
	SELECT CUST_ID, a.TOTAL_EVENTS_LOW_INFLUENCE
	FROM :TMP8 a;
	
	
	/*
	*	REUSABLE QUERY TO GET EVERY EVENT THE CUSTOMER EXPERIENCED
	*/
 	CUST_REACT =
	SELECT
		CUST_ID,
		:END_DATE AS FINAL_DATE
	FROM :CUSTOMERS_TABLE;
	
	
	-- 9. TOTAL # EVENTS HIGH INF PAST MONTH
	-- aj free 2
	-- feature : 1-3 times missing instalment payment
	TMP9 =
	SELECT "CUST_ID" "CUST_ID", 1 AS "HIGH_INFLUENCE_EVENTS_30DAYS"               
	FROM :EVENTS_TABLE
	WHERE EVENT_NAME = '1-3 times missing instalment payment'
	GROUP BY "CUST_ID";

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_30DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_30DAYS
	FROM :TMP9 a;
	
	-- 10. TOTAL # EVENTS HIGH INF PAST 3 MONTH
	-- aj free 3
	-- feature : 12 times missing instalment payment
	TMP10 =
	SELECT "CUST_ID" "CUST_ID", 1 AS "HIGH_INFLUENCE_EVENTS_90DAYS"               
	FROM :EVENTS_TABLE
	WHERE EVENT_NAME = '>12 times missing instalment payment'
	GROUP BY "CUST_ID";

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_90DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_90DAYS
	FROM :TMP10 a;
	
	-- 11. TOTAL # EVENTS HIGH INF PAST 6 MONTH
	-- aj free 4
	-- feature : >3 times missing instalment payment
	TMP11 =
	SELECT "CUST_ID" "CUST_ID", 1 AS "HIGH_INFLUENCE_EVENTS_180DAYS"               
	FROM :EVENTS_TABLE
	WHERE EVENT_NAME = '>3 times missing instalment payment'
	GROUP BY "CUST_ID";

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_180DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_180DAYS
	FROM :TMP11 a;
	
	-- 12. TOTAL # EVENTS HIGH INF PAST 1 YEAR
	-- aj free 5
	TMP12 =
	SELECT "CUST_ID" "CUST_ID", 1 AS "HIGH_INFLUENCE_EVENTS_360DAYS"               
	FROM :EVENTS_TABLE
	WHERE EVENT_NAME = '>6 times missing instalment payment'
	GROUP BY "CUST_ID";

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, HIGH_INFLUENCE_EVENTS_360DAYS)
	SELECT CUST_ID, a.HIGH_INFLUENCE_EVENTS_360DAYS
	FROM :TMP12 a;
	
	
	/* IMPACT BASED FEATURES */
	
	/*
	*	REUSABLE QUERY TO GET ALL RELEVANT FIELDS FROM THE EVENT_IMPACT
	*	TABLE FUNCTION
	*/
 	EVENT_IMPACT = 
		SELECT A.EVENT_ID, A.EVENT_IMPACT, B."CUST_ID" "CUST_ID"
		FROM "functions::TF_EVENT_IMPACT"(:END_TS, :REACTION_TYPE) A
		JOIN :EVENTS_TABLE B
		ON A.EVENT_ID = B."EVENT_ID.ID";

		
	-- 13. TOTAL # EVENTS HIGH IMPACT
	-- aj free 6
	-- feature : Installment plan or EPO created
	TMP13 =	
	SELECT
	"CUST_ID" "CUST_ID", 1 AS "TOTAL_EVENTS_HIGH_IMPACT"
	FROM   :EVENTS_TABLE
	WHERE EVENT_NAME = 'Installment plan or EPO created'
	GROUP BY "CUST_ID";

	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_HIGH_IMPACT)
	SELECT CUST_ID, a.TOTAL_EVENTS_HIGH_IMPACT
	FROM :TMP13 a;
	
	-- 14. TOTAL # EVENTS MED IMPACT
	TMP14 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_MEDIUM_IMPACT
	FROM :EVENT_IMPACT
	WHERE EVENT_IMPACT < :MED_IMPACT_UPPER
	AND EVENT_IMPACT >= :MED_IMPACT_LOWER
	GROUP BY CUST_ID;
	
	UPDATE #FEATURES_TABLE b
	SET b.TOTAL_EVENTS_MEDIUM_IMPACT = a.TOTAL_EVENTS_MEDIUM_IMPACT
	FROM :TMP14 a, #FEATURES_TABLE b
	WHERE a.CUST_ID = b.CUST_ID;
	
	-- 15. TOTAL # EVENTS LOW IMPACT	
	TMP15 =
	SELECT CUST_ID, COUNT(*) AS TOTAL_EVENTS_LOW_IMPACT
	FROM :EVENT_IMPACT
	WHERE EVENT_IMPACT < :LOW_IMPACT_UPPER
	AND EVENT_IMPACT >= :LOW_IMPACT_LOWER
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_EVENTS_LOW_IMPACT)
	SELECT CUST_ID, a.TOTAL_EVENTS_LOW_IMPACT
	FROM :TMP15 a;
	
	/* DAYS TO REACT EVENT BASED FEATURES */	
	
	/*
	*	REUSABLE QUERY TO GET ALL OF THE RELEVANT FIELDS FROM
	*	THE DAYS TO REACT TABLE FUNCTION
	*/
 	EVENT_DTR =
	SELECT B."CUST_ID" "CUST_ID", A.DAYS_TO_REACT
	FROM "functions::TF_EVENT_DAYS_TO_REACT"(:END_TS,:REACTION_TYPE) A
	INNER JOIN :EVENTS_TABLE B
	ON A.EVENT_ID = B."EVENT_ID.ID";
	
	-- 16. TOTAL # EVENTS WITH 30 DAYS TO REACT
	-- aj free 7
	-- feature : >9 times missing instalment payment
	TMP16 =
	SELECT "CUST_ID" "CUST_ID", 1 AS "NUMBER_EVENT"               
	FROM :EVENTS_TABLE
	WHERE EVENT_NAME = '>9 times missing instalment payment'
	GROUP BY "CUST_ID";

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, EVENTS_REACT_30DAYS)
	SELECT CUST_ID, a.NUMBER_EVENT
	FROM :TMP16 a;
	
	-- 17. TOTAL # EVENTS WITH 60 DAYS TO REACT
	TMP17 =
	SELECT CUST_ID, COUNT(*) NUMBER_EVENT
	FROM :EVENT_DTR
	WHERE DAYS_TO_REACT > 30 AND DAYS_TO_REACT <= 60
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, EVENTS_REACT_60DAYS)
	SELECT CUST_ID, a.NUMBER_EVENT
	FROM :TMP17 a;
	
	-- 18. TOTAL # EVENTS WITH 90 DAYS TO REACT
	TMP18 =
	SELECT CUST_ID, COUNT(*) NUMBER_EVENT
	FROM :EVENT_DTR
	WHERE DAYS_TO_REACT > 61 AND DAYS_TO_REACT <= 90
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, EVENTS_REACT_90DAYS)
	SELECT CUST_ID, a.NUMBER_EVENT
	FROM :TMP18 a;
		
	-- 19. TOTAL # EVENTS WITH 120 DAYS TO REACT
	TMP19 =
	SELECT CUST_ID, COUNT(*) NUMBER_EVENT
	FROM :EVENT_DTR
	WHERE DAYS_TO_REACT > 91 AND DAYS_TO_REACT <= 120
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, EVENTS_REACT_120DAYS)
	SELECT CUST_ID, a.NUMBER_EVENT
	FROM :TMP19 a;


	/* PREDEFINED EVENT BASED FEATURES */

 	ALL_PREDEFINED_EVENTS_ID = SELECT DISTINCT "ID" FROM "db::adm.config.event.name" WHERE "TYPE"=1;

	IF IS_EMPTY(:ALL_PREDEFINED_EVENTS_ID) THEN
		--This statement executes if there are no predefined event IDs in the table	
		
		-- 20. Total number of predefined events the customers have
		INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_PREDEFINED_EVENTS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;	
		
		-- 21. # of Predefined events in the past 30 days	    
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_30DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		      
		-- 22. # of Predefined events in the past 90 days
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_90DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		            
		-- 23. # of Predefined events in the past 180 days  
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_180DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		 
		-- 24. # of Predefined events in the past 360 days
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_360DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;

	ELSE  
		--Otherwise if there is predefined event IDs
	
   /*
	*	REUSABLE QUERY TO EXTRACT THE EVENT BEGIN DATE AND CUSTOMER END DATE 
	*	FOR EVERY PREDEFINED EVENT AND CUSTOMER COMBINATION
	*/
	
 		EVENT_PREDEFINED =
			SELECT
				a."CUST_ID" "CUST_ID",
				a.INIT_DATE,
				:END_DATE AS DATE_TO_USE
			FROM 
				:EVENTS_TABLE a,
				:CUSTOMERS_TABLE b
			WHERE a."CUST_ID" = b.CUST_ID
			AND a."EVENT_ID.ID" IN (SELECT "ID" FROM :ALL_PREDEFINED_EVENTS_ID);
      
      --This executes when there are predefined events in the table
		
		-- 20. Total number of predefined events the customers have
		TMP20 = 
		SELECT "CUST_ID" "CUST_ID", COUNT(*) AS TOTAL_PREDEFINED_EVENTS
	    FROM :EVENTS_TABLE
	    WHERE "EVENT_ID.ID" IN (SELECT "ID" FROM :ALL_PREDEFINED_EVENTS_ID)
	    GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_PREDEFINED_EVENTS)
		SELECT CUST_ID, a.TOTAL_PREDEFINED_EVENTS
		FROM :TMP20 a;
	
	    -- 21. # of Predefined events in the past 30 days
		TMP21 =
		SELECT CUST_ID, COUNT(*) AS PREDEFINED_EVENTS_30DAYS 
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -30) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	    
	    INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_30DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_30DAYS
	    FROM :TMP21 a;
	
		-- 22. # of Predefined events in the past 90 days
		TMP22 =
		SELECT CUST_ID, COUNT(*) AS PREDEFINED_EVENTS_90DAYS
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -90) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	      
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_90DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_90DAYS
		FROM :TMP22 a;
	      
		-- 23. # of Predefined events in the past 180 days
		TMP23 =
		SELECT CUST_ID, COUNT(*) PREDEFINED_EVENTS_180DAYS
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -180) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	      
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_180DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_180DAYS
		FROM :TMP23 a;
	
		-- 24. # of Predefined events in the past 360 days
		TMP24 =
		SELECT CUST_ID, COUNT(*) AS PREDEFINED_EVENTS_360DAYS
		FROM :EVENT_PREDEFINED
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -360) AND DATE_TO_USE 
		GROUP BY CUST_ID;
	            
		INSERT INTO #FEATURES_TABLE (CUST_ID, PREDEFINED_EVENTS_360DAYS)
		SELECT CUST_ID, a.PREDEFINED_EVENTS_360DAYS
		FROM :TMP24 a;
		
	END IF;

	-- 25. Average # of events in a month
	TMP25 =
		SELECT CUST_ID, TO_INT(SUM(EVENTS_COUNT)/COUNT(EVENTS_COUNT)) AS "AVG_EVENTS_PER_MONTH"
		FROM (
			SELECT "CUST_ID" "CUST_ID", INIT_TS, COUNT(*) AS EVENTS_COUNT
	        FROM :EVENTS_TABLE
	        GROUP BY "CUST_ID", INIT_TS
	        ORDER BY "CUST_ID", INIT_TS
		)
		GROUP BY CUST_ID;
	      
	INSERT INTO #FEATURES_TABLE (CUST_ID, AVG_MONTHLY_EVENTS)
	SELECT CUST_ID, a.AVG_EVENTS_PER_MONTH
	FROM :TMP25 a;

	-- 26. The time period the customer has been with the company
	TMP26 =
	SELECT
		a.CUST_ID,
		b.INIT_DATE,
		b.INIT_TS,
		TO_INT(DAYS_BETWEEN(TO_DATE(b.INIT_DATE),
			:END_DATE) / 30) "MONTHS_BETWEEN" 
	FROM 
		:CUSTOMERS_TABLE a,
		"models.apps.customer::CV_ACTIVE_CUSTOMER" b
	WHERE a.CUST_ID = b.CUST_ID;
            
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_MONTHS_WITH_COMPANY)
	SELECT CUST_ID, a.MONTHS_BETWEEN
	FROM :TMP26 a;

	
	/* INACTIVITY (NO EVENTS) BASED FEATURES */
	
	--Gets inactive ID
 	TEMP_ID = SELECT "ID" FROM (
		SELECT "ID" FROM  "db::adm.config.event.name"  
			WHERE TEMPLATE_ID = (SELECT "ID" as EVENT_ID FROM "db::adm.config.event.name" WHERE LOWER(EVENT_NAME) LIKE '%no activity%' AND "TYPE" = 0)
	);
		 
	IF IS_EMPTY(:TEMP_ID) THEN
		 		--If there are no inactive ID
		 INACTIVE_ID := 0;
	ELSE 
		 		--If there is an inactive ID
		 SELECT TOP 1 "ID" INTO INACTIVE_ID FROM :TEMP_ID;
	END IF;
	 

	IF :INACTIVE_ID <> 0 THEN
		-- 27. The total number of 'Inactive' events
		-- aj free 8
		TMP27 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS INACTIVE_EVENTS
		FROM
			:EVENTS_TABLE
		WHERE "EVENT_ID.ID" = :INACTIVE_ID --LOWER(EVENT_NAME) LIKE 'No activity in the last % months'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS)
		SELECT CUST_ID, a.INACTIVE_EVENTS
		FROM :TMP27 a;
		
		INACTIVE_EVENTS = 
			SELECT
				a."CUST_ID" "CUST_ID", 
				a.INIT_DATE,
				:END_DATE AS DATE_TO_USE
			FROM
				:EVENTS_TABLE a,
				:CUSTOMERS_TABLE b
			WHERE a."CUST_ID" = b.CUST_ID AND a."EVENT_ID.ID" = :INACTIVE_ID;
	
		-- 28. The total number of 'Inactive' events in the past 30 days
		-- aj free 9
		TMP28 =
		SELECT
			CUST_ID, COUNT(*) AS INACTIVE_EVENTS_30DAYS
		FROM :INACTIVE_EVENTS
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -30) AND DATE_TO_USE 
		GROUP BY CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS_30DAYS)
		SELECT CUST_ID, a.INACTIVE_EVENTS_30DAYS
		FROM :TMP28 a;
		
		-- 29. The total number of 'Inactive' events in the past 90 days
		-- aj free 10
		TMP29 =
		SELECT
			CUST_ID, COUNT(*) AS INACTIVE_EVENTS_90DAYS
		FROM :INACTIVE_EVENTS
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -90) AND DATE_TO_USE 
		GROUP BY CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS_90DAYS)
		SELECT CUST_ID, a.INACTIVE_EVENTS_90DAYS
		FROM :TMP29 a;
		
		-- 30. The total number of 'Inactive' events in the past 180 days
		-- aj free 11
		TMP30 =
		SELECT
			CUST_ID, COUNT(*) AS INACTIVE_EVENTS_180DAYS
		FROM  :INACTIVE_EVENTS
		WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -180) AND DATE_TO_USE 
		GROUP BY CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS_180DAYS)
		SELECT CUST_ID, a.INACTIVE_EVENTS_180DAYS
		FROM :TMP30 a;
	
	ELSE 
		--27
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
	
		-- 28. The total number of 'Inactive' events in the past 30 days
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS_30DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		
		-- 29. The total number of 'Inactive' events in the past 90 days
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS_90DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;
		
		-- 30. The total number of 'Inactive' events in the past 180 days
		INSERT INTO #FEATURES_TABLE (CUST_ID, INACTIVE_EVENTS_180DAYS)
		SELECT CUST_ID, 0
		FROM :CUSTOMERS_TABLE;

	END IF;


	/* NEGATIVE SURVEY BASED FEATURES */

	-- 31. The number of 'Negative Survey' events
	-- aj free 12
 	TMP31 =
	SELECT
		"CUST_ID" "CUST_ID", COUNT(*) AS NEGATIVE_SURVEY
	FROM
		:EVENTS_TABLE
	WHERE LOWER(EVENT_NAME) LIKE '%negative survey%'
	GROUP BY "CUST_ID";
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, NEGATIVE_SURVEY)
	SELECT CUST_ID, a.NEGATIVE_SURVEY
	FROM :TMP31 a;

	NEGATIVE_SURVEY_EVENTS = 
		SELECT
				a."CUST_ID" "CUST_ID", 
				a.INIT_DATE,
				:END_DATE AS DATE_TO_USE
			FROM
				:EVENTS_TABLE a,
				:CUSTOMERS_TABLE b
			WHERE a."CUST_ID" = b.CUST_ID AND LOWER(a.EVENT_NAME) LIKE '%negative survey%'; 
			
	-- 32. The number of 'Negative Survey' events in the past 30 days
	-- aj free 13
	TMP32 =
	SELECT
		CUST_ID, COUNT(*) AS NEGATIVE_SURVEY_30DAYS 
	FROM :NEGATIVE_SURVEY_EVENTS
	WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -30) AND DATE_TO_USE 
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, NEGATIVE_SURVEY_30DAYS)
	SELECT CUST_ID, a.NEGATIVE_SURVEY_30DAYS
	FROM :TMP32 a;
	
	
	-- 33. The number of 'Negative Survey' events in the past 90 days
	-- aj free 14
	TMP33 =
	SELECT
		CUST_ID, COUNT(*) AS NEGATIVE_SURVEY_90DAYS 
	FROM :NEGATIVE_SURVEY_EVENTS
	WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -90) AND DATE_TO_USE 
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, NEGATIVE_SURVEY_90DAYS)
	SELECT CUST_ID, a.NEGATIVE_SURVEY_90DAYS
	FROM :TMP33 a;
	
	
	-- 34. The number of 'Negative Survey' events in the past 180 days
	-- aj free 15
	TMP34 =
	SELECT
		CUST_ID, COUNT(*) AS NEGATIVE_SURVEY_180DAYS 
	FROM :NEGATIVE_SURVEY_EVENTS
	WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -180) AND DATE_TO_USE 
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, NEGATIVE_SURVEY_180DAYS)
	SELECT CUST_ID, a.NEGATIVE_SURVEY_180DAYS
	FROM :TMP34 a;	
--------- END OF NEGATIVE SURVEY EVENTS
	
	/* QUERY COMPLAINTS BASED FEATURES */
	
 	QUERY_COMPLAINT_EVENTS = 
		SELECT
			a."CUST_ID" "CUST_ID", 
			a.INIT_DATE,
			:END_DATE AS DATE_TO_USE
		FROM
			:EVENTS_TABLE a,
			:CUSTOMERS_TABLE b
		WHERE a."CUST_ID" = b.CUST_ID AND LOWER(a.EVENT_GROUP) LIKE 'queries & complaints';
	
	-- 35. The total number of Query & Complaints Events
	-- aj free 16
	TMP35 =
	SELECT
		CUST_ID, COUNT(*) AS TOTAL_QUERY_COMPLAINTS
	FROM :QUERY_COMPLAINT_EVENTS
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_QUERY_COMPLAINTS)
	SELECT CUST_ID, a.TOTAL_QUERY_COMPLAINTS
	FROM :TMP35 a;
	
	-- 36. The total number of Query & Complaints Events in the past 30 days
	-- aj free 17
	TMP36 =
	SELECT
		CUST_ID, COUNT(*) AS TOTAL_QUERY_COMPLAINTS_30DAYS
	FROM :QUERY_COMPLAINT_EVENTS
	WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -30) AND DATE_TO_USE 
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_QUERY_COMPLAINTS_30DAYS)
	SELECT CUST_ID, a.TOTAL_QUERY_COMPLAINTS_30DAYS
	FROM :TMP36 a;
	
	-- 37. The total number of Query & Complaints Events in the past 90 days
	-- aj free 18
	TMP37 =
	SELECT
		CUST_ID, COUNT(*) AS TOTAL_QUERY_COMPLAINTS_90DAYS
	FROM :QUERY_COMPLAINT_EVENTS
	WHERE INIT_DATE BETWEEN ADD_DAYS(DATE_TO_USE, -90) AND DATE_TO_USE 
	GROUP BY CUST_ID;
	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_QUERY_COMPLAINTS_90DAYS)
	SELECT CUST_ID, a.TOTAL_QUERY_COMPLAINTS_90DAYS
	FROM :TMP37 a;
	
	-- 38. The total number of Query & Complaints Events in the past 180 days
	-- aj free 19
	-- feature : Receive new land evaluation
	TMP38 =
	SELECT
	"CUST_ID" "CUST_ID", 1 AS "TOTAL_QUERY_COMPLAINTS_180DAYS"
	FROM   :EVENTS_TABLE
	WHERE EVENT_NAME = 'Receive new land evaluation'
	GROUP BY "CUST_ID";

	
	INSERT INTO #FEATURES_TABLE (CUST_ID, TOTAL_QUERY_COMPLAINTS_180DAYS)
	SELECT CUST_ID, a.TOTAL_QUERY_COMPLAINTS_180DAYS
	FROM :TMP38 a;
--------- END OF QUERY COMPLAINT EVENTS


	------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------
	-- FEATURES EXTRACTION CODE FOR SPECIFIC FEATURES 
	------------------------------------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------------------------------------
	
	-- 39. EVENT_GROUP: PAYMENT ARRANGEMENT
	    TMP39 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(EVENT_GROUP) LIKE 'payment arrangement'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW)
		SELECT CUST_ID, a.PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW
		FROM :TMP39 a;
		
	-- 40. EVENT_NAME: 'Outbound FINAL DEMAND WITHIN PERIOD'
	-- aj free 20
	-- feature : Increase in Land Valuation by 30%
	    TMP40 =
		SELECT
		"CUST_ID" "CUST_ID", 1 AS "OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW"
		FROM   :EVENTS_TABLE
		WHERE EVENT_NAME = 'Increase in Land Valuation by 30%'
		GROUP BY "CUST_ID";

		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW)
		SELECT CUST_ID, a.OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW
		FROM :TMP40 a;
		
	-- 41. EVENT_NAME: 'Outbound FINAL DEMAND ALL YEARS'
	-- aj free 21
	-- feature : Increase in Tax Amount by 50% or more
	    TMP41 =
		SELECT
		"CUST_ID" "CUST_ID", 1 AS "OUT_FINAL_DEMAND_DUNNING_ALL_YEARS"
		FROM   :EVENTS_TABLE
		WHERE EVENT_NAME = 'Increase in Tax Amount by 50% or more'
		GROUP BY "CUST_ID";

		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_FINAL_DEMAND_DUNNING_ALL_YEARS)
		SELECT CUST_ID, a.OUT_FINAL_DEMAND_DUNNING_ALL_YEARS
		FROM :TMP41 a;
		
	-- 42. EVENT_NAME: 'Payment Extension'
	-- aj free 22
	-- feature : Increase in Total Land Value by 50%
	    TMP42 =
		SELECT
		"CUST_ID" "CUST_ID", 1 AS "PAYMENT_EXTENSION_ENQ"
		FROM   :EVENTS_TABLE
		WHERE EVENT_NAME = 'Increase in Total Land Value by 50%'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_EXTENSION_ENQ)
		SELECT CUST_ID, a.PAYMENT_EXTENSION_ENQ
		FROM :TMP42 a;
		
	-- 43. EVENT_NAME: 'Outbound Garnishee Notice WITHIN WINDOW'
	-- aj free 23
	-- feature : Promise to Pay Payment was Late
	    TMP43 =
		SELECT
		"CUST_ID" "CUST_ID", 1 AS "OUT_GARNISHEE_NOTICE_WITHIN_WINDOW"
		FROM   :EVENTS_TABLE
		WHERE EVENT_NAME = 'Promise to Pay Payment was Late'
		GROUP BY "CUST_ID";

		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_GARNISHEE_NOTICE_WITHIN_WINDOW)
		SELECT CUST_ID, a.OUT_GARNISHEE_NOTICE_WITHIN_WINDOW
		FROM :TMP43 a;
	
	-- 44. EVENT_NAME: 'Outbound Garnishee ALL YEARS'
	-- aj free 24
	--  feature 
	    TMP44 =
		SELECT
			B.CUST_ID, COUNT(*) AS "OUT_GARNISHEE_NOTICE_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE LOWER(A.EVENT_NAME) LIKE '%outbound%garnishee notice%'
		AND A.INIT_DATE <= :END_DATE
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, OUT_GARNISHEE_NOTICE_ALL_YEARS)
		SELECT CUST_ID, a.OUT_GARNISHEE_NOTICE_ALL_YEARS
		FROM :TMP44 a;
		
	-- 45. EVENT_NAME: 'Legal Letter WITHIN WINDOW'
	    TMP45 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "LEGAL_LETTER_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(EVENT_NAME) LIKE 'legal letter'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, LEGAL_LETTER_WITHIN_WINDOW)
		SELECT CUST_ID, a.LEGAL_LETTER_WITHIN_WINDOW
		FROM :TMP45 a;
	
	-- 46. EVENT_NAME: 'legal letter ALL YEARS'
	    TMP46 =
		SELECT
			B.CUST_ID, COUNT(*) AS "LEGAL_LETTER_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE LOWER(A.EVENT_NAME) LIKE 'legal letter'
		AND A.INIT_DATE <= :END_DATE
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, LEGAL_LETTER_ALL_YEARS)
		SELECT CUST_ID, a.LEGAL_LETTER_ALL_YEARS
		FROM :TMP46 a;
		
	-- 47. EVENT_NAME: 'pay plan or payment plan WITHIN WINDOW'
	-- aj free 25
	    TMP47 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "PAYMENT_PLAN_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(EVENT_NAME) LIKE '%pay plan%' OR LOWER(EVENT_NAME) LIKE '%payment plan%'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_PLAN_WITHIN_WINDOW)
		SELECT CUST_ID, a.PAYMENT_PLAN_WITHIN_WINDOW
		FROM :TMP47 a;
	
	-- 48. EVENT_NAME: 'pay plan or payment plan ALL YEARS'
	-- aj free 26
	    TMP48 =
		SELECT
			B.CUST_ID, COUNT(*) AS "PAYMENT_PLAN_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE LOWER(A.EVENT_NAME) LIKE '%pay plan%' OR LOWER(A.EVENT_NAME) LIKE '%payment plan%'
		AND A.INIT_DATE <= :END_DATE
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_PLAN_ALL_YEARS)
		SELECT CUST_ID, a.PAYMENT_PLAN_ALL_YEARS
		FROM :TMP48 a;
		
	-- 49. EVENT_NAME: 'mortgagee letter WITHIN WINDOW'
	-- aj free 27
	-- feature : BANKRUPT
	    TMP49 =
		SELECT
		"CUST_ID" "CUST_ID", 1 AS "MORTGAGEE_LETTER_WITHIN_WINDOW"
		FROM   :EVENTS_TABLE
		WHERE EVENT_NAME = 'BANKRUPT'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, MORTGAGEE_LETTER_WITHIN_WINDOW)
		SELECT CUST_ID, a.MORTGAGEE_LETTER_WITHIN_WINDOW
		FROM :TMP49 a;
	
	-- 50. EVENT_NAME: 'mortgagee letter ALL YEARS'
	    TMP50 =
		SELECT
			B.CUST_ID, COUNT(*) AS "MORTGAGEE_LETTER_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE LOWER(A.EVENT_NAME) LIKE '%mortgagee letter%'
		AND A.INIT_DATE <= :END_DATE
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, MORTGAGEE_LETTER_ALL_YEARS)
		SELECT CUST_ID, a.MORTGAGEE_LETTER_ALL_YEARS
		FROM :TMP50 a;		
		
	-- 51. EVENT_GROUP: DUNNING CONTACT/DEBT MANAGEMENT WITHIN WINDOW
	    TMP51 =
		SELECT
			"CUST_ID" "CUST_ID", COUNT(*) AS "DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW"
		FROM
			:EVENTS_TABLE
		WHERE LOWER(EVENT_GROUP) LIKE 'debt management'
		GROUP BY "CUST_ID";
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW)
		SELECT a.CUST_ID, a.DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW
		FROM :TMP51 a;
	
	-- 52. EVENT_NAME: 'DUNNING CONTACT/DEBT MANAGEMENT ALL YEARS'
  
	   TMP52 =
		SELECT
			B.CUST_ID "CUST_ID", COUNT(*) AS "DEBT_MANAGEMENT_EVENTS_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE LOWER(A.EVENT_GROUP) LIKE 'debt management'
		AND A.INIT_DATE <= :END_DATE
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, DEBT_MANAGEMENT_EVENTS_ALL_YEARS)
		SELECT a.CUST_ID, a.DEBT_MANAGEMENT_EVENTS_ALL_YEARS
		FROM :TMP52 a;			
		
		-- 53. EVENT_NAME: 'PAYMENT ARRANGEMENT ALL YEARS'
	    TMP53 =
		SELECT
			B.CUST_ID "CUST_ID", COUNT(*) AS "PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS"
		FROM
			"db::app.CustomerEvents" A
		INNER JOIN 
			:CUSTOMERS_TABLE B
		ON A."CUST_ID" = B.CUST_ID
		WHERE LOWER(A.EVENT_GROUP) LIKE 'payment arrangement'
		AND A.INIT_DATE <= :END_DATE
		GROUP BY B.CUST_ID;
		
		INSERT INTO #FEATURES_TABLE (CUST_ID, PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS)
		SELECT a.CUST_ID, a.PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS
		FROM :TMP53 a;	
		
		
/***********************************************************************************************
* STORING FEATURES INTO THE TRAIN/PREDICTION DATASET TABLE
************************************************************************************************/		
	
	--LT_FINAL_FEATURES = 
 	CREATE LOCAL TEMPORARY TABLE #LT_FINAL_FEATURES AS (
		SELECT 
			"CUST_ID",
			MAX("DATA_MONTH") AS "DATA_MONTH",
			COALESCE(SUM("TOTAL_EVENTS"),0) AS "TOTAL_EVENTS",
			COALESCE(SUM("TOTAL_EVENTS_30DAYS"),0) AS "TOTAL_EVENTS_30DAYS",
			COALESCE(SUM("TOTAL_EVENTS_90DAYS"),0) AS "TOTAL_EVENTS_90DAYS",
			COALESCE(SUM("TOTAL_EVENTS_180DAYS"),0) AS "TOTAL_EVENTS_180DAYS",
			COALESCE(SUM("TOTAL_EVENTS_360DAYS"),0) AS "TOTAL_EVENTS_360DAYS",
			COALESCE(SUM("TOTAL_EVENTS_HIGH_INFLUENCE"),0) AS "TOTAL_EVENTS_HIGH_INFLUENCE",
			COALESCE(SUM("TOTAL_EVENTS_MEDIUM_INFLUENCE"),0) AS "TOTAL_EVENTS_MEDIUM_INFLUENCE",
			COALESCE(SUM("TOTAL_EVENTS_LOW_INFLUENCE"),0) AS "TOTAL_EVENTS_LOW_INFLUENCE",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_30DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_30DAYS",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_90DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_90DAYS",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_180DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_180DAYS",
			COALESCE(SUM("HIGH_INFLUENCE_EVENTS_360DAYS"),0) AS "HIGH_INFLUENCE_EVENTS_360DAYS",
			COALESCE(SUM("TOTAL_EVENTS_HIGH_IMPACT"),0) AS "TOTAL_EVENTS_HIGH_IMPACT",
			COALESCE(SUM("TOTAL_EVENTS_MEDIUM_IMPACT"),0) AS "TOTAL_EVENTS_MEDIUM_IMPACT",
			COALESCE(SUM("TOTAL_EVENTS_LOW_IMPACT"),0) AS "TOTAL_EVENTS_LOW_IMPACT",
			COALESCE(SUM("EVENTS_REACT_30DAYS"),0) AS "EVENTS_REACT_30DAYS",
			COALESCE(SUM("EVENTS_REACT_60DAYS"),0) AS "EVENTS_REACT_60DAYS",
			COALESCE(SUM("EVENTS_REACT_90DAYS"),0) AS "EVENTS_REACT_90DAYS",
			COALESCE(SUM("EVENTS_REACT_120DAYS"),0) AS "EVENTS_REACT_120DAYS",
			COALESCE(SUM("TOTAL_PREDEFINED_EVENTS"),0) AS "TOTAL_PREDEFINED_EVENTS",
			COALESCE(SUM("PREDEFINED_EVENTS_30DAYS"),0) AS "PREDEFINED_EVENTS_30DAYS",
			COALESCE(SUM("PREDEFINED_EVENTS_90DAYS"),0) AS "PREDEFINED_EVENTS_90DAYS",
			COALESCE(SUM("PREDEFINED_EVENTS_180DAYS"),0) AS "PREDEFINED_EVENTS_180DAYS",
			COALESCE(SUM("PREDEFINED_EVENTS_360DAYS"),0) AS "PREDEFINED_EVENTS_360DAYS",
			COALESCE(SUM("AVG_MONTHLY_EVENTS"),0) AS "AVG_MONTHLY_EVENTS",
			COALESCE(SUM("TOTAL_MONTHS_WITH_COMPANY"),0) AS "TOTAL_MONTHS_WITH_COMPANY",
			COALESCE(SUM("INACTIVE_EVENTS"),0) AS "INACTIVE_EVENTS",
			COALESCE(SUM("INACTIVE_EVENTS_30DAYS"),0) AS "INACTIVE_EVENTS_30DAYS",
			COALESCE(SUM("INACTIVE_EVENTS_90DAYS"),0) AS "INACTIVE_EVENTS_90DAYS",
			COALESCE(SUM("INACTIVE_EVENTS_180DAYS"),0) AS "INACTIVE_EVENTS_180DAYS",
			COALESCE(SUM("NEGATIVE_SURVEY"),0) AS "NEGATIVE_SURVEY",
			COALESCE(SUM("NEGATIVE_SURVEY_30DAYS"),0) AS "NEGATIVE_SURVEY_30DAYS",
			COALESCE(SUM("NEGATIVE_SURVEY_90DAYS"),0) AS "NEGATIVE_SURVEY_90DAYS",
			COALESCE(SUM("NEGATIVE_SURVEY_180DAYS"),0) AS "NEGATIVE_SURVEY_180DAYS",
			COALESCE(SUM("TOTAL_QUERY_COMPLAINTS"),0) AS "TOTAL_QUERY_COMPLAINTS",
			COALESCE(SUM("TOTAL_QUERY_COMPLAINTS_30DAYS"),0) AS "TOTAL_QUERY_COMPLAINTS_30DAYS",
			COALESCE(SUM("TOTAL_QUERY_COMPLAINTS_90DAYS"),0) AS "TOTAL_QUERY_COMPLAINTS_90DAYS",
			COALESCE(SUM("TOTAL_QUERY_COMPLAINTS_180DAYS"),0) AS "TOTAL_QUERY_COMPLAINTS_180DAYS",
		---------------- START OF SPECIFIC FEATURES -------------------
			COALESCE(SUM("PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW"),0) AS "PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW",
			COALESCE(SUM("OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW"),0) AS "OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW",
			COALESCE(SUM("OUT_FINAL_DEMAND_DUNNING_ALL_YEARS"),0) AS "OUT_FINAL_DEMAND_DUNNING_ALL_YEARS",
			COALESCE(SUM("PAYMENT_EXTENSION_ENQ"),0) AS "PAYMENT_EXTENSION_ENQ",
			COALESCE(SUM("OUT_GARNISHEE_NOTICE_WITHIN_WINDOW"),0) AS "OUT_GARNISHEE_NOTICE_WITHIN_WINDOW",
			COALESCE(SUM("OUT_GARNISHEE_NOTICE_ALL_YEARS"),0) AS "OUT_GARNISHEE_NOTICE_ALL_YEARS",
			COALESCE(SUM("LEGAL_LETTER_WITHIN_WINDOW"),0) AS "LEGAL_LETTER_WITHIN_WINDOW",
			COALESCE(SUM("LEGAL_LETTER_ALL_YEARS"),0) AS "LEGAL_LETTER_ALL_YEARS",
			COALESCE(SUM("PAYMENT_PLAN_WITHIN_WINDOW"),0) AS "PAYMENT_PLAN_WITHIN_WINDOW",
			COALESCE(SUM("PAYMENT_PLAN_ALL_YEARS"),0) AS "PAYMENT_PLAN_ALL_YEARS",
			COALESCE(SUM("MORTGAGEE_LETTER_WITHIN_WINDOW"),0) AS "MORTGAGEE_LETTER_WITHIN_WINDOW",
			COALESCE(SUM("MORTGAGEE_LETTER_ALL_YEARS"),0) AS "MORTGAGEE_LETTER_ALL_YEARS",
			COALESCE(SUM("DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW"),0) AS "DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW",
			COALESCE(SUM("DEBT_MANAGEMENT_EVENTS_ALL_YEARS"),0) AS "DEBT_MANAGEMENT_EVENTS_ALL_YEARS",
			COALESCE(SUM("PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS"),0) AS "PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS",
            MAX("REACTED") AS "REACTED"
		FROM #FEATURES_TABLE
		GROUP BY "CUST_ID");
		
	IF :TRAIN_FLAG = 1 THEN -- FOR CREATING TRAINING DATASET
		
		-- REMOVING OLD DATA FROM THE BACKUP TRAIN TABLE
		DELETE FROM "db::ml.bkup.train_data"
		WHERE REACTION_TYPE = :REACTION_TYPE;
		
		-- INSERTING THE NEW GENERATED DATA TO THE BACKUP TRAIN TABLE
		INSERT INTO "db::ml.bkup.train_data" (
			SELECT *, :REACTION_TYPE, CURRENT_DATE FROM #LT_FINAL_FEATURES
		);

		-- INSERTING thE NEW GENERATED DATA TO THE TRAIN TABLE
		TRUNCATE TABLE "db::ml.train.data";
		INSERT INTO "db::ml.train.data"
			SELECT 
				"DATA_MONTH",
				 "TOTAL_EVENTS",
				 "TOTAL_EVENTS_30DAYS",
				 "TOTAL_EVENTS_90DAYS",
				 "TOTAL_EVENTS_180DAYS",
				 "TOTAL_EVENTS_360DAYS",
				 "TOTAL_EVENTS_HIGH_INFLUENCE",
				 "TOTAL_EVENTS_MEDIUM_INFLUENCE",
				 "TOTAL_EVENTS_LOW_INFLUENCE",
				 "HIGH_INFLUENCE_EVENTS_30DAYS",
				 "HIGH_INFLUENCE_EVENTS_90DAYS",
				 "HIGH_INFLUENCE_EVENTS_180DAYS",
				 "HIGH_INFLUENCE_EVENTS_360DAYS",
				 "TOTAL_EVENTS_HIGH_IMPACT",
				 "TOTAL_EVENTS_MEDIUM_IMPACT",
				 "TOTAL_EVENTS_LOW_IMPACT",
				 "EVENTS_REACT_30DAYS",
				 "EVENTS_REACT_60DAYS",
				 "EVENTS_REACT_90DAYS",
				 "EVENTS_REACT_120DAYS",
				 "TOTAL_PREDEFINED_EVENTS",
				 "PREDEFINED_EVENTS_30DAYS",
				 "PREDEFINED_EVENTS_90DAYS",
				 "PREDEFINED_EVENTS_180DAYS",
				 "PREDEFINED_EVENTS_360DAYS",
				 "AVG_MONTHLY_EVENTS",
				 "TOTAL_MONTHS_WITH_COMPANY",
				 "INACTIVE_EVENTS",
				 "INACTIVE_EVENTS_30DAYS",
				 "INACTIVE_EVENTS_90DAYS",
				 "INACTIVE_EVENTS_180DAYS",
				 "NEGATIVE_SURVEY",
				 "NEGATIVE_SURVEY_30DAYS",
				 "NEGATIVE_SURVEY_90DAYS",
				 "NEGATIVE_SURVEY_180DAYS",
				 "TOTAL_QUERY_COMPLAINTS",
				 "TOTAL_QUERY_COMPLAINTS_30DAYS",
				 "TOTAL_QUERY_COMPLAINTS_90DAYS",
				 "TOTAL_QUERY_COMPLAINTS_180DAYS",
				 "PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW",
				 "OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW",
				 "OUT_FINAL_DEMAND_DUNNING_ALL_YEARS",
				 "PAYMENT_EXTENSION_ENQ",
				 "OUT_GARNISHEE_NOTICE_WITHIN_WINDOW",
				 "OUT_GARNISHEE_NOTICE_ALL_YEARS",
				 "LEGAL_LETTER_WITHIN_WINDOW",
				 "LEGAL_LETTER_ALL_YEARS",
				 "PAYMENT_PLAN_WITHIN_WINDOW",
				 "PAYMENT_PLAN_ALL_YEARS",
				 "MORTGAGEE_LETTER_WITHIN_WINDOW",
				 "MORTGAGEE_LETTER_ALL_YEARS",
				 "DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW",
				 "DEBT_MANAGEMENT_EVENTS_ALL_YEARS",
				 "PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS",
				 "REACTED"
			FROM #LT_FINAL_FEATURES;
				
	ELSE -- FOR CREATING PREDICTION DATASET
		TRUNCATE TABLE "db::ml.predict.data";
		INSERT INTO "db::ml.predict.data"
			SELECT
				"CUST_ID" AS "ID",
				"DATA_MONTH",
				"TOTAL_EVENTS",
				"TOTAL_EVENTS_30DAYS",
				"TOTAL_EVENTS_90DAYS",
				"TOTAL_EVENTS_180DAYS",
				"TOTAL_EVENTS_360DAYS",
				"TOTAL_EVENTS_HIGH_INFLUENCE",
				"TOTAL_EVENTS_MEDIUM_INFLUENCE",
				"TOTAL_EVENTS_LOW_INFLUENCE",
				"HIGH_INFLUENCE_EVENTS_30DAYS",
				"HIGH_INFLUENCE_EVENTS_90DAYS",
				"HIGH_INFLUENCE_EVENTS_180DAYS",
				"HIGH_INFLUENCE_EVENTS_360DAYS",
				"TOTAL_EVENTS_HIGH_IMPACT",
				"TOTAL_EVENTS_MEDIUM_IMPACT",
				"TOTAL_EVENTS_LOW_IMPACT",
				"EVENTS_REACT_30DAYS",
				"EVENTS_REACT_60DAYS",
				"EVENTS_REACT_90DAYS",
				"EVENTS_REACT_120DAYS",
				"TOTAL_PREDEFINED_EVENTS",
				"PREDEFINED_EVENTS_30DAYS",
				"PREDEFINED_EVENTS_90DAYS",
				"PREDEFINED_EVENTS_180DAYS",
				"PREDEFINED_EVENTS_360DAYS",
				"AVG_MONTHLY_EVENTS",
				"TOTAL_MONTHS_WITH_COMPANY",
				"INACTIVE_EVENTS",
				"INACTIVE_EVENTS_30DAYS",
				"INACTIVE_EVENTS_90DAYS",
				"INACTIVE_EVENTS_180DAYS",
				"NEGATIVE_SURVEY",
				"NEGATIVE_SURVEY_30DAYS",
				"NEGATIVE_SURVEY_90DAYS",
				"NEGATIVE_SURVEY_180DAYS",
				"TOTAL_QUERY_COMPLAINTS",
				"TOTAL_QUERY_COMPLAINTS_30DAYS",
				"TOTAL_QUERY_COMPLAINTS_90DAYS",
				"TOTAL_QUERY_COMPLAINTS_180DAYS",
				"PAYMENT_ARRANGEMENT_EVENTS_WITHIN_WINDOW",
				"OUT_FINAL_DEMAND_DUNNING_WITHIN_WINDOW",
				"OUT_FINAL_DEMAND_DUNNING_ALL_YEARS",
				"PAYMENT_EXTENSION_ENQ",
				"OUT_GARNISHEE_NOTICE_WITHIN_WINDOW",
				"OUT_GARNISHEE_NOTICE_ALL_YEARS",
				"LEGAL_LETTER_WITHIN_WINDOW",
				"LEGAL_LETTER_ALL_YEARS",
				"PAYMENT_PLAN_WITHIN_WINDOW",
				"PAYMENT_PLAN_ALL_YEARS",
				"MORTGAGEE_LETTER_WITHIN_WINDOW",
				"MORTGAGEE_LETTER_ALL_YEARS",
				"DEBT_MANAGEMENT_EVENTS_WITHIN_WINDOW",
				"DEBT_MANAGEMENT_EVENTS_ALL_YEARS",
				"PAYMENT_ARRANGEMENT_EVENTS_ALL_YEARS"
			FROM #LT_FINAL_FEATURES;
		
		-- REMOVING OLD DATA FROM THE BACKUP TRAIN TABLE
		DELETE FROM "db::ml.bkup.predict_data"
		WHERE REACTION_TYPE = :REACTION_TYPE;
		
		-- INSERTING THE NEW GENERATED DATA TO THE BACKUP PREDICTION TABLE
		INSERT INTO "db::ml.bkup.predict_data" (
			SELECT *, 0, :REACTION_TYPE, CURRENT_DATE FROM "db::ml.predict.data");
	END IF;
	
	DROP TABLE #LT_FINAL_FEATURES;
	DROP TABLE #FEATURES_TABLE;
END