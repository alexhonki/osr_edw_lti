PROCEDURE "procedures.ml::PR_RUN_TRAIN_PREDICT_WRAPPER" 
	(
		IN 	REACTION_TYPE VARCHAR(100) DEFAULT 'DEBTOR_INITIAL_ASSESSMENT',
		IN  WINDOW_TS_SIZE 		INTEGER DEFAULT null,
		IN  CURRENT_START_TS    INTEGER DEFAULT null, 
		IN	PREVIOUS_WINDOWS    INTEGER DEFAULT null,	
		IN 	PREDICTION_WINDOW   INTEGER DEFAULT null,
		IN  RUN_DAY 			TIMESTAMP 	DEFAULT null
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
/*****************************************************************************
							EXCEPTION HANDLING
******************************************************************************/
	DECLARE  PROC_NAME nvarchar(1000) := TO_NVARCHAR('"db.procedures.ml::PR_RUN_TRAIN_PREDICT_WRAPPER"' );
  	DECLARE EXIT HANDLER FOR sqlexception
  		INSERT INTO "db::adm.log.error" VALUES(::SQL_ERROR_CODE,:PROC_NAME,::SQL_ERROR_MESSAGE,CURRENT_TIMESTAMP);
  	BEGIN

		DECLARE LV_PREVIOUS_WINDOWS  INT := COALESCE (:PREVIOUS_WINDOWS,48); -- 48 Months / 4 years training
		DECLARE LV_PREDICT_START_TS  INT; -- Current Year april
		DECLARE LV_PREDICT_END_TS    INT := YEAR(CURRENT_UTCTIMESTAMP)*100 + MONTH(CURRENT_UTCTIMESTAMP);
		DECLARE LV_WINDOW_TS_SIZE    INT := COALESCE (:WINDOW_TS_SIZE,1); -- 1 month
		DECLARE LV_PREDICTION_WINDOW INT := COALESCE (:PREDICTION_WINDOW, 18); -- Predict how long to the future
		
	--	DECLARE LV_TRAIN_START_TS    INT := COALESCE (:CURRENT_START_TS,YEAR(CURRENT_UTCTIMESTAMP)*100 + 6);
	--	DECLARE LV_TRAIN_END_TS 	 INT := COALESCE (:CURRENT_START_TS,YEAR(CURRENT_UTCTIMESTAMP)*100 + 6);
		DECLARE LV_TRAIN_START_TS    INT ;
		DECLARE LV_TRAIN_END_TS 	 INT ;
		DECLARE TRAIN_RUN_DAY		 DATE;
		DECLARE LV_TRAIN_TEMP        DATE;
		DECLARE LV_CUTOFF_MONTH 	 INT;
		
		BEGIN
			DECLARE EXIT HANDLER FOR sqlexception 
				insert into "db::ml.config.MLParameters" values('ML_PREVIOUS_WINDOWS','Previous windows to include',1,:LV_PREVIOUS_WINDOWS,null,null);
			SELECT COALESCE(:LV_PREVIOUS_WINDOWS, INT_PARAMETER) INTO LV_PREVIOUS_WINDOWS FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'ML_PREVIOUS_WINDOWS';
		END;
		
		BEGIN
			DECLARE EXIT HANDLER FOR sqlexception 
				insert into "db::ml.config.MLParameters" values('ML_WINDOW_TS_SIZE','Size of windows in months',1,:LV_WINDOW_TS_SIZE,null,null);
			SELECT COALESCE(:LV_WINDOW_TS_SIZE,INT_PARAMETER) INTO LV_WINDOW_TS_SIZE FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'ML_WINDOW_TS_SIZE';
		END;		


		-- IN  RUN_DAY 			TIMESTAMP 	DEFAULT null
		IF :RUN_DAY IS NULL THEN            -- Get Run Day/Prediction End Date as set on UI
			SELECT TO_DATE(TO_DATE) INTO RUN_DAY
			FROM "functions::TF_CONF_GET_PREDICTION_DATES" ( )
			WHERE IS_ENABLED = 1;
		END IF;


/*****************************************************************************
			SELECTING CUTOFF MONTH FOR CREATING PERIODIC FEATURES
******************************************************************************/	
		SELECT INT_PARAMETER INTO LV_CUTOFF_MONTH
		FROM "db::ml.config.MLParameters"
		WHERE "PARAMETER_NAME" = 'ML_CUTOFF_MONTH';	
		
		
/*****************************************************************************
				SET TRAINING DATE AS SET ON UI
/*****************************************************************************/
		IF :CURRENT_START_TS IS NULL THEN
			SELECT TO_DATE(TO_NVARCHAR( ADD_SECONDS (TO_TIMESTAMP ('1970-01-01 00:00:00'), TO_BIGINT ("STR_VALUE")/1000 )))  INTO LV_TRAIN_TEMP
			FROM "models.adm::CV_CONFIG" 
			WHERE "BUCKET_ID" = 'TRAINING_DATE';
			CURRENT_START_TS = YEAR(:LV_TRAIN_TEMP)*100 + MONTH(:LV_TRAIN_TEMP);
		END IF;
		

		LV_TRAIN_START_TS = CURRENT_START_TS;
		LV_TRAIN_END_TS  = CURRENT_START_TS;
/*****************************************************************************
						SET PREDICT START DATE
******************************************************************************/	
--		IF RUN_DAY IS NULL THEN
--			RUN_DAY := CURRENT_TIMESTAMP;
--		END IF;
		
		IF :RUN_DAY IS NULL THEN            -- Get Run Day/Prediction End Date as set on UI
		SELECT TO_DATE(TO_DATE) INTO RUN_DAY
		FROM "functions::TF_CONF_GET_PREDICTION_DATES" ( )
		WHERE IS_ENABLED = 1;
		END IF;
	
		IF MONTH(:RUN_DAY) < :LV_CUTOFF_MONTH THEN
			LV_PREDICT_START_TS = (YEAR(RUN_DAY) - 1) * 100 + :LV_CUTOFF_MONTH;
		ELSE
			LV_PREDICT_START_TS = YEAR(RUN_DAY)*100 + :LV_CUTOFF_MONTH;
		END IF;
		
--	When Start_Ts is not specified, last training data must be x monthsbefore today (x is the prediction_window)

		IF :CURRENT_START_TS IS NULL THEN
			TRAIN_RUN_DAY = ADD_MONTHS(:RUN_DAY, -:LV_PREDICTION_WINDOW);
			
			IF MONTH(TRAIN_RUN_DAY) < :LV_CUTOFF_MONTH THEN
				LV_TRAIN_START_TS = (YEAR(TRAIN_RUN_DAY) - 1) * 100 + :LV_CUTOFF_MONTH;
			ELSE
				LV_TRAIN_START_TS = YEAR(TRAIN_RUN_DAY)*100 + :LV_CUTOFF_MONTH;
			END IF;
			
			LV_TRAIN_END_TS = YEAR(:TRAIN_RUN_DAY) * 100 + MONTH(:TRAIN_RUN_DAY);
		END IF;
		
	
		
		CALL "procedures.ml::PR_ML_EXTRACT_PREDICTION_SET"(
			REACTION_TYPE=>:REACTION_TYPE,
			WINDOW_TS_SIZE=>:LV_WINDOW_TS_SIZE,
			CURRENT_START_TS=>:LV_PREDICT_START_TS,
			CURRENT_END_TS=>:LV_PREDICT_END_TS,
			RUN_DAY=>:RUN_DAY
		);

		CALL "procedures.ml::PR_ML_EXTRACT_TRAINING_SET"(
			REACTION_TYPE=>:REACTION_TYPE,
			WINDOW_TS_SIZE=>:LV_WINDOW_TS_SIZE,
			PREVIOUS_WINDOWS=>:LV_PREVIOUS_WINDOWS,
			CURRENT_START_TS=> :LV_TRAIN_START_TS,
			CURRENT_END_TS=> :LV_TRAIN_END_TS, -- exclude current window
			PREDICTION_WINDOW => :LV_PREDICTION_WINDOW
		); 
		
		LT_TRAIN_DATA 	= SELECT * FROM "db::ml.train.data";
		LT_PREDICT_DATA = SELECT * FROM "db::ml.predict.data";

		/******************************************************************************
		* PERFORM MACHINE LEARNING TRAINING
		*******************************************************************************/
		-- RUN NN TRAINING
		CALL "procedures.ml::PR_RUN_PAL_TRAINING"(1, :LT_TRAIN_DATA, ?, LT_NN_MODEL, ?);
		
		-- RUN RF TRAINING
		CALL "procedures.ml::PR_RUN_PAL_TRAINING"(0, :LT_TRAIN_DATA, ?, ?, LT_RF_MODEL);
		
		/******************************************************************************
		* PERFORM MACHINE LEARNING PREDICTION
		*******************************************************************************/
		-- RUN NN PREDICTION
		CALL "procedures.ml::PR_RUN_PAL_PREDICTION"(1, :LT_PREDICT_DATA,  :LT_NN_MODEL, :LT_RF_MODEL, ?, ?, ?);
		
		-- RUN RF PREDICTION
		CALL "procedures.ml::PR_RUN_PAL_PREDICTION"(0, :LT_PREDICT_DATA, :LT_NN_MODEL, :LT_RF_MODEL, ?, ?, ?);
		
		/******************************************************************************
		* GENERATE FINAL RISK SCORES & BACKUP CURRENT MODELS AND RESULT
		*******************************************************************************/
		-- TRUNCATE THE CUSTOMER RISK RESULTS TABLE AND INSERT THE NEW PREDICTION RESULTS
		TRUNCATE TABLE "db::ml.predict.CustomerRiskResults";
		INSERT INTO "db::ml.predict.CustomerRiskResults"
		SELECT ID, TO_INT((NN_RISK + RF_RISK)/2 * 100), RF_RISK, NN_RISK
		FROM (
			SELECT A.ID, TO_DOUBLE(A.REACTED) AS NN_REACTED, TO_DOUBLE(C.SCORING) AS RF_REACTED, B.SOFTMAX AS NN_RISK, 
			CASE WHEN C.SCORING ='0' THEN 1-C.PROB ELSE C.PROB END AS RF_RISK
			FROM "db::ml.predict.nn_result" A, "db::ml.predict.nn_softmax" B, "db::ml.predict.rf_result" C
			WHERE A.ID = B.ID AND B.REACTED = 1 AND A.ID = C.ID
		);
		
		-- REMOVING OLD DATA FROM THE BACKUP RISK SCORES TABLE BUT LEAVING THE LAST BACKUP DATA
		DELETE FROM "db::ml.bkup.CustomerRiskResults"
		WHERE REACTION_TYPE = :REACTION_TYPE AND INIT_DATE < 
			(SELECT MAX(INIT_DATE) FROM "db::ml.bkup.CustomerRiskResults" WHERE REACTION_TYPE = :REACTION_TYPE);
		
		-- INSERTING THE CURRENT PREDICTION RESULT TO THE BACKUP TABLE		
		INSERT INTO "db::ml.bkup.CustomerRiskResults"(
			SELECT *, :REACTION_TYPE, CURRENT_UTCTIMESTAMP FROM "db::ml.predict.CustomerRiskResults"
		);
		
		-- REMOVING OLD MODELS FROM THE BACKUP NN MODEL TABLE BUT LEAVING THE LAST BACKUP MODEL
		DELETE FROM "db::ml.bkup.nn_model"
		WHERE REACTION_TYPE = :REACTION_TYPE AND INIT_DATE < 
			(SELECT MAX(INIT_DATE) FROM "db::ml.bkup.nn_model" WHERE REACTION_TYPE = :REACTION_TYPE);
		
		-- BACKING UP THE NEW MODEL INTO NN MODEL BACKUP TABLE
		INSERT INTO "db::ml.bkup.nn_model"(
			SELECT *, :REACTION_TYPE, CURRENT_UTCTIMESTAMP FROM :LT_NN_MODEL
		);
		
		-- REMOVING OLD MODELS FROM THE BACKUP RF MODEL TABLE BUT LEAVING THE LAST BACKUP MODEL
		DELETE FROM "db::ml.bkup.rf_model"
		WHERE REACTION_TYPE = :REACTION_TYPE AND INIT_DATE < 
			(SELECT MAX(INIT_DATE) FROM "db::ml.bkup.rf_model" WHERE REACTION_TYPE = :REACTION_TYPE);
			
		-- BACKING UP THE NEW MODEL INTO RF MODEL BACKUP TABLE	
		INSERT INTO "db::ml.bkup.rf_model"(
			SELECT *, :REACTION_TYPE, CURRENT_UTCTIMESTAMP FROM :LT_RF_MODEL
		); 
		
		/******************************************************************************
		* EVALUATE MODEL : CALCULATE RECALL, PRECISION AND ACCURACY
		*******************************************************************************/
		--CALL "procedures.ml::PR_ML_EVALUATE"();
	
	END;
END