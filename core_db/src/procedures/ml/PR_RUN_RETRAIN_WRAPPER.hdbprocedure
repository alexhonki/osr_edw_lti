PROCEDURE "procedures.ml::PR_RUN_RETRAIN_WRAPPER" 
	(
	IN  TRAIN_START_DATE	DATE 	DEFAULT null
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
 /*************************************
      This procedure will be used for 
      retraining the model for a different
      time period.Prediction will be done
      using Predict Wrapper
   *************************************/
   DECLARE  PROC_NAME nvarchar(1000) := TO_NVARCHAR('"db.procedures.ml::PR_RUN_TRAIN_PREDICT_WRAPPER"' );
  	DECLARE EXIT HANDLER FOR sqlexception
  		INSERT INTO "db::adm.log.error" VALUES(::SQL_ERROR_CODE,:PROC_NAME,::SQL_ERROR_MESSAGE,CURRENT_TIMESTAMP);
  	BEGIN
  	
   DECLARE LV_TRAIN_START_DATE DATE;
   DECLARE LV_TRAIN_END_TS 	 INT;
   DECLARE LV_CUTOFF_MONTH 	 INT;
   DECLARE LV_PREV_WINDOWS  INT;
   
   	SELECT INT_PARAMETER INTO LV_CUTOFF_MONTH
	FROM "db::ml.config.MLParameters"
	WHERE "PARAMETER_NAME" = 'ML_CUTOFF_MONTH';	
		
   LV_TRAIN_START_DATE = TRAIN_START_DATE;
   
   IF TRAIN_START_DATE IS NULL THEN
		SELECT max(TO_DATE(DEPLOY_DATE)) INTO LV_TRAIN_START_DATE FROM "db::ml.deployed.model"; -- Code needs to be written to store deploy date on 1st run
   END IF;
   
	IF MONTH(CURRENT_UTCDATE) < :LV_CUTOFF_MONTH THEN
		LV_TRAIN_END_TS = (YEAR(CURRENT_UTCDATE) - 1) * 100 + :LV_CUTOFF_MONTH;
	ELSE
		LV_TRAIN_END_TS = YEAR(CURRENT_UTCDATE)*100 + :LV_CUTOFF_MONTH;
	END IF;
	
	LV_PREV_WINDOWS = MONTHS_BETWEEN(LV_TRAIN_START_DATE,TO_DATE(LV_TRAIN_END_TS));
	
	CALL "procedures.ml::PR_ML_EXTRACT_TRAINING_SET"(
			--REACTION_TYPE=>:REACTION_TYPE,
			--WINDOW_TS_SIZE=>:LV_WINDOW_TS_SIZE,
			PREVIOUS_WINDOWS=>:LV_PREV_WINDOWS,
			CURRENT_START_TS=> LEFT(:LV_TRAIN_END_TS,6),--Procedure will use Previous windows to find Train Start date
			CURRENT_END_TS=> LEFT(:LV_TRAIN_END_TS,6)
			--PREDICTION_WINDOW => :LV_PREDICTION_WINDOW,
			--EXCLUDE_MONTHS=>:LV_EXCLUDE_MONTHS
			);
			
	LT_TRAIN_DATA 	= SELECT * FROM "db::ml.train.data";

	-- RUN NN TRAINING
	CALL "procedures.ml::PR_RUN_PAL_TRAINING"(1, :LT_TRAIN_DATA, ?, LT_NN_MODEL, ?);
		
	-- RUN RF TRAINING
	CALL "procedures.ml::PR_RUN_PAL_TRAINING"(0, :LT_TRAIN_DATA, ?, ?, LT_RF_MODEL);
	
	-- Backup of ML Parameters
	DELETE FROM "db::ml.bkup.MLParameters" WHERE "INIT_DATE" < (SELECT MAX("INIT_DATE") FROM "db::ml.bkup.MLParameters");
	INSERT INTO "db::ml.bkup.MLParameters" (SELECT * , CURRENT_UTCTIMESTAMP FROM "db::ml.config.MLParameters");
	
	-- REMOVING OLD MODELS FROM THE BACKUP NN MODEL TABLE BUT LEAVING THE LAST BACKUP MODEL
	DELETE FROM "db::ml.bkup.nn_model"
	WHERE REACTION_TYPE = 'DEBTOR_INITIAL_ASSESSMENT' AND INIT_DATE < 
		(SELECT MAX(INIT_DATE) FROM "db::ml.bkup.nn_model" WHERE REACTION_TYPE = 'DEBTOR_INITIAL_ASSESSMENT');
		
	-- BACKING UP THE NEW MODEL INTO NN MODEL BACKUP TABLE
	INSERT INTO "db::ml.bkup.nn_model"(
	SELECT *, 'DEBTOR_INITIAL_ASSESSMENT', CURRENT_UTCTIMESTAMP FROM :LT_NN_MODEL
		);
		
	-- REMOVING OLD MODELS FROM THE BACKUP RF MODEL TABLE BUT LEAVING THE LAST BACKUP MODEL
	DELETE FROM "db::ml.bkup.rf_model"
		WHERE REACTION_TYPE = 'DEBTOR_INITIAL_ASSESSMENT' AND INIT_DATE < 
		(SELECT MAX(INIT_DATE) FROM "db::ml.bkup.rf_model" WHERE REACTION_TYPE = 'DEBTOR_INITIAL_ASSESSMENT');
			
	-- BACKING UP THE NEW MODEL INTO RF MODEL BACKUP TABLE	
	INSERT INTO "db::ml.bkup.rf_model"(
		SELECT *, 'DEBTOR_INITIAL_ASSESSMENT', CURRENT_UTCTIMESTAMP FROM :LT_RF_MODEL
		); 
	
	END;
END