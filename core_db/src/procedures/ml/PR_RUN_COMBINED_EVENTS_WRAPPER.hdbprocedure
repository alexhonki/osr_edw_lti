PROCEDURE "procedures.ml::PR_RUN_COMBINED_EVENTS_WRAPPER" 
	(
		IN I_TO				INT DEFAULT null,
		IN I_REACTION_TYPE	VARCHAR(200) DEFAULT 'DEBTOR_INITIAL_ASSESSMENT' ,
		IN I_MODE			INT DEFAULT 0 /*0 = TRAIN AND APPLY MODE, 1 = APPLY */
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   AS
BEGIN
	DECLARE I_FROM INT;
	DECLARE I_INFLUENCE_FACTOR INT;
	DECLARE I_WINDOW_PERIOD INT;
	DECLARE LV_COUNT_ENTRY INT;

	--------------------------------------------------------------------------------------------------------
	-- Set Control Parameters
	--------------------------------------------------------------------------------------------------------
	-- I_FROM
	BEGIN
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT_PARAM_LAST_RUN','Last run date of the combined events procedure',1,200907,null,null);
		SELECT TOP 1 INT_PARAMETER INTO I_FROM FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT_PARAM_LAST_RUN';
	END;
	
	-- I_INFLUENCE_FACTOR
	BEGIN
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT_PARAM_INFLUENCE_FACTOR','Factor rate for increasing the influence of reacted customer events',1,2,null,null);
		SELECT TOP 1 INT_PARAMETER INTO I_INFLUENCE_FACTOR FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT_PARAM_INFLUENCE_FACTOR';
	END;
	
	-- I_WINDOW_PERIOD
	BEGIN
		DECLARE EXIT HANDLER FOR sqlexception 
			insert into "db::ml.config.MLParameters" values('FPG_COMB_EVT_PARAM_WINDOW_PERIOD','The period of window for generating features',1,12,null,null);
		SELECT TOP 1 INT_PARAMETER INTO I_WINDOW_PERIOD FROM "db::ml.config.MLParameters" WHERE "PARAMETER_NAME" = 'FPG_COMB_EVT_PARAM_WINDOW_PERIOD';
	END;
	
	IF :I_TO is NULL THEN 
		I_TO = year(CURRENT_UTCTIMESTAMP)*100 + month(CURRENT_UTCTIMESTAMP);
	END IF;
	-------------------------------------------------------------------------------------------------------
	-- Call Another Procedure to Run FP-Growth
	-------------------------------------------------------------------------------------------------------
	IF I_MODE = 0 THEN /* TRAIN AND APPLY */
		CALL "procedures.ml::PR_RUN_COMBINED_EVENTS"( I_REACTION_TYPE=>:I_REACTION_TYPE, 
			I_INFLUENCE_FACTOR => :I_INFLUENCE_FACTOR, I_WINDOW_PERIOD => :I_WINDOW_PERIOD, RESULT_TABLE=>LT_RESULT );
	ELSE /* APPLY ONLY */
		CALL "procedures.ml::PR_RUN_APPLY_COMBINED_EVENTS"(RESULT_TABLE=>LT_RESULT );
	END IF;
	
	IF IS_EMPTY(:LT_RESULT) 
	THEN
	 	DECLARE EXIT HANDLER FOR SQLEXCEPTION RESIGNAL SET MESSAGE_TEXT = 'No combined events returned';
		RETURN;
	ELSE 	
		------------------------------------------------------------------------------------------------------------
		-- DELETE ALL COMBINED EVENTS IN CUST EVENTS TABLE WITHIN THE PERIOD
		------------------------------------------------------------------------------------------------------------
		LV_PAST_COMB_EVENTS = SELECT RECORD_ID, "EVENT_ID.ID" "EVENT_ID"	-- combined events within range
								FROM "db::app.CustomerEvents"
								WHERE EVENT_GROUP = 'Combined Event'
								AND INIT_TS BETWEEN :I_FROM AND :I_TO
							 UNION
							SELECT RECORD_ID, ce."EVENT_ID.ID" "EVENT_ID"								-- reacted events within range
								FROM "db::app.CustomerEvents" ce
								INNER JOIN "db::ml.combined.rawEvents" re
								ON ce."INIT_DATE" = re."INIT_DATE"
								WHERE ce.EVENT_GROUP = 'Combined Event'
								AND year(re.REACTION_DATE)*100+month(re.REACTION_DATE)  BETWEEN :I_FROM AND :I_TO;
		
		DELETE FROM "db::app.CustomerEvents"
		WHERE RECORD_ID IN 
				(SELECT RECORD_ID FROM :LV_PAST_COMB_EVENTS);
		
		/***********************************************************************************************************
		 * Side note that we need to revise the usage of nested procedure calls to reduce dependancies
		 *
		 *
		 ***********************************************************************************************************/
		
		------------------------------------------------------------------------------------------------------------
		-- Generate Combined Events
		------------------------------------------------------------------------------------------------------------
		-- Create Temporary Table to store all combined events
		CREATE LOCAL TEMPORARY  TABLE #TBL_FINAL_COMB_EVENTS(
			"CUST_ID" BIGINT,
			"EVENT_NAME" VARCHAR(200),
			"INIT_DATE" TIMESTAMP,
			"IS_SUBSET" INT,
			"DESC"      NVARCHAR(5000)
		);
		
		BEGIN
			DECLARE LA_COMBINED_ID 			NVARCHAR(500) ARRAY;
			DECLARE LA_EVENT_ID 			INT ARRAY;	
			DECLARE LV_ID_LIST 				NVARCHAR(500);
			DECLARE LV_INDEX 				INT;
			DECLARE LV_COUNT 				INT;
			DECLARE LV_INDEX_1				INT;
			DECLARE LV_COMBD_EVT_NAME       NVARCHAR(5000);
			DECLARE LV_ATOMIC_EVENT_NAME    NVARCHAR(1000);
		    DECLARE LA_COMBD_EVT_NAME       NVARCHAR(5000) ARRAY;
		    DECLARE LA_COMBD_EVT_SUPPORT     FLOAT ARRAY;
		    DECLARE LA_COMBD_EVT_CONDIFENCE  FLOAT ARRAY;
		    DECLARE LA_COMBD_EVT_LIFT		FLOAT ARRAY;
		    DECLARE LV_EVT_NAME_INDEX		INT;
			
			-- For each combined events row
			DECLARE CURSOR c_cursor1  FOR SELECT TOP 10 PRERULE,SUPPORT,CONFIDENCE,LIFT FROM :LT_RESULT ORDER BY LENGTH(PRERULE) DESC;
			FOR cur_row AS c_cursor1
			DO
				------------------------------------------------------------------------------------------------
				-- Divide the combined events results 
				------------------------------------------------------------------------------------------------
				-- Get count of items in list
				SELECT OCCURRENCES_REGEXPR('(&)' IN cur_row."PRERULE") + 1 as "COUNT"  INTO LV_COUNT from "synonyms::dummy";
				-- Set initial text to split
	        	LV_ID_LIST	:= cur_row."PRERULE";
	        	IF :LV_COUNT > 1
	        	THEN
				 	FOR LV_INDEX IN 1..:LV_COUNT DO
				 		-- Set Key
						LA_COMBINED_ID[CARDINALITY(:LA_COMBINED_ID) + 1]	:= replace (cur_row."PRERULE",'&',',');
						LA_COMBD_EVT_CONDIFENCE[CARDINALITY(:LA_COMBD_EVT_CONDIFENCE) + 1] = cur_row."CONFIDENCE";
						LA_COMBD_EVT_SUPPORT[CARDINALITY(:LA_COMBD_EVT_SUPPORT) +1]  = cur_row."SUPPORT";
						LA_COMBD_EVT_LIFT[CARDINALITY(:LA_COMBD_EVT_LIFT) + 1] = cur_row."LIFT";
						IF :LV_INDEX = :LV_COUNT  THEN
							-- Get Last Entry
							LA_EVENT_ID[CARDINALITY(:LA_EVENT_ID) + 1] 	:= :LV_ID_LIST;
						ELSE
							-- Get event
							LA_EVENT_ID[CARDINALITY(:LA_EVENT_ID) + 1] 	:= SUBSTR_BEFORE (:LV_ID_LIST, '&');
							
							-- Set next sequence of items to process
							LV_ID_LIST 				:= SUBSTR_AFTER (:LV_ID_LIST, '&');
						END IF;
						LV_EVT_NAME_INDEX := CARDINALITY(:LA_EVENT_ID);
						SELECT EVENT_NAME INTO LV_ATOMIC_EVENT_NAME FROM "db::adm.config.event.name" where ID = :LA_EVENT_ID[:LV_EVT_NAME_INDEX];
						IF LV_INDEX = 1 THEN 
							LV_COMBD_EVT_NAME := :LV_ATOMIC_EVENT_NAME;
						ELSE 
							LV_COMBD_EVT_NAME := CONCAT(CONCAT(:LV_COMBD_EVT_NAME,' | '),:LV_ATOMIC_EVENT_NAME);
						END IF;
						
					END FOR;
					-- Create list of Event IDs
					LT_LIST = unnest(:LA_COMBINED_ID,:LA_EVENT_ID,:LA_COMBD_EVT_SUPPORT,:LA_COMBD_EVT_CONDIFENCE,:LA_COMBD_EVT_LIFT) as ("COMBINED.ID","EVENT_ID","SUPPORT","CONFIDENCE","LIFT");   	
					
					
					----------------------------------------------------------------------------------------
					-- Create combined events for Reacted and non reacted customers 
					----------------------------------------------------------------------------------------
					LT_NONREACTED_EVENTS =
					   -- SEARCH AND CREATE COMBINED EVENTS FROM NON-REACTED CUSTOMERS
					   SELECT B."CUST_ID" "CUST_ID", B.INIT_DATE, B.GROUP_NO
								FROM :LT_LIST A INNER JOIN "db::ml.combined.rawEvents" B
								ON A.EVENT_ID = B.EVENT_ID
								WHERE B.GROUP_NO IS NOT NULL;
					
					-- SEARCH AND CREATE COMBINED EVENTS FROM REACTED CUSTOMERS
					LT_REACTED_EVENTS = SELECT B."CUST_ID" "CUST_ID", B.INIT_DATE, B.REACTION_DATE
							FROM :LT_LIST A INNER JOIN "db::ml.combined.rawEvents" B
							ON A.EVENT_ID = B.EVENT_ID
							WHERE B.GROUP_NO IS NULL;

					INSERT INTO #TBL_FINAL_COMB_EVENTS(		
							SELECT 
								CUST_ID,
								CONCAT('Combined Event:', replace (cur_row."PRERULE",'&',',')) AS EVENT_NAME,
								INIT_DATE,
								0,
								:LV_COMBD_EVT_NAME
							FROM 
							(
								SELECT CUST_ID, NULL AS GROUP_NO, MAX(INIT_DATE) AS INIT_DATE, COUNT(*) AS NO_OF_EVENTS
								FROM :LT_REACTED_EVENTS
								GROUP BY CUST_ID, REACTION_DATE
								UNION
								SELECT CUST_ID, GROUP_NO, MAX(INIT_DATE) AS INIT_DATE, COUNT(*) AS NO_OF_EVENTS
								FROM :LT_NONREACTED_EVENTS
								GROUP BY CUST_ID, GROUP_NO
							)
							WHERE NO_OF_EVENTS >= LV_COUNT
					);  
					-- Reset Arrays    	
					LA_COMBINED_ID := ARRAY();
					LA_EVENT_ID := ARRAY (); 
				    LA_COMBD_EVT_SUPPORT :=  ARRAY();
		    	    LA_COMBD_EVT_CONDIFENCE := ARRAY();
					
					-- Insert list of events ID into the combined list event config table
					INSERT INTO "db::adm.config.event.combined.list" 
					(
						SELECT "COMBINED.ID", "EVENT_ID", "SUPPORT", "CONFIDENCE", "LIFT"
						FROM :LT_LIST
						WHERE "COMBINED.ID" NOT IN 
						(
							SELECT DISTINCT "COMBINED.ID"
							FROM "db::adm.config.event.combined.list"
						)
					);
	        	END IF;
	    	END FOR;
		END;
		-- INSERT COMBINED EVENTS INTO CUSTOMER EVENTS TABLE
		INSERT INTO "db::app.CustomerEvents" (
				SELECT 
					CUST_ID "CUST_ID", 
					NULL AS "EVENT_ID.ID",
					'Combined Event' AS EVENT_GROUP,
					EVENT_NAME,  
					INIT_DATE,
					NULL AS END_DATE,
					1 AS EVENT_VALUE,
					DESC AS DESC,
					YEAR(INIT_DATE) * 100 + MONTH(INIT_DATE) AS INIT_TS,
					NULL AS END_TS
				FROM #TBL_FINAL_COMB_EVENTS);	
		
			-- Drop the temporary table
		DROP TABLE #TBL_FINAL_COMB_EVENTS;
--------------------------TBC----------------------------------------------------	    

	   -- Generate event ID
	    CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'COMBINED', I_TYPE => 4);	
----------------------------------------------------------------------------------	    
	    -- Update last run date of the combined events procedure
	    UPDATE "db::ml.config.MLParameters"
	    SET INT_PARAMETER = :I_TO
	    WHERE PARAMETER_NAME = 'FPG_COMB_EVT_PARAM_LAST_RUN';
	    
	--Update config event icon for combined event
		UPDATE "db::adm.config.event.name"
		SET "ICON" = 'program-triangles-2',
		"PRIORITY" = 1
		WHERE "CATEGORY_NAME" = 'Combined Event';
		
	END IF;
	

END