PROCEDURE "procedures.masterData::PR_EXTRACT_LT_CUSTOMER_ATTRIBUTES" (
IN IV_MODE INTEGER DEFAULT 0)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
  
   /*************************************
       Write your procedure logic 
   *************************************/
   DECLARE LV_LAST_MAX_SEQ_ID INTEGER;
   DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
   DECLARE LV_ENTITY_NAME CONSTANT NVARCHAR(500) :='CUSTOMER ATTRIBUTE';
   DECLARE LV_EVENT NVARCHAR(500);
   DECLARE LV_CUST_COUNT INTEGER;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	--DELTA LOAD
	LV_EVENT = '';
	CALL "procedures.utils::PR_DELETE_ALL_MASTERDATA"(:IV_MODE, :LV_ENTITY_NAME);
	SELECT OUT_MAX_SEQ_ID into LV_LAST_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_MASTERDATA"(:LV_ENTITY_NAME);
	IF LV_LAST_MAX_SEQ_ID IS NULL THEN
		LV_LAST_MAX_SEQ_ID = 0;
	END IF;
	IF LV_LAST_MAX_SEQ_ID = 0 THEN
	LT_CUST_EDITED = SELECT DISTINCT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	ELSE
	LT_CUST_EDITED = SELECT DISTINCT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_LAST_MAX_SEQ_ID;
	LT_CUST_ID_EDITED = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED;
	CALL "procedures.utils::PR_DELETE_MASTERDATA_FOR_CUST"(:LV_ENTITY_NAME, :LT_CUST_ID_EDITED,:LV_EVENT);
	END IF;
	
	LT_ALL_RESV_ALL_CUSTOMER = SELECT TO_BIGINT(A."ZZ_PARTNER") AS CUST_ID,
								    	 A."ZZ_PARTNER" AS EXT_ID,
										 TO_TIMESTAMP(A."TAXYRSTARTDT") AS "INIT_DATE", 
										TO_TIMESTAMP(A."TAXYRENDDT") AS "END_DATE",
										 A."INDIVORG" AS "INDIVORG",
										 A."TOTBPRELVNTVAL" AS "TOTBPRELVNTVAL",
										 TO_DATE(C."BIRTHDT") AS "BIRTHDT",
										 A."PARCELCNT" AS "PARCELCNT", 
										 A."TAXAMOUNT" AS "TAXAMOUNT",
										 A."OWNERTYPE" AS "OWNERTYPE",
										 A."ZZ_NOIA_DATE" AS NOIA_DATE
							   FROM  "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" AS A 
							   INNER JOIN "db::app.Customer" AS B ON B.EXT_ID = A.ZZ_PARTNER
							   INNER JOIN "osr.edw.staging.md.rms.proxy.synonym::CV_BUT000" AS C ON A.ZZ_PARTNER = C.PARTNER
							   INNER JOIN :LT_CUST_EDITED DELT  ON DELT.ZZ_PARTNER = C.PARTNER WHERE A.TAXYRSTARTDT>= B.INIT_DATE;
	
  
	LT_RESV_CUSTOMERS =	 SELECT * FROM :LT_ALL_RESV_ALL_CUSTOMER
							  WHERE  TAXAMOUNT > 0 ;

	LT_AGE_TEMP = SELECT DISTINCT CUST_ID, 
						  TO_DATE(INIT_DATE) AS "INIT_DATE",
						  TO_DATE(END_DATE) AS "END_DATE",INDIVORG, BIRTHDT
						  FROM :LT_ALL_RESV_ALL_CUSTOMER;
	
	--OUTSTANDING AMOUNT					  
	LT_OA_TEMP = SELECT CUST_ID, 
					MIN(TO_DATE(init_date)) AS "INIT_DATE",
					MAX(TO_DATE(end_date)) AS "END_DATE",
					SUM(VALUE) AS "VALUE"
					FROM "db::app.CustomerValues" -- where cust_id = '1280402' 
					GROUP BY cust_id;
						  
	/*LT_BP_VALUE_TEMP = SELECT CUST_ID, 
						  MIN(TO_DATE(TAXYRSTARTDT)) AS "INIT_DATE",
						  MAX(TO_DATE(TAXYRENDDT)) AS "END_DATE",
						  TOTBPRELVNTVAL
						  FROM :LT_RESV_CUSTOMERS
						  GROUP BY CUST_ID,TOTBPRELVNTVAL;*/
	

    --Age Group Attribute
    --End Date from Customer table or it should be Current Time Stamp??
    LT_CUSTOMER_AGE_GROUP =  	SELECT CUST_ID, MIN(INIT_DATE) AS INIT_DATE , MAX(END_DATE) AS END_DATE, MIN(INIT_TS) AS INIT_TS, MAX(END_TS) AS END_TS, ATTRIBUTE_VALUE,'AGE_GROUP' AS "ATTRIBUTE_NAME"  FROM 
								(	
    								SELECT CUST_ID,INIT_DATE,END_DATE,
									 ((YEAR("INIT_DATE")*100) + MONTH("INIT_DATE")) AS INIT_TS,
    				  		    	 ((YEAR("END_DATE")*100) + MONTH("END_DATE")) AS END_TS,
								     "functions.utils::TF_GET_AGE_CUST_ATTR"( ROUND(DAYS_BETWEEN("BIRTHDT","END_DATE")/365,1),INDIVORG, BIRTHDT ).AGEGROUP AS "ATTRIBUTE_VALUE",
								     'AGE_GROUP' AS "ATTRIBUTE_NAME" 
								     FROM :LT_AGE_TEMP 
								 ) GROUP BY CUST_ID, ATTRIBUTE_VALUE; 
						    
						   
						    
	--Partner Type
	LT_PARTNER_TYPE_UNGROUPED = SELECT 
									CUST_ID,INIT_DATE,END_DATE,
    								CASE WHEN (to_varchar(INDIVORG) = 'IND') THEN 
    										CASE WHEN to_varchar(OWNERTYPE) = 'NO' THEN
    											'Individual - NO'
    										 ELSE 
    											'Individual - NR'
    										 END
    									WHEN (to_varchar(INDIVORG) = 'ORG') THEN 'Organization'
    								END AS "ATTRIBUTE_VALUE",
    								'TAXPAYER_TYPE' AS "ATTRIBUTE_NAME"
    							FROM :LT_RESV_CUSTOMERS;
    LT_PARTNER_TYPE = SELECT CUST_ID,
							TO_TIMESTAMP(MIN(INIT_DATE)) AS INIT_DATE, 
							TO_TIMESTAMP(MAX(END_DATE)) AS  END_DATE ,
							ATTRIBUTE_VALUE, 
							'TAXPAYER_TYPE' AS "ATTRIBUTE_NAME",
							((YEAR(TO_TIMESTAMP(MIN(INIT_DATE)))*100) + MONTH(TO_TIMESTAMP(MIN(INIT_DATE)))) AS INIT_TS,
    						((YEAR(TO_TIMESTAMP(MAX(END_DATE)))*100) + MONTH(TO_TIMESTAMP(MAX(END_DATE)))) AS END_TS
							FROM   (	
									SELECT SQ.CUST_ID,  SQ.ATTRIBUTE_VALUE, 
            								SQ.INIT_DATE, SQ.END_DATE,
            								SUM(CASE WHEN SQ.PVAL = SQ.ATTRIBUTE_VALUE THEN 0 ELSE 1 END ) OVER(ORDER BY CUST_ID, INIT_DATE) AS COUNTER 
    										FROM   
    											(
    												SELECT T.CUST_ID, T.INIT_DATE, T.END_DATE,T.ATTRIBUTE_VALUE,
    														LAG(T.ATTRIBUTE_VALUE, 1, NULL) OVER(ORDER BY CUST_ID, INIT_DATE) AS PVAL 
            												FROM   :LT_PARTNER_TYPE_UNGROUPED T
            									) SQ 
											ORDER  BY SQ.CUST_ID, INIT_DATE
									) GROUP  BY CUST_ID, ATTRIBUTE_VALUE, COUNTER ;						
    --Outstanding Amount
	LT_OUT_AMT     =	SELECT 
							CUST_ID,INIT_DATE,END_DATE,
    						((YEAR("INIT_DATE")*100) + MONTH("INIT_DATE")) AS INIT_TS,
    						((YEAR("END_DATE")*100) + MONTH("END_DATE")) AS END_TS,
    						CASE WHEN ("VALUE"<=100 ) THEN 'Under $100' 
						    WHEN ("VALUE">100 and "VALUE"<=1000 ) THEN '$100 to $1000'
						    WHEN ("VALUE">1000 and "VALUE"<=10000 ) THEN '$1000 to $10000'
						    WHEN ("VALUE">10000 ) THEN 'Over $10000'
						    END AS "ATTRIBUTE_VALUE",
    						'OUTSTANDING_REVENUE' AS "ATTRIBUTE_NAME",
    						CASE WHEN ("VALUE"<=100 ) THEN '1' 
						    WHEN ("VALUE">100 and "VALUE"<=1000 ) THEN '2'
						    WHEN ("VALUE">1000 and "VALUE"<=10000 ) THEN '3'
						    WHEN ("VALUE">10000 ) THEN '4'
						    END AS "ATTRIBUTE_SORT_ORDER"
    						FROM :LT_OA_TEMP;
    						
    --BP Value
   /* LT_BP_VALUE         = SELECT
    						CUST_ID,INIT_DATE,END_DATE,
    						((YEAR("INIT_DATE")*100) + MONTH("INIT_DATE")) AS INIT_TS,
    						((YEAR("END_DATE")*100) + MONTH("END_DATE")) AS END_TS,
    						 CASE WHEN (TOTBPRELVNTVAL>=0 and TOTBPRELVNTVAL<150000 ) THEN '0 TO 150K'
    						 WHEN (TOTBPRELVNTVAL>=150000 and TOTBPRELVNTVAL<500000 ) THEN '150K TO 500K'
    						 WHEN (TOTBPRELVNTVAL>=500000 and TOTBPRELVNTVAL<1000000 ) THEN '500K TO 1M'
    						 WHEN (TOTBPRELVNTVAL>=1000000 and TOTBPRELVNTVAL<5000000 ) THEN '1M TO 5M'
    						 WHEN (TOTBPRELVNTVAL>=5000000 and TOTBPRELVNTVAL<15000000 ) THEN '5M TO 15M'
    						 WHEN (TOTBPRELVNTVAL>=15000000 ) THEN '15M+'
    						 END  AS "ATTRIBUTE_VALUE",
    						'CUSTOMER_SEGMENT' AS "ATTRIBUTE_NAME" 
    						FROM :LT_BP_VALUE_TEMP; */
    						
    --Customer Segments based on the tax amounts
    	LT_BP_TAX_TEMP =	SELECT	CUST_ID, 
								"INIT_DATE",
								"END_DATE",
								TAXAMOUNT FROM
									(SELECT *,  ROW_NUMBER() OVER(PARTITION BY CUST_ID ORDER BY END_DATE DESC) AS RN FROM
										(SELECT CUST_ID, 
											  MIN(TO_DATE(INIT_DATE)) AS "INIT_DATE",
											  MAX(TO_DATE(END_DATE)) AS "END_DATE",
											  TAXAMOUNT
											  FROM :LT_RESV_CUSTOMERS
											  GROUP BY CUST_ID,TAXAMOUNT)
										);
								 --WHERE RN=1 ;					  
    
    LT_BP_TAX_UNGROUPED = 	SELECT
    						CUST_ID,INIT_DATE,END_DATE,
    						((YEAR("INIT_DATE")*100) + MONTH("INIT_DATE")) AS INIT_TS,
    						((YEAR("END_DATE")*100) + MONTH("END_DATE")) AS END_TS,
    						CASE 
								WHEN TAXAMOUNT<=500 THEN 'Under $500'
								WHEN TAXAMOUNT>500 AND TAXAMOUNT<=1000 THEN '$500 to $1000'
								WHEN TAXAMOUNT>1000 AND TAXAMOUNT<=2500 THEN '$1000 to $2500'
								WHEN TAXAMOUNT>2500 AND TAXAMOUNT<=5000 THEN '$2500 to $5000'
								WHEN TAXAMOUNT>5000 AND TAXAMOUNT<=10000 THEN '$5000 to $10000'
								WHEN TAXAMOUNT>10000 AND TAXAMOUNT<=25000 THEN '$10000 to $25000'
								WHEN TAXAMOUNT>25000 AND TAXAMOUNT<=50000 THEN '$25000 to $50000'
								WHEN TAXAMOUNT>50000 AND TAXAMOUNT<=100000 THEN '$50000 to $100000'
								WHEN TAXAMOUNT>100000 AND TAXAMOUNT<=1000000 THEN '$100000 to $1M'
								WHEN TAXAMOUNT>1000000 THEN 'Over $1M'
							END as "ATTRIBUTE_VALUE",
							'CUSTOMER_SEGMENT' AS "ATTRIBUTE_NAME",
							CASE 
								WHEN TAXAMOUNT<=500 THEN '1'
								WHEN TAXAMOUNT>500 AND TAXAMOUNT<=1000 THEN '2'
								WHEN TAXAMOUNT>1000 AND TAXAMOUNT<=2500 THEN '3'
								WHEN TAXAMOUNT>2500 AND TAXAMOUNT<=5000 THEN '4'
								WHEN TAXAMOUNT>5000 AND TAXAMOUNT<=10000 THEN '5'
								WHEN TAXAMOUNT>10000 AND TAXAMOUNT<=25000 THEN '6'
								WHEN TAXAMOUNT>25000 AND TAXAMOUNT<=50000 THEN '7'
								WHEN TAXAMOUNT>50000 AND TAXAMOUNT<=100000 THEN '8'
								WHEN TAXAMOUNT>100000 AND TAXAMOUNT<=1000000 THEN '9'
								WHEN TAXAMOUNT>1000000 THEN '10'
							END as "ATTRIBUTE_SORT_ORDER"
    						FROM  :LT_BP_TAX_TEMP; 
    						
    						
    LT_BP_TAX = 		SELECT CUST_ID,
							TO_TIMESTAMP(MIN(INIT_DATE)) AS INIT_DATE, 
							TO_TIMESTAMP(MAX(END_DATE)) AS  END_DATE ,
							ATTRIBUTE_VALUE, 
							'CUSTOMER_SEGMENT' AS "ATTRIBUTE_NAME",
							((YEAR(TO_TIMESTAMP(MIN(INIT_DATE)))*100) + MONTH(TO_TIMESTAMP(MIN(INIT_DATE)))) AS INIT_TS,
    						((YEAR(TO_TIMESTAMP(MAX(END_DATE)))*100) + MONTH(TO_TIMESTAMP(MAX(END_DATE)))) AS END_TS,
    						MAX(ATTRIBUTE_SORT_ORDER) AS ATTRIBUTE_SORT_ORDER
							FROM   (	
									SELECT SQ.CUST_ID,  SQ.ATTRIBUTE_VALUE, 
            								SQ.INIT_DATE, SQ.END_DATE, SQ.ATTRIBUTE_SORT_ORDER,
            								SUM(CASE WHEN SQ.PVAL = SQ.ATTRIBUTE_VALUE THEN 0 ELSE 1 END ) OVER(ORDER BY CUST_ID, INIT_DATE) AS COUNTER 
    										FROM   
    											(
    												SELECT T.CUST_ID, T.INIT_DATE, T.END_DATE,T.ATTRIBUTE_VALUE, T.ATTRIBUTE_SORT_ORDER,
    														LAG(T.ATTRIBUTE_VALUE, 1, NULL) OVER(ORDER BY CUST_ID, INIT_DATE) AS PVAL 
            												FROM   :LT_BP_TAX_UNGROUPED T
            									) SQ 
											ORDER  BY SQ.CUST_ID, INIT_DATE
									) GROUP  BY CUST_ID, ATTRIBUTE_VALUE, COUNTER ;	
									
									
    -- Parcel Count
    LT_PARCEL_COUNT_RESV   =   SELECT 
									CUST_ID,INIT_DATE,END_DATE,
    								((YEAR("INIT_DATE")*100) + MONTH("INIT_DATE")) AS INIT_TS,
    								((YEAR("END_DATE")*100) + MONTH("END_DATE")) AS END_TS,
    								CASE  WHEN (PARCELCNT=0) THEN '0'
    									 WHEN (PARCELCNT>=1 and PARCELCNT<=2) THEN '01 to 02' 
    									 WHEN (PARCELCNT>=3 and PARCELCNT<=5) THEN '03 to 05' 
    									 WHEN (PARCELCNT>=6 and PARCELCNT<=15) THEN '06 to 15'
    									 WHEN (PARCELCNT>=16 and PARCELCNT<=55) THEN '16 to 55'
    									 WHEN (PARCELCNT>55) THEN '55 PLUS' 
    								END AS "ATTRIBUTE_VALUE",
    								'PARCEL_COUNT' AS "ATTRIBUTE_NAME"
    							FROM :LT_ALL_RESV_ALL_CUSTOMER;
    							
   LT_PARCEL_COUNT = SELECT CUST_ID,
							TO_TIMESTAMP(MIN(INIT_DATE)) AS INIT_DATE, 
							TO_TIMESTAMP(MAX(END_DATE)) AS  END_DATE ,
							ATTRIBUTE_VALUE, 
							'PARCEL_COUNT' AS "ATTRIBUTE_NAME",
							((YEAR(TO_TIMESTAMP(MIN(INIT_DATE)))*100) + MONTH(TO_TIMESTAMP(MIN(INIT_DATE)))) AS INIT_TS,
    						((YEAR(TO_TIMESTAMP(MAX(END_DATE)))*100) + MONTH(TO_TIMESTAMP(MAX(END_DATE)))) AS END_TS					
							FROM   (	
									SELECT SQ.CUST_ID,  SQ.ATTRIBUTE_VALUE, 
            								SQ.INIT_DATE, SQ.END_DATE, 
            								SUM(CASE WHEN SQ.PVAL = SQ.ATTRIBUTE_VALUE THEN 0 ELSE 1 END ) OVER(ORDER BY CUST_ID, INIT_DATE) AS COUNTER 
    										FROM   
    											(
    												SELECT T.CUST_ID, T.INIT_DATE, T.END_DATE,T.ATTRIBUTE_VALUE, 
    														LAG(T.ATTRIBUTE_VALUE, 1, NULL) OVER(ORDER BY CUST_ID, INIT_DATE) AS PVAL 
            												FROM   :LT_PARCEL_COUNT_RESV T
            									) SQ 
											ORDER  BY SQ.CUST_ID, INIT_DATE
									) GROUP  BY CUST_ID, ATTRIBUTE_VALUE, COUNTER ;		
    -- First Time Tax Payer
    LT_NOIA_PER_CUST = SELECT CUST_ID, CASE WHEN MAX(NOIA_DATE) = '00000000' THEN NULL ELSE MAX(NOIA_DATE) END AS NOIA_DATE FROM :LT_ALL_RESV_ALL_CUSTOMER GROUP BY CUST_ID;
    
    LT_NOIA_WITH_FIN_YEAR = SELECT CUST_ID , NOIA_DATE , 'Yes' AS ATTRIBUTE_VALUE,
									CASE WHEN MONTH(NOIA_DATE) < 7 THEN CONCAT((YEAR(NOIA_DATE) -1 ),'0701') 
										 WHEN MONTH(NOIA_DATE) >= 7 THEN  CONCAT((YEAR(NOIA_DATE)),'0701') 
										 WHEN NOIA_DATE IS NULL THEN  (SELECT MIN(INIT_DATE) FROM :LT_ALL_RESV_ALL_CUSTOMER WHERE CUST_ID = T1.CUST_ID AND TAXAMOUNT > 0)  
									END AS INIT_DATE ,
									CASE WHEN MONTH(NOIA_DATE) >= 7 THEN CONCAT((YEAR(NOIA_DATE) + 1 ),'0630') 
										WHEN  MONTH(NOIA_DATE) < 7 THEN  CONCAT((YEAR(NOIA_DATE)),'0630') 
								   	    WHEN NOIA_DATE IS NULL THEN  (SELECT MIN(END_DATE) FROM :LT_ALL_RESV_ALL_CUSTOMER WHERE CUST_ID = T1.CUST_ID AND TAXAMOUNT > 0) 
								    END AS END_DATE 
							FROM :LT_NOIA_PER_CUST T1;
							
	LT_DISTINCT_RESV = SELECT DISTINCT CUST_ID , INIT_DATE, END_DATE FROM :LT_ALL_RESV_ALL_CUSTOMER;
	
	LT_FIRST_TIME_TP_UNGROUPED = SELECT CUST_ID,INIT_DATE,END_DATE,
    									 CASE WHEN ATTRIBUTE_VALUE IS NULL THEN 'No' 
    										  ELSE ATTRIBUTE_VALUE  END AS "ATTRIBUTE_VALUE",
    									'FIRST_TIME_TAX_PAYER' AS "ATTRIBUTE_NAME" 
    									 FROM 
    										(
												SELECT A.CUST_ID, A.INIT_DATE, A. END_DATE, ATTRIBUTE_VALUE 
												FROM :LT_DISTINCT_RESV A 
												LEFT JOIN :LT_NOIA_WITH_FIN_YEAR B 
												ON A.CUST_ID = B.CUST_ID AND A.INIT_DATE = B.INIT_DATE AND A.END_DATE = B.END_DATE 
											);
	LT_FIRST_TIME_TP = SELECT CUST_ID,
						   	  TO_TIMESTAMP(MIN(INIT_DATE)) AS INIT_DATE, 
							  TO_TIMESTAMP(MAX(END_DATE)) AS  END_DATE ,
						      ATTRIBUTE_VALUE, 
							 'FIRST_TIME_TAX_PAYER' AS "ATTRIBUTE_NAME",
							  ((YEAR(TO_TIMESTAMP(MIN(INIT_DATE)))*100) + MONTH(TO_TIMESTAMP(MIN(INIT_DATE)))) AS INIT_TS,
    						  ((YEAR(TO_TIMESTAMP(MAX(END_DATE)))*100) + MONTH(TO_TIMESTAMP(MAX(END_DATE)))) AS END_TS					
							 FROM  
								(	
									SELECT SQ.CUST_ID,  SQ.ATTRIBUTE_VALUE, SQ.INIT_DATE, SQ.END_DATE, 
            								SUM(CASE WHEN SQ.PVAL = SQ.ATTRIBUTE_VALUE THEN 0 ELSE 1 END ) OVER(ORDER BY CUST_ID, INIT_DATE) AS COUNTER 
    										FROM   
    											(
    												SELECT T.CUST_ID, T.INIT_DATE, T.END_DATE,T.ATTRIBUTE_VALUE, 
    														LAG(T.ATTRIBUTE_VALUE, 1, NULL) OVER(ORDER BY CUST_ID, INIT_DATE) AS PVAL 
            												FROM   :LT_FIRST_TIME_TP_UNGROUPED T
            									) SQ 
											ORDER  BY SQ.CUST_ID, INIT_DATE
								) GROUP  BY CUST_ID, ATTRIBUTE_VALUE, COUNTER ;	

	-- PPR POSTCODE
	BUT021FS =			SELECT PARTNER,ADR_KIND, ADDRNUMBER,
							CASE ADR_KIND WHEN 'LTX_AD2' THEN 1 
										  WHEN 'LTX_ADD' THEN 2 
										  WHEN 'XXDEFAULT' THEN 3 
										  ELSE NULL END AS ADR_PRIORITY,
							CASE WHEN LEFT(VALID_FROM,8) LIKE '10%'  or 
									  LEFT(VALID_FROM,8) = '10101000' or 
									  LEFT(VALID_FROM,8) = '10325000' or 
									  LEFT(VALID_FROM,8) = '10103000' or 
									  LEFT(VALID_FROM,8) = '21212030' THEN TO_TIMESTAMP(CAST('20100701' AS DATE))
								 ELSE TO_TIMESTAMP(cast(LEFT(VALID_FROM,8) as date)) END AS VALID_FROM,
							CASE WHEN LEFT(VALID_TO,8) LIKE '10%'  or 
									  LEFT(VALID_TO,8) = '10101000' or 
									  LEFT(VALID_TO,8) = '10325000' or 
									  LEFT(VALID_TO,8) = '10103000' or 
									  LEFT(VALID_TO,8) = '21212030' THEN TO_TIMESTAMP(CAST('20100701' AS DATE))
								 ELSE TO_TIMESTAMP(cast(LEFT(VALID_TO,8) as date)) END AS  VALID_TO
						FROM "osr.edw.staging.md.rms.proxy.synonym::CV_BUT021FS" inner join
						"db::app.Customer" ON EXT_ID = PARTNER
						WHERE ADR_KIND IN ('LTX_ADD', 'LTX_AD2', 'XXDEFAULT');
	
	ADR_PRIORITY =		 SELECT A.PARTNER, A.ADDRNUMBER, A.VALID_FROM, A.VALID_TO, valid_to_prev,a.ADR_PRIORITY
            			 FROM                                  
                			(
                				SELECT PARTNER,  VALID_FROM , VALID_TO,ADR_PRIORITY, ADDRNUMBER, add_Days(valid_from, -1) valid_to_prev 
                					FROM :BUT021FS --WHERE PARTNER = '0002555288'
                			) A
                         INNER JOIN
                             (
                            	SELECT PARTNER,MIN(ADR_PRIORITY) AS ADR_PRIORITY , VALID_FROM FROM :BUT021FS
                                       GROUP BY PARTNER, VALID_FROM ORDER BY VALID_FROM 
                             ) B
                         ON A.PARTNER = B.PARTNER AND A.ADR_PRIORITY= B.ADR_PRIORITY AND A.VALID_FROM = B.VALID_FROM;
                         
    BUT021TEMPDATE =  SELECT T1.*, (SELECT MIN(adr_priority) FROM :BUT021FS WHERE VALID_FROM <= t1.VALID_TO AND PARTNER = T1.PARTNER) as ABC from :BUT021FS t1;
    
    LT_PPR_TEMP =     SELECT  DISTINCT A.* FROM 
    							:ADR_PRIORITY A 
    							INNER  JOIN 
    							:BUT021TEMPDATE b 
    							on A.ADR_PRIORITY = B.ABC AND A.ADDRNUMBER = B.ADDRNUMBER AND A.PARTNER = B.PARTNER AND A. VALID_FROM = B.VALID_FROM ;
    
    LT_PPR_FROMADRC = SELECT  DISTINCT TO_INT(PARTNER) AS CUST_ID , a.ADDRNUMBER,
                                       TO_TIMESTAMP(VALID_FROM) as INIT_DATE,
                                       TO_TIMESTAMP(VALID_TO) as END_DATE,
                                       ((YEAR(TO_TIMESTAMP(VALID_FROM))*100) + MONTH(TO_TIMESTAMP(VALID_FROM))) AS INIT_TS,
                                       ((YEAR(TO_TIMESTAMP(VALID_FROM))*100) + MONTH(TO_TIMESTAMP(VALID_FROM))) AS END_TS,
                                       POST_CODE1 AS "ATTRIBUTE_VALUE",
                                       'PPR_POSTCODE' AS "ATTRIBUTE_NAME"
                                       FROM  :LT_PPR_TEMP a
                                       INNER JOIN "osr.edw.staging.md.rms.proxy.synonym::CV_ADRC" b
                                       on a.ADDRNUMBER=b.ADDRNUMBER;
                                       
	LT_PPR_CODE =	SELECT CUST_ID,
					TO_TIMESTAMP(MIN(INIT_DATE)) AS INIT_DATE, 
					TO_TIMESTAMP(MAX(END_DATE)) AS  END_DATE ,
					ATTRIBUTE_VALUE, 
					'PPR_POSTCODE' AS "ATTRIBUTE_NAME",
					((YEAR(TO_TIMESTAMP(MIN(INIT_DATE)))*100) + MONTH(TO_TIMESTAMP(MIN(INIT_DATE)))) AS INIT_TS,
    				((YEAR(TO_TIMESTAMP(MAX(END_DATE)))*100) + MONTH(TO_TIMESTAMP(MAX(END_DATE)))) AS END_TS					
						FROM   (	
									SELECT SQ.CUST_ID,  SQ.ATTRIBUTE_VALUE, 
            								SQ.INIT_DATE, SQ.END_DATE, 
            								SUM(CASE WHEN SQ.PVAL = SQ.ATTRIBUTE_VALUE THEN 0 ELSE 1 END ) OVER(ORDER BY CUST_ID, INIT_DATE) AS COUNTER 
    										FROM   
    											(
    												SELECT T.CUST_ID, T.INIT_DATE, T.END_DATE,T.ATTRIBUTE_VALUE, 
    														LAG(T.ATTRIBUTE_VALUE, 1, NULL) OVER(ORDER BY CUST_ID, INIT_DATE) AS PVAL 
            												FROM   :LT_PPR_FROMADRC T
            									) SQ 
											ORDER  BY SQ.CUST_ID, INIT_DATE
								) GROUP  BY CUST_ID, ATTRIBUTE_VALUE, COUNTER ;

						
	-- Customer Attributes Table
	LT_CUST_ATTRIBUTES  = ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  INIT_DATE,
						  END_DATE,
						  INIT_TS,
						  END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_CUSTOMER_AGE_GROUP AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  
						  -- Union one last entry till end of time for all customer 
						  -- Age Group as Not Applicable
						  UNION
						  
						  ( SELECT DISTINCT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  'Not Applicable' AS "ATTRIBUTE_VALUE",
						   ADD_DAYS(MAX(END_DATE) OVER(PARTITION BY CUST_ID),1) AS INIT_DATE,
						  TO_TIMESTAMP(TO_DATE('99991231')) AS END_DATE,
						  MAX(END_TS) OVER(PARTITION BY CUST_ID) AS INIT_TS,
						  999912 AS END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_CUSTOMER_AGE_GROUP AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  
						   UNION
						  
						  -- UNION for CustomerAttributes for year where there were no entry in RESV table
						   -- Age Group would be Not Applicable where  there is no entry in RESV
						   (SELECT 
						    CUST_ID, 
					        ATTRIBUTE_ID,
						   'Not Applicable' AS "ATTRIBUTE_VALUE",
							TO_TIMESTAMP(CONCAT(YEAR_LAG, '0701')) AS INIT_DATE,
							TO_TIMESTAMP(CONCAT(YEAR_CURR,'0630')) AS END_DATE,
							YEAR_LAG*100 + 07  AS INIT_TS,
							YEAR_CURR*100 + 06 AS END_TS,
							NULL AS ATTRIBUTE_SORT_ORDER
						     FROM (
									SELECT A.* ,B.*, LAG(YEAR(END_DATE)) OVER(PARTITION BY CUST_ID ORDER BY INIT_DATE) YEAR_LAG,
									YEAR(INIT_DATE) YEAR_CURR FROM :LT_CUSTOMER_AGE_GROUP A
				    				INNER JOIN "db::app.AttributeTypes" AS B
									ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME
								) WHERE YEAR_LAG != YEAR_CURR AND YEAR_LAG< YEAR_CURR)
						  
						  UNION
						  
						  ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  INIT_DATE,
						  END_DATE,
						  INIT_TS,
						  END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_PARTNER_TYPE AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						   -- Union one last entry till end of time for all customer 
						  --  Partner type -> extend last partner type entry to End of time
						  UNION
						  
						  ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  ADD_DAYS(MAX(END_DATE) OVER(PARTITION BY CUST_ID),1) AS INIT_DATE,
						  TO_TIMESTAMP(TO_DATE('99991231')) AS END_DATE,
						  MAX(END_TS) OVER(PARTITION BY CUST_ID) AS INIT_TS,
						  999912 AS END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM (SELECT * , ROW_NUMBER() OVER(PARTITION BY CUST_ID ORDER BY END_DATE DESC) RN FROM :LT_PARTNER_TYPE) AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME WHERE RN = 1 
						  )
						  
						  UNION
						  
						  -- UNION for CustomerAttributes for year where there were no entry in RESV table
						   -- Partner type would be the last type which was there in RESV
						   (SELECT 
						    CUST_ID, 
					        ATTRIBUTE_ID,
						    VALUE_LAG AS ATTRIBUTE_VALUE,
							TO_TIMESTAMP(CONCAT(YEAR_LAG, '0701')) AS INIT_DATE,
							TO_TIMESTAMP(CONCAT(YEAR_CURR,'0630')) AS END_DATE,
							YEAR_LAG*100 + 07  AS INIT_TS,
							YEAR_CURR*100 + 06 AS END_TS,
							NULL AS ATTRIBUTE_SORT_ORDER
						     FROM (
									SELECT A.* ,B.*, LAG(YEAR(END_DATE)) OVER(PARTITION BY CUST_ID ORDER BY INIT_DATE) YEAR_LAG,
									LAG(ATTRIBUTE_VALUE) OVER(PARTITION BY CUST_ID ORDER BY INIT_DATE) VALUE_LAG,
									YEAR(INIT_DATE) YEAR_CURR FROM :LT_PARTNER_TYPE A
				    				INNER JOIN "db::app.AttributeTypes" AS B
									ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME
								) WHERE YEAR_LAG != YEAR_CURR AND YEAR_LAG< YEAR_CURR)
							
						  UNION 
						  ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  INIT_DATE,
						  END_DATE,
						  INIT_TS,
						  END_TS,
						  ATTRIBUTE_SORT_ORDER
						  --FROM :LT_BP_VALUE AS A
						  FROM :LT_BP_TAX AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  
						   -- Union one last entry till end of time for all customer 
						  -- Annual Liability of last line item should be 0 , means <$500 category
						  UNION
						  
						  ( SELECT DISTINCT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  'Under $500' AS "ATTRIBUTE_VALUE",
						   ADD_DAYS(MAX(END_DATE) OVER(PARTITION BY CUST_ID),1) AS INIT_DATE,
						  TO_TIMESTAMP(TO_DATE('99991231')) AS END_DATE,
						  MAX(END_TS) OVER(PARTITION BY CUST_ID) AS INIT_TS,
						  999912 AS END_TS,
						  '1' AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_BP_TAX AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  
						  UNION
						  -- UNION for CustomerAttributes for year where there were no entry in RESV table
						   -- Annual LIability  for those years would be 0 (Under $500)
						   (SELECT 
						    CUST_ID, 
					        ATTRIBUTE_ID,
						    'Under $500' AS ATTRIBUTE_VALUE,
							TO_TIMESTAMP(CONCAT(YEAR_LAG, '0701')) AS INIT_DATE,
							TO_TIMESTAMP(CONCAT(YEAR_CURR,'0630')) AS END_DATE,
							YEAR_LAG*100 + 07  AS INIT_TS,
							YEAR_CURR*100 + 06 AS END_TS,
							'1' AS ATTRIBUTE_SORT_ORDER
						     FROM (
									SELECT A.* ,B.*, LAG(YEAR(END_DATE)) OVER(PARTITION BY CUST_ID ORDER BY INIT_DATE) YEAR_LAG, 
									YEAR(INIT_DATE) YEAR_CURR FROM :LT_BP_TAX A
				    				INNER JOIN "db::app.AttributeTypes" AS B
									ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME
								) WHERE YEAR_LAG != YEAR_CURR AND YEAR_LAG< YEAR_CURR)
							
						  UNION 
						  
						  ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  INIT_DATE,
						  END_DATE,
						  INIT_TS,
						  END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_PARCEL_COUNT AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						   -- Union one last entry till end of time for all customer 
						  -- Parcel count of last line item should be 0 , means  a new category as 0
						  UNION
						  
						  ( SELECT DISTINCT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  '0' AS "ATTRIBUTE_VALUE",
						   ADD_DAYS(MAX(END_DATE) OVER(PARTITION BY CUST_ID),1) AS INIT_DATE,
						  TO_TIMESTAMP(TO_DATE('99991231')) AS END_DATE,
						  MAX(END_TS) OVER(PARTITION BY CUST_ID) AS INIT_TS,
						  999912 AS END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_PARCEL_COUNT AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  
						   UNION
						   -- UNION for CustomerAttributes for year where there were no entry in RESV table
						   -- Parcel count for those years would be 0
						   (SELECT 
						    CUST_ID, 
					        ATTRIBUTE_ID,
						    '0' AS ATTRIBUTE_VALUE,
							TO_TIMESTAMP(CONCAT(YEAR_LAG, '0701')) AS INIT_DATE,
							TO_TIMESTAMP(CONCAT(YEAR_CURR,'0630')) AS END_DATE,
							YEAR_LAG*100 + 07  AS INIT_TS,
							YEAR_CURR*100 + 06 AS END_TS,
							NULL AS ATTRIBUTE_SORT_ORDER
						     FROM (
									SELECT A.* ,B.*, LAG(YEAR(END_DATE)) OVER(PARTITION BY CUST_ID ORDER BY INIT_DATE) YEAR_LAG, 
									YEAR(INIT_DATE) YEAR_CURR FROM :LT_PARCEL_COUNT A
				    				INNER JOIN "db::app.AttributeTypes" AS B
									ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME
								) WHERE YEAR_LAG != YEAR_CURR AND YEAR_LAG< YEAR_CURR)
							
							UNION 
							
						  ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  INIT_DATE,
						  END_DATE,
						  INIT_TS,
						  END_TS,
						  ATTRIBUTE_SORT_ORDER
						  FROM :LT_OUT_AMT AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  
						   UNION
						  
						  ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  INIT_DATE,
						  END_DATE,
						  INIT_TS,
						  END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_FIRST_TIME_TP AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  -- Union one last entry till end of time for all customer 
						  -- FTTP of last line item should be No
						  UNION
						  
						  ( SELECT DISTINCT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  'No' AS "ATTRIBUTE_VALUE",
						   ADD_DAYS(MAX(END_DATE) OVER(PARTITION BY CUST_ID),1) AS INIT_DATE,
						  TO_TIMESTAMP(TO_DATE('99991231')) AS END_DATE,
						  MAX(END_TS) OVER(PARTITION BY CUST_ID) AS INIT_TS,
						  999912 AS END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_FIRST_TIME_TP AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  
						   UNION
						   -- UNION for CustomerAttributes for year where there were no entry in RESV table
						   -- First time TP for those year would be No
						   (SELECT 
						    CUST_ID, 
					        ATTRIBUTE_ID,
						    'No' AS "ATTRIBUTE_VALUE",
							TO_TIMESTAMP(CONCAT(YEAR_LAG, '0701')) AS INIT_DATE,
							TO_TIMESTAMP(CONCAT(YEAR_CURR,'0630')) AS END_DATE,
							YEAR_LAG*100 + 07  AS INIT_TS,
							YEAR_CURR*100 + 06 AS END_TS,
							NULL AS ATTRIBUTE_SORT_ORDER
						     FROM (
									SELECT A.* ,B.*, LAG(YEAR(END_DATE)) OVER(PARTITION BY CUST_ID ORDER BY INIT_DATE) YEAR_LAG, 
									YEAR(INIT_DATE) YEAR_CURR FROM :LT_FIRST_TIME_TP A
				    				INNER JOIN "db::app.AttributeTypes" AS B
									ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME
								) WHERE YEAR_LAG != YEAR_CURR AND YEAR_LAG< YEAR_CURR)
							
							UNION 
						  ( SELECT CUST_ID,
						  B.ATTRIBUTE_ID AS "ATTRIBUTE_ID",
						  ATTRIBUTE_VALUE,
						  INIT_DATE,
						  END_DATE,
						  INIT_TS,
						  END_TS,
						  NULL AS ATTRIBUTE_SORT_ORDER
						  FROM :LT_PPR_CODE AS A
						  INNER JOIN "db::app.AttributeTypes" AS B
						  ON A."ATTRIBUTE_NAME" = B.ATTRIBUTE_NAME )
						  ;
						  

	--Delete any existing records from the table before extracting and populating the Customer Attributes
	TRUNCATE TABLE "db::app.CustomerAttributes";

	UPSERT "db::app.CustomerAttributes"
	("CUST_ID",
	"ATTRIBUTE_ID",
	"ATTRIBUTE_VALUE",
	"INIT_DATE",
	"END_DATE",
	"INIT_TIME_SEGMENT",
	"END_TIME_SEGMENT",
	"ATTRIBUTE_SORT_ORDER"
	)
    SELECT CUST_ID,
		   ATTRIBUTE_ID,
		   ATTRIBUTE_VALUE,
		   INIT_DATE,
		   END_DATE,
		   INIT_TS,
		   END_TS,
		   ATTRIBUTE_SORT_ORDER
		   FROM :LT_CUST_ATTRIBUTES;
	select max(Z_RUN_SEQ_ID) INTO LV_NEW_MAX_SEQ_ID from "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	
	CALL "procedures.utils::PR_UPDATE_SEQ_ID_FOR_MASTERDATA"(
		IV_SEQ_ID=> :LV_NEW_MAX_SEQ_ID,
		IV_ENTITY_NAME=>:LV_ENTITY_NAME
	);					
						  
END