PROCEDURE "procedures.masterData::PR_EXTRACT_LT_CUSTOMER_REACTIONS" (
		IN MODE INT DEFAULT 1, IN YEAR NVARCHAR(4) DEFAULT '%', IN MONTH NVARCHAR(4) DEFAULT '%' )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN


	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
  /*********************************************************************
		DFKKOP - Item table for Contract Account Document
			KOFIZ - Account Determination ID - ('LT' for LandTax)
			BETRH - Net Due Amount
			FAEDN - Due date for net payment
			AUGDT - Clearing Date
			PERSL - Key for Period Assignment(e.g. If Assessment was done for 2010 then Period key would be 2011 here)
			HVORG - Main Transaction for Line Item ('4000'  Assessment - TAA)
			AUGBT - Clearing amount in clearing currency 
			
		
		 1 - Get those entry from DFKKOP which are relevant for LandTax(KOFIZ = LT) with Main Transaction as Assessment(HVORG = 4000)
		 2 - Group By Customer Id and Period Key(PERSL) on Above data. After step 2, We will have data Max Due Date(FAEDn), Max Clearing Date(AUGDT), Sum of DueAmount(BETRH), Sum of Cleared Amount(AUGBT) Per Cust_id per Period Key.
		 3 - Check if A customer is a debtor or not in a Period Key(PERSL)
			 - If Sum of Dueamount in a Period Key > Sum Of Cleared Amount in that period key (Means Payment was not done or partially done )
				Check if MAX Due Date > Current Date
						 Customer is a Debtor
					  Else
						 Customer is not a debtor
			 - Else (Sum of DueAmount is equal to Sum of Cleared Amount)
				Check if max Clearing Date > Max Due Date
						Customer is a Debtor
					  Else 
						 Customer is not a debtor
************************************************************************/
  LT_DUE_DATE = 	SELECT   DEBTOR_DATA.OPBEL, TAXPAYER.CUST_ID AS "CUST_ID", BETRH , 
							 DEBTOR_DATA.FAEDN, AUGDT,  CASE WHEN AUGVD = '00000000' THEN NULL ELSE AUGVD END AS AUGVD, AUGBT, AUGBL, PERSL,DEBTOR_DATA.FBNUM, B.FAEDN AS INV_DUEDATE, 
							 B3.DueDate as EPODueDate, CASE WHEN B4.REISSUE_DUE_DATE = '00000000' THEN NULL ELSE B4.REISSUE_DUE_DATE END AS REISSUE_DUE_DATE
						   	 FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" DEBTOR_DATA 
							 INNER JOIN
						     "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKINVDOC_H" B 
							 ON  DEBTOR_DATA.XBLNR =  CAST(LPAD(B.INVDOCNO,16,0) AS VARCHAR)
							 LEFT JOIN
							 (
								SELECT  B2.OPBEL, DueDate  FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" A2 
								INNER JOIN 
								(
									SELECT  PPKEY, OPBEL, DueDate FROM (SELECT DISTINCT A1.PPKEY, opbel, DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPP" A1
									INNER JOIN 	
									(
										SELECT PPKEY,MAX(PRDAT) as DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPD" GROUP BY PPKEY
									) B1 on A1.PPKEY = B1.PPKEY )
								) B2
								ON A2.PPKEY = B2.PPKEY WHERE PPCAT = 'Z7' AND PPSTA in ('1','')
							) B3 
							ON DEBTOR_DATA.OPBEL = B3.OPBEL
							LEFT JOIN
							"osr.edw.staging.td.rms.proxy.synonym::CV_LTAXASFB" B4
							ON B4.ASSESS_FBNUM = DEBTOR_DATA.FBNUM
							INNER JOIN 
							"db::app.Customer" TAXPAYER ON TAXPAYER.EXT_ID = DEBTOR_DATA.GPART
							 WHERE  KOFIZ='LT' AND HVORG = '4000'  AND TVORG IN ('0150');
  
  LV_REACTIONS = SELECT CUST_ID, 'DEBTOR_INITIAL_ASSESSMENT' AS "REACTION_TYPE", 1 AS "REACTION_VALUE",
			    TO_TIMESTAMP(DUE_DATE) AS "END_DATE",
				TO_TIMESTAMP(DUE_DATE) AS "INIT_DATE",
				TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "INIT_TS",
				TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "END_TS"
				FROM 
				( 					
					SELECT CUST_ID , "functions::TF_LT_CHECK_IF_TP_DEBTOR"(CLEARED_DATE, DUE_DATE,RAPT_CLEAR_DATE, RAPT_CLEAR_AMOUNT,DUEAMOUNT,CLEAREDAMOUNT).ISDEBTOR AS ISDEBTOR, DUE_DATE 
					FROM	(
							SELECT CUST_ID, MAX(OPBEL) OPBEL, MAX(CLEARING_DATE) AS CLEARED_DATE, MAX(DUE_DATE) AS DUE_DATE , SUM(BETRH) AS DUEAMOUNT, SUM(AUGBT) AS CLEAREDAMOUNT
							FROM	(					
								SELECT A8.OPBEL ,COALESCE(PAYMENT_DATE, A8.AUGVD, A8.AUGDT) AS CLEARING_DATE , CUST_ID AS "CUST_ID", A8.BETRH , 
										A8.FAEDN, A8.AUGDT, A8.AUGBT, A8.PERSL,A8.FBNUM, INV_DUEDATE,  EPODueDate, REISSUE_DUE_DATE , 
										COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE) as DUE_DATE
										FROM :LT_DUE_DATE AS A8--AND TAXPAYER.CUST_ID = 1275802  
										LEFT JOIN
										(
											SELECT AUGBL,  CASE WHEN MAX(FAEDN) = '00000000' THEN NULL ELSE MAX(FAEDN) END AS PAYMENT_DATE FROM 
											"osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" A6 
											 WHERE AUGBL IN ( SELECT AUGBL from  "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" WHERE AUGBL != '' )
												AND A6.HVORG = '5000' GROUP BY AUGBL 
										) B8 
										ON A8.AUGBL = B8.AUGBL
									)
									GROUP BY CUST_ID,OPBEL 
							) A11
							LEFT JOIN
							(
								SELECT MAX(OPBEL) RAPT_OPBEL , SUM(AUGBT) RAPT_CLEAR_AMOUNT, MAX(AUGDT) RAPT_CLEAR_DATE FROM 
									(
										SELECT	RAPT.OPBEL ,AUGDT , AUGBT  	FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKRAPT" RAPT 
										INNER JOIN
										(
											SELECT OPBEL , MAX(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) as DUE_DATE from :LT_DUE_DATE   GROUP BY OPBEL	 --AND 
										) RAPT_DUE_DATE_TABLE ON RAPT_DUE_DATE_TABLE.OPBEL = RAPT.OPBEL
										WHERE AUGRD IN ('01','15') AND RAPT.AUGDT <= RAPT_DUE_DATE_TABLE.DUE_DATE
									)
									GROUP BY OPBEL 
							) B10 ON A11.OPBEL = B10.RAPT_OPBEL 
				) WHERE ISDEBTOR = 1;
  
  
  
  IF MODE=1 THEN
		--Delete any existing records from the table before extracting and populating the Customer Reactions
		TRUNCATE TABLE "db::app.CustomerReactions";
		UPSERT "db::app.CustomerReactions" (
		"CUST_ID",
		"REACTION_TYPE",
		"REACTION_VALUE",
		"END_DATE",
		"INIT_DATE",
		"INIT_TS",
		"END_TS" )
      	  SELECT * FROM :LV_REACTIONS;
	ELSEIF MODE=2 THEN
		--Delete any existing records for the input year from the table before extracting and populating the Customer Reactions
		DELETE FROM "db::app.CustomerReactions" WHERE INIT_TS LIKE CONCAT(YEAR, '%');
		UPSERT "db::app.CustomerReactions" (
		"CUST_ID",
		"REACTION_TYPE",
		"REACTION_VALUE",
		"END_DATE",
		"INIT_DATE",
		"INIT_TS",
		"END_TS" )
      	  SELECT * FROM :LV_REACTIONS WHERE INIT_TS LIKE CONCAT(YEAR, '%');
		
	ELSEIF MODE =3 THEN
		--Delete any existing records of the selected month and year from the table before extracting and populating the Customer Reactions
		DELETE FROM "db::app.CustomerReactions" WHERE INIT_TS LIKE CONCAT(YEAR, MONTH);
			UPSERT "db::app.CustomerReactions" (
		"CUST_ID",
		"REACTION_TYPE",
		"REACTION_VALUE",
		"END_DATE",
		"INIT_DATE",
		"INIT_TS",
		"END_TS" )
      	  SELECT * FROM :LV_REACTIONS WHERE INIT_TS LIKE CONCAT(YEAR, MONTH);
	ELSEIF MODE = 4 THEN
	--DELTA LOAD LOGIC
END IF;
  


  

END