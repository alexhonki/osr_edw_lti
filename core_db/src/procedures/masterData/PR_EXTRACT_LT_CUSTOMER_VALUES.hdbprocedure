PROCEDURE "procedures.masterData::PR_EXTRACT_LT_CUSTOMER_VALUES" ( 
IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
/*********************************************************************
DFKKOP - Item table for Contract Account Document
	KOFIZ - Account Determination ID - ('LT' for LandTax)
	BETRH - Net Due Amount
	FAEDN - Due date for net payment
	AUGDT - Clearing Date
	PERSL - Key for Period Assignment(e.g. If Assessment was done for 2010 then Period key would be 2011 here)
	HVORG - Main Transaction for Line Item ('4000'  Assessment - TAA)
	AUGBT - Clearing amount in clearing currency 
	

 1 - Get those entry from DFKKOP which are relevant for LandTax(KOFIZ = LT) with Main Transaction as Assessment(HVORG = 4000)
 2 - Group By Customer Id and Period Key(PERSL) on Above data. After step 2, We will have data Max Due Date(FAEDn), Max Clearing Date(AUGDT), Sum of DueAmount(BETRH), Sum of Cleared Amount(AUGBT) Per Cust_id per Period Key.
 3 - To get Customer values(Revenue at Risk ), Subtract Cleared Amount by Due Amount(DueAmount - ClearedAmount) - this will give us Customer Values for that Period Key
************************************************************************/
   
    
  
   DECLARE LV_VALUE_ID INT;
    DECLARE LV_LAST_MAX_SEQ_ID INTEGER;
   DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
   DECLARE LV_ENTITY_NAME CONSTANT NVARCHAR(500) :='CUSTOMER';
   DECLARE LV_EVENT NVARCHAR(500);
   DECLARE LV_CUST_COUNT INTEGER;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	LV_EVENT = '';
	CALL "procedures.utils::PR_DELETE_ALL_MASTERDATA"(:IV_MODE, :LV_ENTITY_NAME);
	SELECT OUT_MAX_SEQ_ID into LV_LAST_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_MASTERDATA"(:LV_ENTITY_NAME);
	IF LV_LAST_MAX_SEQ_ID IS NULL THEN
		LV_LAST_MAX_SEQ_ID = 0;
	END IF;
	IF LV_LAST_MAX_SEQ_ID = 0 THEN
	LT_CUST_EDITED = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	ELSE
	LT_CUST_EDITED = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_LAST_MAX_SEQ_ID;
	LT_CUST_ID_EDITED = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED;
	END IF;
	SELECT TOP 1 VALUE_ID INTO LV_VALUE_ID FROM "db::app.ValueTypes";
	-- RESV entries to get Customer Records
	LT_RESV_CUSTOMERS = SELECT TO_BIGINT("ZZ_PARTNER") AS CUST_ID, ZZ_PARTNER AS EXT_ID, INIT_DATE, END_DATE
							FROM 
							(
								SELECT ZZ_PARTNER,MIN(TO_DATE("TAXYRSTARTDT")) AS "INIT_DATE", MAX(TO_DATE("TAXYRENDDT")) AS "END_DATE", --MAX(TO_DATE('99991231')) AS "END_DATE",
									   MAX(TO_TIMESTAMP(CONCAT(CONCAT(TO_VARCHAR(TO_DATE(CHDATE)),' '),TO_VARCHAR(TO_TIME(CHTIME))))) AS "CREATED.DATE"
							       FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" AS A 
							        WHERE  A.TAXAMOUNT > 0 AND ZZ_PARTNER IN (SELECT ZZ_PARTNER FROM :LT_CUST_EDITED)
									GROUP BY A.ZZ_PARTNER
							);
	-- Distinct Customers To be used for CustomerrValues
	LT_RESV_CUSTOMERS_DISTINCT = SELECT DISTINCT CUST_ID, EXT_ID FROM :LT_RESV_CUSTOMERS;
    
    
	LT_DUE_DATES_PER_OPBEL = SELECT  TAXPAYER.CUST_ID AS "CUST_ID", DEBTOR_DATA.GPART, BETRH , DEBTOR_DATA.FAEDN, DEBTOR_DATA.OPBEL, AUGDT, AUGBT, PERSL,
								       B.FAEDN AS INV_DUEDATE, 
								     			B3.DueDate as EPODueDate, CASE WHEN B4.REISSUE_DUE_DATE = '00000000' THEN NULL ELSE B4.REISSUE_DUE_DATE END AS REISSUE_DUE_DATE
									FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" DEBTOR_DATA 
									   INNER JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_DFKKINVDOC_H" B 
												ON  DEBTOR_DATA.XBLNR =  CAST(LPAD(B.INVDOCNO,16,0) AS VARCHAR)
													LEFT JOIN
												(SELECT  B2.OPBEL, DueDate  FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" A2 
														INNER JOIN 
												(SELECT  PPKEY, OPBEL, DueDate FROM (SELECT DISTINCT A1.PPKEY, opbel, DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPP" A1
														INNER JOIN 	
												(SELECT PPKEY,MAX(PRDAT) as DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPD" GROUP BY PPKEY) B1 on A1.PPKEY = B1.PPKEY )) B2
												   ON A2.PPKEY = B2.PPKEY WHERE PPCAT = 'Z7' AND PPSTA in ('1','')) B3 ON DEBTOR_DATA.OPBEL = B3.OPBEL
												   LEFT JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_LTAXASFB" B4
													ON B4.ASSESS_FBNUM = DEBTOR_DATA.FBNUM
									INNER JOIN
							    	:LT_RESV_CUSTOMERS_DISTINCT TAXPAYER ON TAXPAYER.EXT_ID = DEBTOR_DATA.GPART
									WHERE  KOFIZ='LT' AND HVORG = '4000' AND TVORG='0150' AND AUGRD IN ('01','08','15', '');
									
	LT_CUST_DUE_DATE_FIN_YEAR = SELECT  DISTINCT CUST_ID , GPART AS EXT_ID,
									CASE WHEN MONTH(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) < 7 THEN CONCAT((YEAR(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) -1 ),'0701') 
										 WHEN MONTH(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) >= 7 THEN  CONCAT((YEAR(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE))),'0701') 
									END AS INIT_DATE ,
									CASE WHEN MONTH(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) >= 7 THEN CONCAT((YEAR(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) + 1 ),'0630') 
										WHEN  MONTH(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) < 7 THEN  CONCAT((YEAR(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE))),'0630') 
								    END AS END_DATE 
								 FROM :LT_DUE_DATES_PER_OPBEL;
	
	LT_CUST_RESV_DFKKOP = SELECT CUST_ID, EXT_ID, MIN(INIT_DATE) AS INIT_DATE, MAX(END_DATE) AS END_DATE,
								0 AS "STATUS", 0 AS "IS_SENSITIVE", CURRENT_DATE AS "CREATED.DATE", 
								CURRENT_DATE AS "CHANGED.DATE", 
								CURRENT_USER AS "CREATED.USER", CURRENT_USER AS "CHANGED.USER", 
								((YEAR(MIN(INIT_DATE))*100) + MONTH(MIN(INIT_DATE))) AS INIT_TS,
								((YEAR(MAX(END_DATE))*100) + MONTH(MAX(END_DATE))) AS END_TS
							FROM 
								(
									 SELECT CUST_ID, EXT_ID, INIT_DATE, END_DATE FROM :LT_RESV_CUSTOMERS 
										UNION ALL
									 SELECT CUST_ID, EXT_ID, INIT_DATE, END_DATE FROM :LT_CUST_DUE_DATE_FIN_YEAR
								 ) GROUP BY CUST_ID, EXT_ID;
	
	UPSERT "db::app.Customer" (
		"CUST_ID", 
		"EXT_ID", 
		"STATUS", 
		"IS_SENSITIVE", 
		"INIT_DATE", 
		"END_DATE", 
		"CREATED.DATE", 
		"CHANGED.DATE",
		"CREATED.BY",
		"CHANGED.BY",
		"INIT_TS",
		"END_TS", 
		"NAME"
		)
	SELECT A.CUST_ID, A.EXT_ID, A.STATUS, A.IS_SENSITIVE, A.INIT_DATE, A.END_DATE, A."CREATED.DATE", A."CHANGED.DATE",
			"CREATED.USER", "CHANGED.USER", A."INIT_TS", A."END_TS", 
			CASE WHEN "NAME_LAST" = '' THEN 
					UPPER(CONCAT(CONCAT(CONCAT(B."MC_NAME1", ' '),CONCAT(B."NAMEMIDDLE", ' ')),CONCAT(B."MC_NAME2", ' ')))
				WHEN "NAME_LAST" <> '' THEN
					UPPER(CONCAT(CONCAT(CONCAT(B."MC_NAME2", ' '),CONCAT(B."NAMEMIDDLE", ' ')),CONCAT(B."MC_NAME1", ' ')))
			END
			AS "NAME" FROM :LT_CUST_RESV_DFKKOP AS A 
		INNER JOIN "osr.edw.staging.md.rms.proxy.synonym::CV_BUT000" AS B ON A.EXT_ID = B.PARTNER;
	
	
   truncate table "db::app.CustomerValues";
   UPSERT "db::app.CustomerValues" (
	"CUST_ID",
	"VALUE_ID",
	"VALUE",
	"TIME_SEGMENT",
	"INIT_DATE",
	"END_DATE",
	"INIT_TIME_SEGMENT",
	"END_TIME_SEGMENT"
	)
		SELECT	CUST_ID, 
			:LV_VALUE_ID, 
			(DUEAMOUNT - CLEAREDAMOUNT) AS "VALUE",
			TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "TIME_SEGMENT",
			TO_TIMESTAMP(DUE_DATE) AS "INIT_DATE",
			TO_TIMESTAMP(DUE_DATE) AS "END_DATE",
			TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "INIT_TIME_SEGMENT",
			TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "END_TIME_SEGMENT"
			
	 FROM ( 
	SELECT CUST_ID, DUEAMOUNT, CLEAREDAMOUNT, DUE_DATE
						FROM(
								SELECT CUST_ID, MAX("FAEDN") AS "MAX_DUE_DATE", MAX("AUGDT") AS "MAX_CLEARING_DATE", SUM("BETRH") AS "DUEAMOUNT", SUM("AUGBT") AS "CLEAREDAMOUNT", 
									MAX(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) as DUE_DATE  FROM
									:LT_DUE_DATES_PER_OPBEL
									GROUP BY CUST_ID, OPBEL
							)
			);																			
END