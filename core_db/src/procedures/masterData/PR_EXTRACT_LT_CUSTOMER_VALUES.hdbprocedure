PROCEDURE "procedures.masterData::PR_EXTRACT_LT_CUSTOMER_VALUES" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
/*********************************************************************
DFKKOP - Item table for Contract Account Document
	KOFIZ - Account Determination ID - ('LT' for LandTax)
	BETRH - Net Due Amount
	FAEDN - Due date for net payment
	AUGDT - Clearing Date
	PERSL - Key for Period Assignment(e.g. If Assessment was done for 2010 then Period key would be 2011 here)
	HVORG - Main Transaction for Line Item ('4000'  Assessment - TAA)
	AUGBT - Clearing amount in clearing currency 
	

 1 - Get those entry from DFKKOP which are relevant for LandTax(KOFIZ = LT) with Main Transaction as Assessment(HVORG = 4000)
 2 - Group By Customer Id and Period Key(PERSL) on Above data. After step 2, We will have data Max Due Date(FAEDn), Max Clearing Date(AUGDT), Sum of DueAmount(BETRH), Sum of Cleared Amount(AUGBT) Per Cust_id per Period Key.
 3 - To get Customer values(Revenue at Risk ), Subtract Cleared Amount by Due Amount(DueAmount - ClearedAmount) - this will give us Customer Values for that Period Key
************************************************************************/
   
    
  
   DECLARE LV_VALUE_ID INT;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";

	SELECT TOP 1 VALUE_ID INTO LV_VALUE_ID FROM "db::app.ValueTypes";
   

   UPSERT "db::app.CustomerValues" (
	"CUST_ID",
	"VALUE_ID",
	"VALUE",
	"TIME_SEGMENT",
	"INIT_DATE",
	"END_DATE",
	"INIT_TIME_SEGMENT",
	"END_TIME_SEGMENT"
	)
		SELECT	CUST_ID, 
			:LV_VALUE_ID, 
			(DUEAMOUNT - CLEAREDAMOUNT) AS "VALUE",
			TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "TIME_SEGMENT",
			TO_TIMESTAMP(DUE_DATE) AS "INIT_DATE",
			TO_TIMESTAMP(DUE_DATE) AS "END_DATE",
			TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "INIT_TIME_SEGMENT",
			TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "END_TIME_SEGMENT"
			
	 FROM ( 
	SELECT CUST_ID, DUEAMOUNT, CLEAREDAMOUNT, DUE_DATE
						FROM(
								SELECT CUST_ID, MAX("FAEDN") AS "MAX_DUE_DATE", MAX("AUGDT") AS "MAX_CLEARING_DATE", SUM("BETRH") AS "DUEAMOUNT", SUM("AUGBT") AS "CLEAREDAMOUNT", 
									MAX(COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE)) as DUE_DATE, YEAR(COALESCE(REISSUE_DUE_DATE,EPODueDate,INV_DUEDATE)) AS DUE_YEARFROM  FROM
								 (
								   SELECT  TAXPAYER.CUST_ID AS "CUST_ID", BETRH , DEBTOR_DATA.FAEDN, AUGDT, AUGBT, PERSL,
								       B.FAEDN AS INV_DUEDATE, 
								     			B3.DueDate as EPODueDate, CASE WHEN B4.REISSUE_DUE_DATE = '00000000' THEN NULL ELSE B4.REISSUE_DUE_DATE END AS REISSUE_DUE_DATE
									FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" DEBTOR_DATA 
									   INNER JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_DFKKINVDOC_H" B 
												ON  DEBTOR_DATA.XBLNR =  CAST(LPAD(B.INVDOCNO,16,0) AS VARCHAR)
													LEFT JOIN
												(SELECT  B2.OPBEL, DueDate  FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" A2 
														INNER JOIN 
												(SELECT  PPKEY, OPBEL, DueDate FROM (SELECT DISTINCT A1.PPKEY, opbel, DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPP" A1
														INNER JOIN 	
												(SELECT PPKEY,MAX(PRDAT) as DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPD" GROUP BY PPKEY) B1 on A1.PPKEY = B1.PPKEY )) B2
												   ON A2.PPKEY = B2.PPKEY WHERE PPCAT = 'Z7' AND PPSTA in ('1','')) B3 ON DEBTOR_DATA.OPBEL = B3.OPBEL
												   LEFT JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_LTAXASFB" B4
													ON B4.ASSESS_FBNUM = DEBTOR_DATA.FBNUM
									INNER JOIN
							    	"db::app.Customer" TAXPAYER ON TAXPAYER.EXT_ID = DEBTOR_DATA.GPART
									WHERE  KOFIZ='LT' AND HVORG = '4000'
								 ) 
						GROUP BY CUST_ID, YEAR(COALESCE(REISSUE_DUE_DATE,EPODueDate,INV_DUEDATE))) ) 
			;																			
END