PROCEDURE "procedures.events.erp::PR_EXTRACT_EPO_PP_WITHDRAWN_EVENT" ( 
	IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   /*EPO Withdrawn*/
    DECLARE LV_EPO_WITHDRAWN CONSTANT NVARCHAR(500) := 'EPO Withdrawn';
	DECLARE LV_PP_WITHDRAWN CONSTANT NVARCHAR(500) := 'Instalment Plan Withdrawn';
	DECLARE LV_EVENT_GRP CONSTANT NVARCHAR(500) := 'Payment Arrangement';
	DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'monitor-payments';
	
	DECLARE LV_PP_WITH_MAX_SEQ_ID INTEGER;
	DECLARE LV_EPO_WITH_MAX_SEQ_ID INTEGER;
	DECLARE LV_MAX_NEW_SEQ_ID INTEGER;
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_EPO_WITHDRAWN);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_PP_WITHDRAWN);
	
	SELECT OUT_MAX_SEQ_ID into LV_PP_WITH_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_EPO_WITHDRAWN);
	SELECT OUT_MAX_SEQ_ID into LV_EPO_WITH_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_PP_WITHDRAWN);
	IF :LV_PP_WITH_MAX_SEQ_ID IS NULL THEN 
		LV_PP_WITH_MAX_SEQ_ID = 0;
	END IF;
	IF :LV_EPO_WITH_MAX_SEQ_ID IS NULL THEN 
		LV_EPO_WITH_MAX_SEQ_ID = 0;
	END IF;
	LT_CUST_EDITED_EPO = SELECT GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_PP_WITH_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_EPO = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_EPO;
	
	LT_CUST_EDITED_PP = SELECT GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_EPO_WITH_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_PP = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_PP;
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_EPO_WITHDRAWN,
		IT_CUST=>:LT_CUST_ID_EDITED_EPO
   );
   CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_PP_WITHDRAWN,
		IT_CUST=>:LT_CUST_ID_EDITED_PP
   );
   LT_CUST_ID = SELECT GPART FROM :LT_CUST_EDITED_EPO UNION SELECT GPART FROM :LT_CUST_EDITED_PP;
   
		INSERT INTO "db::app.CustomerEvents"
		select 
		SAP.CUST_ID as CUST_ID,
		--(SELECT EVENT_ID FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_EPO_WITHDRAWN)) as EVENT_ID,
		--(SELECT EVENT_GROUP FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_EPO_WITHDRAWN)) as EVENT_GROUP,
		NULL as EVENT_ID,
		:LV_EVENT_GRP as EVENT_GROUP,
		:LV_EPO_WITHDRAWN as EVENT_NAME,
		CAST(CHDAT as date) as INIT_DATE,
		NULL as END_DATE,
		1 as EVENT_VALUE,
		:LV_EPO_WITHDRAWN as DESCRIPTION,
		LEFT(CHDAT,6)  as INIT_TS,
		NULL  as END_TS
		from(
			SELECT a.GPART,a.CHDAT FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" a
			INNER JOIN :LT_CUST_ID as delt ON a.GPART = delt.GPART
			WHERE  PPCAT='Z7' AND PPSTA IN ('3','4','5') 
			) a
		INNER JOIN "db::app.Customer" as SAP on SAP.EXT_ID=a.GPART;


/*PP Withdrawn*/

		INSERT INTO "db::app.CustomerEvents"
		select 
		SAP.CUST_ID as CUST_ID,
		--(SELECT EVENT_ID FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_PP_WITHDRAWN)) as EVENT_ID,
		--(SELECT EVENT_GROUP FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_PP_WITHDRAWN)) as EVENT_GROUP,
		NULL as EVENT_ID,
		:LV_EVENT_GRP as EVENT_GROUP,
		:LV_PP_WITHDRAWN as EVENT_NAME,
		CAST(CHDAT as date) as INIT_DATE,
		NULL as END_DATE,
		1 as EVENT_VALUE,
		:LV_PP_WITHDRAWN as DESCRIPTION,
		LEFT(CHDAT,6)  as INIT_TS,
		NULL  as END_TS
		from(
				SELECT a.GPART,a.CHDAT FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" a
			INNER JOIN :LT_CUST_ID as delt ON a.GPART = delt.GPART
			WHERE  PPCAT !='Z7' AND PPSTA IN ('3','4','5') 
			) a
		INNER JOIN "db::app.Customer" as SAP on SAP.EXT_ID=a.GPART;


 	-- Generate Event IDs for newly created Events
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'ERP', I_TYPE => 3);	
	
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEW_SEQ_ID from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP";
   	
   	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 60, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEW_SEQ_ID
		WHERE ( UPPER("EVENT_NAME") = UPPER(LV_EPO_WITHDRAWN)
		OR UPPER("EVENT_NAME") = UPPER(LV_PP_WITHDRAWN) )
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GRP);


END