PROCEDURE "procedures.events.erp::PR_EXTRACT_ASSESSMENT_TAXED_EVENT" 
( 	IN IV_MODE INTEGER DEFAULT 0 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
  /*************************************
       Get the events for Taxed -  One year or multiyear
   *************************************/
   
	DECLARE LV_TAX_MUL NVARCHAR(500) := 'Taxed - Multiyear';
	DECLARE LV_TAX_ONE NVARCHAR(500) := 'Taxed - One year';
	DECLARE LV_EVENT_GRP NVARCHAR(500) := 'Assessment';
	DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'document-text';
   	
   	DECLARE LV_MAX_LASTSEQ_ID_TMY INTEGER;
	DECLARE LV_MAX_LASTSEQ_ID_TOY INTEGER;
	
	DECLARE LV_MAX_NEWSEQ_ID_TMY INTEGER;
	DECLARE LV_EVENT_ID_TMY INTEGER;
	
	DECLARE LV_MAX_NEWSEQ_ID_TOY INTEGER;
	DECLARE LV_EVENT_ID_TOY INTEGER;
   	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
		
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_TAX_MUL);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_TAX_ONE);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_TMY from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_TAX_MUL);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_TOY from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_TAX_ONE);
	
	IF :LV_MAX_LASTSEQ_ID_TMY IS NULL THEN
		LV_MAX_LASTSEQ_ID_TMY = 0;
	END IF;
	
	IF :LV_MAX_LASTSEQ_ID_TOY IS NULL THEN
		LV_MAX_LASTSEQ_ID_TOY = 0;
	END IF;
	
	LT_CUST_EDITED_TMY = SELECT GPART, BUDAT FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_TMY;
	LT_CUST_ID_EDITED_TMY = select to_int(GPART) as "CUST_ID", YEAR(BUDAT) AS TO_YEAR from :LT_CUST_EDITED_TMY;
	
	LT_CUST_EDITED_TOY = SELECT GPART, BUDAT FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_TOY;
	LT_CUST_ID_EDITED_TOY = select to_int(GPART) as "CUST_ID", YEAR(BUDAT) AS TO_YEAR from :LT_CUST_EDITED_TOY;
	
	IF :LV_MAX_LASTSEQ_ID_TMY != 0 THEN
		CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST_FOR_YEAR"(
			IV_EVENT_NAME=>:LV_TAX_MUL,
			IT_CUST=>:LT_CUST_ID_EDITED_TMY
		);
	END IF;
	IF :LV_MAX_LASTSEQ_ID_TOY != 0 THEN
		CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST_FOR_YEAR"(
			IV_EVENT_NAME=>:LV_TAX_ONE,
			IT_CUST=>:LT_CUST_ID_EDITED_TOY
		);
	END IF;
	
	LT_CUST_ID = SELECT GPART, BUDAT FROM :LT_CUST_EDITED_TMY UNION SELECT GPART, BUDAT FROM :LT_CUST_EDITED_TOY;
   	INSERT INTO "db::app.CustomerEvents"
	select
		c.CUST_ID as CUST_ID,
		NULL as EVENT_ID,
		:LV_EVENT_GRP as EVENT_GROUP,
		CASE
			WHEN EVENT_VALUE = 1 THEN :LV_TAX_ONE
			WHEN EVENT_VALUE > 1 THEN :LV_TAX_MUL
		END as EVENT_NAME,
		to_date(BUDAT,'YYYYMMDD') as INIT_DATE,
		to_date(BUDAT,'YYYYMMDD') as END_DATE,
		EVENT_VALUE,
		CASE
			WHEN EVENT_VALUE = 1 THEN :LV_TAX_ONE
			WHEN EVENT_VALUE > 1 THEN :LV_TAX_MUL
		END as DESCRIPTION,
		LEFT(BUDAT,6) as INIT_TS,
		LEFT(BUDAT,6)  as END_TS
	from 
		(
		SELECT df.GPART as GPART,df.BUDAT as BUDAT,count(distinct FBNUM) as EVENT_VALUE
		FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" as df
		inner join :LT_CUST_ID as delt on df.GPART = delt.GPART and year(df.BUDAT) = year(delt.BUDAT)
		WHERE KOFIZ='LT' and BLART='AB' and HVORG='4000' and TVORG='0150'
		GROUP BY df.GPART,df.BUDAT) as b
	INNER JOIN "db::app.Customer" c on c.EXT_ID = b.GPART;
	
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID_TMY from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP";
	
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID_TOY from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP";
	
	   	-- Generate Event IDs for newly created Events
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'ERP', I_TYPE => 3);
	
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 1, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_TMY, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_TAX_MUL)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GRP);
		
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 1, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_TOY, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_TAX_ONE)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GRP);
END