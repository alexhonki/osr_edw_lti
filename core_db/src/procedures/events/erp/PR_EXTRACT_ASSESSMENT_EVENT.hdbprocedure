PROCEDURE "procedures.events.erp::PR_EXTRACT_ASSESSMENT_EVENT" ( 
	IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	DECLARE LV_ASSESS_ORG_1 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount under $500';
	DECLARE LV_ASSESS_ORG_2 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $500 - $1,000';
	DECLARE LV_ASSESS_ORG_3 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $1,000 - $2,500' ;
	DECLARE LV_ASSESS_ORG_4 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $2,500 - $5,000';
	DECLARE LV_ASSESS_ORG_5 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $5,000 - $10,000';
	DECLARE LV_ASSESS_ORG_6 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $10,000 - $25,000';
	DECLARE LV_ASSESS_ORG_7 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $25,000 - $50,000' ;
	DECLARE LV_ASSESS_ORG_8 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $50,000 - $100,000';
	DECLARE LV_ASSESS_ORG_9 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount $100,000 - $1M';
	DECLARE LV_ASSESS_ORG_10 NVARCHAR(500) := 'Assessment Posted - ORG - Tax Amount over $1M';
	
	DECLARE LV_ASSESS_EVENT_GRP NVARCHAR(500) := 'Assessment';
	
	DECLARE LV_ASSESS_IND_1 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount under $500';
	DECLARE LV_ASSESS_IND_2 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $500 - $1,000';
	DECLARE LV_ASSESS_IND_3 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $1,000 - $2,500' ;
	DECLARE LV_ASSESS_IND_4 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $2,500 - $5,000';
	DECLARE LV_ASSESS_IND_5 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $5,000 - $10,000';
	DECLARE LV_ASSESS_IND_6 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $10,000 - $25,000';
	DECLARE LV_ASSESS_IND_7 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $25,000 - $50,000' ;
	DECLARE LV_ASSESS_IND_8 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $50,000 - $100,000';
	DECLARE LV_ASSESS_IND_9 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount $100,000 - $1M';
	DECLARE LV_ASSESS_IND_10 NVARCHAR(500) := 'Assessment Posted - IND - Tax Amount over $1M';
	
	DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'add-document';
	DECLARE LV_MAX_NEW_SEQ_ID INTEGER;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	
	CALL "procedures.events.erp.assessment::PR_DELETE_ALL_ASSESSMENT_EVENT_DATA"(:IV_MODE);
	CALL "procedures.events.erp.assessment::PR_DELETE_ASSESSMENT_EVENT_DATA"(LT_CUST_ID);
	
	INSERT INTO "db::app.CustomerEvents" 
	/*============================================
	  For Organization
	============================================*/
	SELECT SAP.CUST_ID,
			NULL as EVENT_ID,
			:LV_ASSESS_EVENT_GRP as EVENT_GROUP,
			CASE 
				WHEN SUM(BETRH)<=500 THEN :LV_ASSESS_ORG_1
				WHEN SUM(BETRH)>500 AND SUM(BETRH)<=1000 THEN :LV_ASSESS_ORG_2
				WHEN SUM(BETRH)>1000 AND SUM(BETRH)<=2500 THEN :LV_ASSESS_ORG_3
				WHEN SUM(BETRH)>2500 AND SUM(BETRH)<=5000 THEN :LV_ASSESS_ORG_4
				WHEN SUM(BETRH)>5000 AND SUM(BETRH)<=10000 THEN :LV_ASSESS_ORG_5
				WHEN SUM(BETRH)>10000 AND SUM(BETRH)<=25000 THEN :LV_ASSESS_ORG_6
				WHEN SUM(BETRH)>25000 AND SUM(BETRH)<=50000 THEN :LV_ASSESS_ORG_7
				WHEN SUM(BETRH)>50000 AND SUM(BETRH)<=100000 THEN :LV_ASSESS_ORG_8
				WHEN SUM(BETRH)>100000 AND SUM(BETRH)<=1000000 THEN :LV_ASSESS_ORG_9
				WHEN SUM(BETRH)>1000000 THEN :LV_ASSESS_ORG_10
			END as EVENT_NAME,
			CAST(a.BUDAT as date) as INIT_DATE,
			NULL as END_DATE,
			1 as EVENT_VALUE, 
			CASE 
				WHEN SUM(BETRH)<=500 THEN CONCAT('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>500 AND SUM(BETRH)<=1000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>1000 AND SUM(BETRH)<=2500 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>2500 AND SUM(BETRH)<=5000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>5000 AND SUM(BETRH)<=10000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>10000 AND SUM(BETRH)<=25000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>25000 AND SUM(BETRH)<=50000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>50000 AND SUM(BETRH)<=100000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>100000 AND SUM(BETRH)<=1000000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>1000000 THEN concat('Assessment posted - ORG - Tax Amount $', SUM(BETRH))
			END  as DESCRIPTION,
			LEFT(a.BUDAT,6)  as INIT_TS,
			NULL  as END_TS
		FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" as a
		INNER JOIN :LT_CUST_ID as delt ON a.GPART = delt.GPART and a.BUDAT = delt.BUDAT
		INNER JOIN (
			SELECT DISTINCT ZZ_PARTNER, INDIVORG FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" ) as b ON a.GPART=b.ZZ_PARTNER
		INNER JOIN "db::app.Customer" as SAP on SAP.EXT_ID=a.GPART
		WHERE HVORG='4000' and TVORG='0150'  AND KOFIZ='LT' and BETRH>0 AND AUGRD IN ('01','08','15', '') and b.INDIVORG='ORG' 
			--AND (GPART IN (SELECT GPART FROM :LT_CUST_ID))
		GROUP BY SAP.CUST_ID, OPBEL, a.BUDAT 
	UNION ALL
	/*============================================
	  For Individual
	============================================*/
	SELECT SAP.CUST_ID,
			NULL as EVENT_ID,
			:LV_ASSESS_EVENT_GRP as EVENT_GROUP,
			CASE 
				WHEN SUM(BETRH)<=500 THEN :LV_ASSESS_IND_1
				WHEN SUM(BETRH)>500 AND SUM(BETRH)<=1000 THEN :LV_ASSESS_IND_2
				WHEN SUM(BETRH)>1000 AND SUM(BETRH)<=2500 THEN :LV_ASSESS_IND_3
				WHEN SUM(BETRH)>2500 AND SUM(BETRH)<=5000 THEN :LV_ASSESS_IND_4
				WHEN SUM(BETRH)>5000 AND SUM(BETRH)<=10000 THEN :LV_ASSESS_IND_5
				WHEN SUM(BETRH)>10000 AND SUM(BETRH)<=25000 THEN :LV_ASSESS_IND_6
				WHEN SUM(BETRH)>25000 AND SUM(BETRH)<=50000 THEN :LV_ASSESS_IND_7
				WHEN SUM(BETRH)>50000 AND SUM(BETRH)<=100000 THEN :LV_ASSESS_IND_8
				WHEN SUM(BETRH)>100000 AND SUM(BETRH)<=1000000 THEN :LV_ASSESS_IND_9
				WHEN SUM(BETRH)>1000000 THEN :LV_ASSESS_IND_10
			END as EVENT_NAME,
			CAST(a.BUDAT as date) as INIT_DATE,
			NULL as END_DATE,
			1 as EVENT_VALUE, 
			CASE 
				WHEN SUM(BETRH)<=500 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>500 AND SUM(BETRH)<=1000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>1000 AND SUM(BETRH)<=2500 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>2500 AND SUM(BETRH)<=5000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>5000 AND SUM(BETRH)<=10000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>10000 AND SUM(BETRH)<=25000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>25000 AND SUM(BETRH)<=50000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>50000 AND SUM(BETRH)<=100000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>100000 AND SUM(BETRH)<=1000000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
				WHEN SUM(BETRH)>1000000 THEN concat('Assessment posted - IND - Tax Amount $', SUM(BETRH))
			END  as DESCRIPTION,
			LEFT(a.BUDAT,6)  as INIT_TS,
			NULL  as END_TS
		FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" as a
		INNER JOIN :LT_CUST_ID as delt ON a.GPART = delt.GPART and a.BUDAT = delt.BUDAT
		INNER JOIN (SELECT DISTINCT ZZ_PARTNER, INDIVORG FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV") as b ON a.GPART=b.ZZ_PARTNER
		INNER JOIN "db::app.Customer" as SAP on SAP.EXT_ID=a.GPART
		WHERE HVORG='4000' and TVORG='0150'  AND KOFIZ='LT' and BETRH>0 AND AUGRD IN ('01','08','15', '') and b.INDIVORG='IND'
	GROUP BY SAP.CUST_ID, OPBEL, a.BUDAT ;
	  -- Generate Event IDs for newly created Events
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'ERP', I_TYPE => 3);	
	
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEW_SEQ_ID from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP";
	   
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 10, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEW_SEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE ( UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_1)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_2)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_3)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_4)
	    OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_5)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_6)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_7)
	    OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_8)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_9)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_ORG_10)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_1)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_2)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_3)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_4)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_5)
	    OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_6)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_7)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_8)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_9)
		OR UPPER("EVENT_NAME") = UPPER(LV_ASSESS_IND_10))
		AND UPPER("CATEGORY_NAME") = UPPER(LV_ASSESS_EVENT_GRP);
			

END