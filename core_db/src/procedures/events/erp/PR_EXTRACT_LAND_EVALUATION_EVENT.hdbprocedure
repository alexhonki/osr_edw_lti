PROCEDURE "procedures.events.erp::PR_EXTRACT_LAND_EVALUATION_EVENT" (
	IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
       VILMNA - Table for Notice of Assessment
    		NANO - Number of Notice of Assessment
    		INTRENO - Internal Key of Real Estate Object
       VILMNAVAL - Table for Notice of Assessment: Annual Values
    		NANO - Number of Notice of Assessment
    		INTRENO - Internal Key of Real Estate Object
    		NASTMNTTYPE	- Determination Type in Notice of Assessment(ANV  - LAST YEAR EVALUATION)
   *************************************/
   
    DECLARE LV_LAND_EVAL NVARCHAR(500) := 'Receive new land evaluation';
    DECLARE LV_LAND_EVAL_GRP NVARCHAR(500) := 'Land Related';
    DECLARE LV_LAND_EVAL_ICN NVARCHAR(500) := 'addresses';
    DECLARE LV_MAX_SEQ_ID INTEGER;
    DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(:IV_MODE, :LV_LAND_EVAL);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_LAND_EVAL);
	IF :LV_MAX_SEQ_ID IS NULL THEN 
		SELECT 0 INTO LV_MAX_SEQ_ID FROM "synonyms::dummy";
	END IF;
	LT_CUST_EDITED = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_MAX_SEQ_ID;
	LT_CUST_ID_EDITED = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED;
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_LAND_EVAL,
		IT_CUST=>:LT_CUST_ID_EDITED
   );
   	INSERT INTO "db::app.CustomerEvents"
   	
   	/*New Land Evaluations*/
		   SELECT SAP.CUST_ID AS CUST_ID, 
			null as EVENT_ID,
			:LV_LAND_EVAL_GRP as EVENT_GROUP,
			:LV_LAND_EVAL as EVENT_NAME,
			CAST(VALIDFROM as date) AS INIT_DATE, 
			NULL AS END_DATE, 
			count(*) AS EVENT_VALUE, 
			:LV_LAND_EVAL AS DESCRIPTION, 
			LEFT(VALIDFROM,6)  as INIT_TS,
			NULL AS END_TS
		FROM (
				SELECT a.ZZ_PARTNER, 
					c.VALIDFROM
				FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" AS a
					LEFT OUTER JOIN "osr.edw.staging.td.rms.proxy.synonym::CV_VILMNA" AS b
					ON a.NANO = b.NANO
					INNER JOIN "osr.edw.staging.td.rms.proxy.synonym::CV_VILMNAVAL" AS c
					ON b.INTRENO = c.INTRENO
						AND a.TAXYRSTARTDT = CONCAT(
								YEAR(c.VALIDFROM), 
								'0701'
							)
				WHERE NASTMNTTYPE != 'ANV' AND ZZ_PARTNER IN (SELECT ZZ_PARTNER FROM :LT_CUST_EDITED)
			) AS a
			INNER JOIN "db::app.Customer" AS SAP
			ON SAP.EXT_ID = a.ZZ_PARTNER
		GROUP BY CUST_ID, 
			VALIDFROM; 
	
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"();
   	select max(Z_RUN_SEQ_ID) INTO LV_NEW_MAX_SEQ_ID from "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_LAND_EVAL_ICN, "PRIORITY" = 1, "LATEST_EXTRACTED_SEQUENCE" = LV_NEW_MAX_SEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_LAND_EVAL)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_LAND_EVAL_GRP);
   
END