PROCEDURE "procedures.events.erp::PR_EXTRACT_CONCESSION_EVENT"(IN IV_MODE INTEGER DEFAULT 0 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
   /*************************************
       /OSRQLD/LTCNEXMD - Land tax: Contract exemption/deductions per parcel and nano
         INVALID_EXMD - Invalid Exemp/Ded ('X' - Yes , '' - No)
         Received Exemption - If it's not an invalid Exemption/Deduction (INVALID_EXMD = '')
         Removed Exemption - If it's not an invalid Exemption but Current Date > ValidTo of the Exemption/Deduction Received
         Invalid Exemption - If it's an invalid Exemption(INVALID_EXMD = 'X')
   *************************************/
	DECLARE LV_REC_CON_HOME CONSTANT NVARCHAR(500) := 'Received Exemption For Home' ;
	DECLARE LV_REC_CON_PROD CONSTANT NVARCHAR(500) := 'Received Exemption For Primary Production';
	DECLARE LV_REC_CON_OTH CONSTANT NVARCHAR(500)  := 'Received Exemption For Other Exemption';
	DECLARE LV_REC_CON_SUBD CONSTANT NVARCHAR(500) := 'Received Exemption For Subdivider Discount';
	DECLARE LV_REM_CON_HOME CONSTANT NVARCHAR(500) := 'Removed Exemption For Home';
	DECLARE LV_REM_CON_PROD CONSTANT NVARCHAR(500) := 'Removed Exemption For Primary Production';
	DECLARE LV_REM_CON_OTH CONSTANT NVARCHAR(500)  := 'Removed Exemption For Other Exemption';
	DECLARE LV_REM_CON_SUBD CONSTANT NVARCHAR(500) := 'Removed Exemption For Subdivider Discount';
	
	DECLARE LV_CATEGORY NVARCHAR(100) := 'Exemption';
   
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REC_CON_HOME);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REC_CON_PROD);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REC_CON_OTH);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REC_CON_SUBD);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REM_CON_HOME);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REM_CON_PROD);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REM_CON_OTH);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REM_CON_SUBD);
   
   LT_TEMP_RESV = SELECT CONCESSCODE, ZZ_PARTNER ,INTRENOPL , TAXYRSTARTDT,PLNO
                , LAG(CONCESSCODE)  OVER(PARTITION BY ZZ_PARTNER,INTRENOPL ORDER BY TAXYRSTARTDT ASC) AS CONCESSCODE_LAG
                FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	CALL "procedures.events.erp.concession::PR_DELETE_CONCESSION_DATA"(OT_CUST_ID_REC=>LT_CUST_ID,OT_CUST_ID_REM=>LT_CUST_ID_REM,OT_CUST_ID_SUBD=>LT_CUST_ID_SUBD);

    INSERT INTO "db::app.CustomerEvents" 
    

		/*Received Exemption*/
	(	select
			SAP.CUST_ID AS CUST_ID,
			NULL AS EVENT_ID,
			:LV_CATEGORY AS EVENT_GROUP,
			CASE WHEN CONCESSCODE = 'R' THEN :LV_REC_CON_HOME
				 WHEN CONCESSCODE = 'P' THEN :LV_REC_CON_PROD
				 ELSE   :LV_REC_CON_OTH
			END AS EVENT_NAME,
			CAST(VALIDFROM AS date) AS INIT_DATE,
			NULL AS END_DATE,
			1 AS EVENT_VALUE,
			CONCAT(CONCAT(CASE WHEN CONCESSCODE = 'R' THEN :LV_REC_CON_HOME
				 WHEN CONCESSCODE = 'P' THEN :LV_REC_CON_PROD
				 ELSE   :LV_REC_CON_OTH
			END ,' - '),PLNO) AS DESCRIPTION,
			LEFT(VALIDFROM,6)  AS INIT_TS,
			NULL  AS END_TS
		from "osr.edw.staging.md.rms.proxy.synonym::CV_LTCNEXMD" AS A
		inner join :LT_CUST_ID AS delt ON A.BPARTNER = delt.BPARTNER -- and CAST(A.VALIDFROM AS date) = init_date
		INNER JOIN  "db::app.Customer" AS SAP ON SAP.EXT_ID=A.BPARTNER
		 WHERE INVALID_EXMD=''  AND 	SAP.INIT_DATE <= CAST(VALIDFROM AS date) )
	UNION ALL
		/*Removed Exemption*/
		 SELECT
			SAP.CUST_ID AS CUST_ID,
			NULL AS EVENT_ID,
			:LV_CATEGORY AS EVENT_GROUP,
			CASE WHEN CONCESSCODE = 'R' THEN :LV_REM_CON_HOME
			 	 WHEN CONCESSCODE = 'P' THEN :LV_REM_CON_PROD
			 	 ELSE :LV_REM_CON_OTH
			END AS EVENT_NAME,
			CAST(VALIDTO AS date) AS INIT_DATE,
			NULL AS END_DATE,
			1  AS EVENT_VALUE,
			CONCAT(CONCAT(CASE WHEN CONCESSCODE = 'R' THEN :LV_REM_CON_HOME
			 	 WHEN CONCESSCODE = 'P' THEN :LV_REM_CON_PROD
			 	 ELSE :LV_REM_CON_OTH
			END,' - '),PLNO) AS DESCRIPTION,
			LEFT(VALIDTO,6)   AS INIT_TS,
			NULL  AS END_TS
		from "osr.edw.staging.md.rms.proxy.synonym::CV_LTCNEXMD" AS A
		inner join :LT_CUST_ID_REM AS delt ON A.BPARTNER = delt.BPARTNER -- and CAST(A.VALIDTO AS date) = init_date
		INNER JOIN  "db::app.Customer" AS SAP ON SAP.EXT_ID=A.BPARTNER
		 WHERE CAST(VALIDTO AS DATE)<cast(NOW() AS date) and  INVALID_EXMD='' AND 	SAP.INIT_DATE <= CAST(VALIDFROM AS date) 
		UNION ALL
		/*SubDivider Exemption - Received*/
	(	 SELECT
			SAP.CUST_ID AS CUST_ID,
			NULL AS EVENT_ID,
		    :LV_CATEGORY AS EVENT_GROUP,
			:LV_REC_CON_SUBD  AS EVENT_NAME,
			CAST(TAXYRSTARTDT AS date) AS INIT_DATE,
			NULL AS END_DATE,
			1  AS EVENT_VALUE,
			CONCAT(CONCAT(:LV_REC_CON_SUBD,' - '),PLNO) AS DESCRIPTION,
			LEFT(TAXYRSTARTDT,6)   AS INIT_TS,
			NULL  AS END_TS 
	      FROM :LT_TEMP_RESV AS A
	      INNER JOIN :LT_CUST_ID_SUBD AS delt ON A.ZZ_PARTNER = delt.ZZ_PARTNER -- and CAST(TAXYRSTARTDT AS date) = init_date
	      INNER JOIN "db::app.Customer" AS SAP ON SAP.EXT_ID=A.ZZ_PARTNER 
          WHERE CONCESSCODE = '*' AND (CONCESSCODE_LAG IS NULL OR CONCESSCODE_LAG != '*')  )
			UNION ALL
		/*SubDivider Exemption - Removed*/
	(	 SELECT
			SAP.CUST_ID AS CUST_ID,
			NULL AS EVENT_ID,
		    :LV_CATEGORY AS EVENT_GROUP,
			:LV_REM_CON_SUBD  AS EVENT_NAME,
			CAST(TAXYRSTARTDT AS date) AS INIT_DATE,
			NULL AS END_DATE,
			1  AS EVENT_VALUE,
			CONCAT(CONCAT(:LV_REM_CON_SUBD,' - '),PLNO) AS DESCRIPTION,
			LEFT(TAXYRSTARTDT,6)   AS INIT_TS,
			NULL  AS END_TS 
	      FROM :LT_TEMP_RESV AS A
	      INNER JOIN :LT_CUST_ID_SUBD AS delt ON A.ZZ_PARTNER = delt.ZZ_PARTNER -- and CAST(A.TAXYRSTARTDT AS date) = init_date
	      INNER JOIN "db::app.Customer" AS SAP ON SAP.EXT_ID=A.ZZ_PARTNER 
          WHERE (CONCESSCODE = '' OR CONCESSCODE != '*') AND CONCESSCODE_LAG ='*');
   	
   	call "procedures.events.erp.concession::PR_UPDATE_CONCESSION_DATA"();
   	
   	-- Generate Event IDs for newly created Events
	--CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'ERP', I_TYPE => 3);
   	
END