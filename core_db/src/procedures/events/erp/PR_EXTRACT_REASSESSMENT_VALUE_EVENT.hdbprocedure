PROCEDURE "procedures.events.erp::PR_EXTRACT_REASSESSMENT_VALUE_EVENT" 
( 	IN IV_MODE INTEGER DEFAULT 0 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /****************Reaassessment Value*****************************************************************
    DFKKOP - Item table for Contract Account Document
		KOFIZ - Account Determination ID - ('LT' for LandTax)
		BETRH - Net Due Amount
		BUDAT - Posting Date
		HVORG - Main Transaction for Line Item ('4000'  Assessment - TAA)
		TVORG - Sub Transactions ('190'  - Land Tax Comm REASSESSMENT)
		AUGRD - Clearing Reason(04 - Write-Off, 14 - Mass Write-Off, 05 - Reversal, 99- Mass process )
		
		Get sum of BETRH(Due Amount), Per Customer per Posting Date per Form Bundle number For Subtransaction type 190 , AND Clearing reason other than 04, 14, 05, 99
		
		If Reassessment Value is higher than the Initial Assessment then there will be Entries(Subtrans - 190) with +ve Value
		If Reassessment value is lower than the initial Assessment then there wil be entries with -Ve Values
   *************************************************************************************************************************/
  
	DECLARE LV_REASSESS_HIGH CONSTANT NVARCHAR(500) := 'Reassessment Value Higher than Initial Assessment';
	DECLARE LV_REASSESS_LOW CONSTANT NVARCHAR(500) := 'Reassessment Value Lower than Initial Assessment';
	DECLARE LV_REASSESS_ZERO CONSTANT NVARCHAR(500) := 'Reassessed to Zero';
	DECLARE LV_REASSESS_GROUP CONSTANT NVARCHAR(500) := 'Reassessment';
	DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'add-product';
  
	DECLARE LV_MAX_LASTSEQ_ID_REASSESS_HIGH INTEGER;
	DECLARE LV_MAX_LASTSEQ_ID_REASSESS_LOW INTEGER;
	DECLARE LV_MAX_LASTSEQ_ID_REASSESS_ZERO INTEGER;
	
	DECLARE LV_MAX_NEWSEQ_ID_REASSESS_HIGH INTEGER;
	DECLARE LV_EVENT_ID_REASSESS_HIGH INTEGER;
	
	DECLARE LV_MAX_NEWSEQ_ID_REASSESS_LOW INTEGER;
	DECLARE LV_EVENT_ID_REASSESS_LOW INTEGER;
	
	DECLARE LV_MAX_NEWSEQ_ID_REASSESS_ZERO INTEGER;
	DECLARE LV_EVENT_ID_REASSESS_ZERO INTEGER;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REASSESS_HIGH);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REASSESS_LOW);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_REASSESS_ZERO);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_REASSESS_HIGH FROM "functions::TF_GET_MAX_SEQID_EVENT"(:LV_REASSESS_HIGH);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_REASSESS_LOW FROM "functions::TF_GET_MAX_SEQID_EVENT"(:LV_REASSESS_LOW);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_REASSESS_ZERO FROM "functions::TF_GET_MAX_SEQID_EVENT"(:LV_REASSESS_ZERO);
	--LV_MAX_SEQ_ID = SELECT OUT_MAX_SEQ_ID FROM "functions::TF_GET_MAX_SEQID_EVENT"(:LV_CHRG_REG_DUNN);
	IF :LV_MAX_LASTSEQ_ID_REASSESS_HIGH IS NULL THEN
		LV_MAX_LASTSEQ_ID_REASSESS_HIGH = 0;
	END IF;
	IF :LV_MAX_LASTSEQ_ID_REASSESS_LOW IS NULL THEN
		LV_MAX_LASTSEQ_ID_REASSESS_LOW = 0;
	END IF;
	IF :LV_MAX_LASTSEQ_ID_REASSESS_ZERO IS NULL THEN 
		LV_MAX_LASTSEQ_ID_REASSESS_ZERO = 0;
	END IF;
	LT_CUST_EDITED_REASSESS_HIGH = SELECT DISTINCT  GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" INNER JOIN
							"db::app.Customer" ON EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_REASSESS_HIGH;
	LT_CUST_ID_EDITED_REASSESS_HIGH = SELECT  TO_INT(GPART) AS "CUST_ID" FROM :LT_CUST_EDITED_REASSESS_HIGH;
	
	LT_CUST_EDITED_REASSESS_LOW = SELECT DISTINCT  GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" INNER JOIN
							"db::app.Customer" ON EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_REASSESS_LOW;
	LT_CUST_ID_EDITED_REASSESS_LOW = SELECT  TO_INT(GPART) AS "CUST_ID" FROM :LT_CUST_EDITED_REASSESS_LOW;
	
	LT_CUST_EDITED_REASSESS_ZERO = SELECT DISTINCT  GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" INNER JOIN
							"db::app.Customer" ON EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_REASSESS_ZERO;
	LT_CUST_ID_EDITED_REASSESS_ZERO = SELECT  TO_INT(GPART) AS "CUST_ID" FROM :LT_CUST_EDITED_REASSESS_ZERO;

	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_REASSESS_HIGH,
		IT_CUST=>:LT_CUST_ID_EDITED_REASSESS_HIGH
	);
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_REASSESS_LOW,
		IT_CUST=>:LT_CUST_ID_EDITED_REASSESS_LOW
	);
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_REASSESS_ZERO,
		IT_CUST=>:LT_CUST_ID_EDITED_REASSESS_ZERO
	);
	LT_CUST_ID = SELECT DISTINCT GPART FROM 
					(	SELECT GPART FROM :LT_CUST_EDITED_REASSESS_HIGH UNION 
						SELECT GPART FROM :LT_CUST_EDITED_REASSESS_LOW UNION 
						SELECT GPART FROM :LT_CUST_EDITED_REASSESS_ZERO
					);
	LT_REASSESS_VAL = 	SELECT DFKKOP.GPART,BUDAT, SUM(BETRH) AS REASSESS_AMOUNT FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" DFKKOP
							INNER JOIN :LT_CUST_ID DELT ON DELT.GPART =  DFKKOP.GPART
						WHERE HVORG='4000' AND TVORG='0190'  AND KOFIZ='LT'
					GROUP BY DFKKOP.GPART,BUDAT,FBNUM;
	
	LT_REASSESS_ZERO_VAL = 	SELECT DFKKOP.GPART,MAX(BUDAT) AS BUDAT, SUM(BETRH) AS TOT_AMOUNT FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" DFKKOP
							INNER JOIN :LT_CUST_ID DELT ON DELT.GPART =  DFKKOP.GPART
						WHERE HVORG='4000' AND TVORG IN ('0150' ,'0190')  AND KOFIZ='LT'
					GROUP BY DFKKOP.GPART,FBNUM ;

  INSERT INTO "db::app.CustomerEvents" 
  /* ===================================================================
       Reassessment Value is Higher than Initial Assessment
    =====================================================================*/  

(	   SELECT   
			SAP.CUST_ID AS CUST_ID,
			NULL AS EVENT_ID,
			:LV_REASSESS_GROUP AS EVENT_GROUP,
			:LV_REASSESS_HIGH AS EVENT_NAME ,
			CAST(BUDAT AS date) AS INIT_DATE,
			NULL AS END_DATE,
			1 AS EVENT_VALUE,
			:LV_REASSESS_HIGH AS DESCRIPTION,
			LEFT(BUDAT,6)  AS INIT_TS,
			NULL  AS END_TS
	FROM  :LT_REASSESS_VAL a
	INNER JOIN "db::app.Customer" AS SAP ON SAP.EXT_ID=a.GPART WHERE REASSESS_AMOUNT > 0 )


UNION ALL 
  /* ===================================================================
       Reassessment Value is Lower than Initial Assessment
    =====================================================================*/  
(	SELECT  
			SAP.CUST_ID AS CUST_ID,
			NULL AS EVENT_ID,
			:LV_REASSESS_GROUP AS EVENT_GROUP,
			:LV_REASSESS_LOW AS EVENT_NAME ,
			CAST(BUDAT AS date) AS INIT_DATE,
			NULL AS END_DATE,
			1 AS EVENT_VALUE,
			:LV_REASSESS_LOW AS DESCRIPTION,
			LEFT(BUDAT,6)  AS INIT_TS,
			NULL  AS END_TS
	FROM :LT_REASSESS_VAL a
	INNER JOIN "db::app.Customer" AS SAP ON SAP.EXT_ID=a.GPART WHERE REASSESS_AMOUNT < 0
)
UNION ALL

(  
		SELECT  
			SAP.CUST_ID AS CUST_ID,
			NULL AS EVENT_ID,
			:LV_REASSESS_GROUP AS EVENT_GROUP,
			:LV_REASSESS_ZERO AS EVENT_NAME ,
			CAST(BUDAT AS date) AS INIT_DATE,
			NULL AS END_DATE,
			1 AS EVENT_VALUE,
			:LV_REASSESS_ZERO AS DESCRIPTION,
			LEFT(BUDAT,6)  AS INIT_TS,
			NULL  AS END_TS
	FROM :LT_REASSESS_ZERO_VAL a
	INNER JOIN "db::app.Customer" AS SAP ON SAP.EXT_ID=a.GPART  WHERE TOT_AMOUNT = 0
)
;
	-- Generate event ID
    CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'ERP', I_TYPE => 3);	
    
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID_REASSESS_HIGH FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP";
	
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 20, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_REASSESS_HIGH, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_REASSESS_HIGH)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_REASSESS_GROUP);
	
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 20, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_REASSESS_HIGH, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_REASSESS_ZERO)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_REASSESS_GROUP);
		
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 20, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_REASSESS_HIGH, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_REASSESS_LOW)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_REASSESS_GROUP);
END