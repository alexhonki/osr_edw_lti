PROCEDURE "procedures.events.predefined::PR_EXTRACT_LAND_PARCELS_EVENT" (
	IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/

	DECLARE LV_LAND_PARCEL_1 NVARCHAR(500) := 'Decrease in Number of Parcels Owned by 10 or more';
	DECLARE LV_LAND_PARCEL_2 NVARCHAR(500) := 'Increase in Number of Parcels Owned by 2 or more';
	DECLARE LV_LAND_PARCEL_3 NVARCHAR(500) := 'Increase in Number of Parcels Owned by 8 or more';
	DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Land Related';
	
	DECLARE LV_LAND_PARCEL_1_MAX_SEQ_ID INTEGER;
	DECLARE LV_LAND_PARCEL_2_MAX_SEQ_ID INTEGER;
	DECLARE LV_LAND_PARCEL_3_MAX_SEQ_ID INTEGER;
	DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	
	 --Delta Load 
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_LAND_PARCEL_1);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_LAND_PARCEL_2);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_LAND_PARCEL_3);
	SELECT OUT_MAX_SEQ_ID into LV_LAND_PARCEL_1_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_LAND_PARCEL_1);
	SELECT OUT_MAX_SEQ_ID into LV_LAND_PARCEL_2_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_LAND_PARCEL_2);
	SELECT OUT_MAX_SEQ_ID into LV_LAND_PARCEL_3_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_LAND_PARCEL_3);
	IF :LV_LAND_PARCEL_1_MAX_SEQ_ID IS NULL THEN
		LV_LAND_PARCEL_1_MAX_SEQ_ID = 0;
	END IF;
	
	IF :LV_LAND_PARCEL_2_MAX_SEQ_ID IS NULL THEN
		LV_LAND_PARCEL_2_MAX_SEQ_ID = 0;
	END IF;
	IF :LV_LAND_PARCEL_3_MAX_SEQ_ID IS NULL THEN
		LV_LAND_PARCEL_3_MAX_SEQ_ID = 0;
	END IF;
	LT_CUST_EDITED_LP_1 = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_LAND_PARCEL_1_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_LP_1 = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED_LP_1;
	
	LT_CUST_EDITED_LP_2 = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_LAND_PARCEL_2_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_LP_2 = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED_LP_2;
	
	LT_CUST_EDITED_LP_3 = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_LAND_PARCEL_3_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_LP_3 = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED_LP_3;
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_LAND_PARCEL_1,
		IT_CUST=>:LT_CUST_ID_EDITED_LP_1
   );
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_LAND_PARCEL_2,
		IT_CUST=>:LT_CUST_ID_EDITED_LP_2
   );
   	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_LAND_PARCEL_3,
		IT_CUST=>:LT_CUST_ID_EDITED_LP_3
   );
   LT_CUST_ID = SELECT ZZ_PARTNER FROM :LT_CUST_EDITED_LP_1 UNION SELECT ZZ_PARTNER FROM :LT_CUST_EDITED_LP_2 UNION SELECT ZZ_PARTNER FROM :LT_CUST_EDITED_LP_3;
	 LT_TEMP = SELECT 
					*,
					TO_TIMESTAMP(LEAST(TAXYRSTARTDT, CHDATE), 'YYYYMMDD') "INIT_DATE", 
					TO_TIMESTAMP('9999-12-31') "END_DATE",
					LAG(NUM_PARCEL) OVER (PARTITION BY ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_NUM
				FROM (
					SELECT COUNT(*) AS NUM_PARCEL, ZZ_PARTNER, TAXYRSTARTDT, CHDATE
					FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV"
					WHERE ZZ_PARTNER IN (SELECT ZZ_PARTNER FROM :LT_CUST_ID)
					GROUP BY TAXYRSTARTDT, ZZ_PARTNER, CHDATE
				) A
				LEFT JOIN (
					SELECT CUST_ID, EXT_ID
					FROM "db::app.Customer"
				) B ON A.ZZ_PARTNER = B.EXT_ID;
 
 
 /*Decrease in Number of Parcels Owned by 10 or more*/
   INSERT INTO "db::app.CustomerEvents"  
	 SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP as EVENT_GROUP, 
		:LV_LAND_PARCEL_1 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_PARCEL_1 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM :LT_TEMP 
	WHERE NUM_PARCEL <= PREV_NUM - 10
	AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;
	
	/*Increase in Number of Parcels Owned by 2 or more*/
   INSERT INTO "db::app.CustomerEvents"  
	 SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP, 
		:LV_LAND_PARCEL_2 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_PARCEL_2 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM :LT_TEMP 
	WHERE NUM_PARCEL >= PREV_NUM + 2
	AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;
	

	/*Increase in Number of Parcels Owned by 8 or more*/
   INSERT INTO "db::app.CustomerEvents"  
	 SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP, 
		:LV_LAND_PARCEL_3 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_PARCEL_3 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM :LT_TEMP 
	WHERE NUM_PARCEL >= PREV_NUM + 8
	AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;

	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'PREDEFINED', I_TYPE => 1);
		
	SELECT MAX(Z_RUN_SEQ_ID) INTO LV_NEW_MAX_SEQ_ID FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	
	UPDATE "db::adm.config.event.name" 
		SET "LATEST_EXTRACTED_SEQUENCE" = LV_NEW_MAX_SEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE ( UPPER("EVENT_NAME") = UPPER(LV_LAND_PARCEL_1)
		OR UPPER("EVENT_NAME") = UPPER(LV_LAND_PARCEL_2)
		OR UPPER("EVENT_NAME") = UPPER(LV_LAND_PARCEL_3))
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);
   
END