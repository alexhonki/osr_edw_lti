PROCEDURE "procedures.events.predefined::PR_EXTRACT_LAND_PARCELS_EVENT" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/

	DECLARE LV_LAND_PARCEL_1 NVARCHAR(500) := 'Decrease in Number of Parcels Owned by 10 or more';
	DECLARE LV_LAND_PARCEL_2 NVARCHAR(500) := 'Increase in Number of Parcels Owned by 2 or more';
	DECLARE LV_LAND_PARCEL_3 NVARCHAR(500) := 'Increase in Number of Parcels Owned by 8 or more';
	DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Land Related';
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	 LT_TEMP = SELECT 
					*,
					TO_TIMESTAMP(LEAST(TAXYRSTARTDT, CHDATE), 'YYYYMMDD') "INIT_DATE", 
					TO_TIMESTAMP('9999-12-31') "END_DATE",
					LAG(NUM_PARCEL) OVER (PARTITION BY ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_NUM
				FROM (
					SELECT COUNT(*) AS NUM_PARCEL, ZZ_PARTNER, TAXYRSTARTDT, CHDATE
					FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV"
					GROUP BY TAXYRSTARTDT, ZZ_PARTNER, CHDATE
				) A
				LEFT JOIN (
					SELECT CUST_ID, EXT_ID
					FROM "db::app.Customer"
				) B ON A.ZZ_PARTNER = B.EXT_ID;
 
 
 /*Decrease in Number of Parcels Owned by 10 or more*/
   INSERT INTO "db::app.CustomerEvents"  
	 SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP as EVENT_GROUP, 
		:LV_LAND_PARCEL_1 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_PARCEL_1 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM :LT_TEMP 
	WHERE NUM_PARCEL <= PREV_NUM - 10
	AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;
	
	/*Increase in Number of Parcels Owned by 2 or more*/
   INSERT INTO "db::app.CustomerEvents"  
	 SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP, 
		:LV_LAND_PARCEL_2 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_PARCEL_2 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM :LT_TEMP 
	WHERE NUM_PARCEL >= PREV_NUM + 2
	AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;
	

	/*Increase in Number of Parcels Owned by 8 or more*/
   INSERT INTO "db::app.CustomerEvents"  
	 SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP, 
		:LV_LAND_PARCEL_3 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_PARCEL_3 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM :LT_TEMP 
	WHERE NUM_PARCEL >= PREV_NUM + 8
	AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;

	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"();
	
	/*UPDATE "db::adm.config.event.name" 
	SET "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_CL_F, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
	WHERE UPPER("EVENT_NAME") = UPPER(LV_AB_PYMNT_1)
	AND UPPER("CATEGORY_NAME") = UPPER(LV_AB_EVENT_GRP);*/
   
END