PROCEDURE "procedures.events.predefined::PR_EXTRACT_DUNNING_RUN_EVENT" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   DECLARE LV_DUNNING_RUN NVARCHAR(500) := 'Item Excluded from Dunning Run';
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
   /*Item Excluded from Dunning Run*/
   /* INSERT INTO "db::app.CustomerEvents" 
   	SELECT
		CUST_ID,
		(SELECT EVENT_ID FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_DUNNING_RUN)) as EVENT_ID,
		(SELECT EVENT_GROUP FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_DUNNING_RUN))	EVENT_GROUP,
		:LV_DUNNING_RUN EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_DUNNING_RUN DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
		FROM (
				SELECT
					*,
					TO_TIMESTAMP(BLDAT, 'YYYYMMDD') "INIT_DATE", 
					TO_TIMESTAMP('9999-12-31') "END_DATE"
				FROM (
					SELECT GPART, BLDAT, XMANL
					FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP"
					WHERE XMANL <> 'X' AND KOFIZ='LT' 
					ORDER BY BLDAT, GPART
				) A
				JOIN (
					SELECT CUST_ID, EXT_ID
					FROM "db::app.Customer"
				) B 
				ON A.GPART = B.EXT_ID
			)
	WHERE CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;*/
   
END