PROCEDURE "procedures.events.predefined::PR_EXTRACT_DEBT_TIME_IN_YEAR" (
	IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
   /*************************************
       Write your procedure logic  - INCOMPLETE
   *************************************/
   DECLARE LV_HVNG_DEBT_1 NVARCHAR(500) := 'Having debts 2 times or more in a year' ;
   DECLARE LV_HVNG_DEBT_2 NVARCHAR(500) := 'Having debts in the past 2 years';
   DECLARE LV_HVNG_DEBT_3 NVARCHAR(500)  := 'Having Debt >2 times in Past Years';
   DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Non-Payment';
   DECLARE LV_DEBT_1_MAX_SEQ_ID INTEGER;
   DECLARE LV_DEBT_2_MAX_SEQ_ID INTEGER;
   DECLARE LV_DEBT_3_MAX_SEQ_ID INTEGER;
   DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
   --Delta Load 
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_HVNG_DEBT_1);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_HVNG_DEBT_2);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_HVNG_DEBT_3);
	SELECT OUT_MAX_SEQ_ID into LV_DEBT_1_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_HVNG_DEBT_1);
	SELECT OUT_MAX_SEQ_ID into LV_DEBT_2_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_HVNG_DEBT_2);
	SELECT OUT_MAX_SEQ_ID into LV_DEBT_3_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_HVNG_DEBT_3);
	IF :LV_DEBT_1_MAX_SEQ_ID IS NULL THEN
		LV_DEBT_1_MAX_SEQ_ID = 0;
	END IF;
	
	IF :LV_DEBT_2_MAX_SEQ_ID IS NULL THEN
		LV_DEBT_2_MAX_SEQ_ID = 0;
	END IF;
	IF :LV_DEBT_3_MAX_SEQ_ID IS NULL THEN
		LV_DEBT_3_MAX_SEQ_ID = 0;
	END IF;
	LT_CUST_EDITED_DEBT_1 = SELECT GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_DEBT_1_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_DEBT_1 = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_DEBT_1;
	
	LT_CUST_EDITED_DEBT_2 = SELECT GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_DEBT_2_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_DEBT_2 = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_DEBT_2;
	
	LT_CUST_EDITED_DEBT_3 = SELECT GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_DEBT_3_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_DEBT_3 = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_DEBT_3;
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_HVNG_DEBT_1,
		IT_CUST=>:LT_CUST_ID_EDITED_DEBT_1
   );
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_HVNG_DEBT_2,
		IT_CUST=>:LT_CUST_ID_EDITED_DEBT_2
   );
   	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_HVNG_DEBT_3,
		IT_CUST=>:LT_CUST_ID_EDITED_DEBT_3
   );
   LT_CUST_ID = SELECT GPART FROM :LT_CUST_EDITED_DEBT_1 UNION SELECT GPART FROM :LT_CUST_EDITED_DEBT_2 UNION SELECT GPART FROM :LT_CUST_EDITED_DEBT_3;
   LT_DEBT_DATA = SELECT        CUST_ID, 
				CASE  WHEN TO_INT(RIGHT(INIT_TS,2)) < 6 THEN CONCAT (TO_INT(LEFT(init_ts,4))-1, CONCAT('-',TO_INT(LEFT(init_ts,4)))) 
				ELSE 
				CONCAT (TO_INT(LEFT(INIT_TS,4)), CONCAT('-',TO_INT(LEFT(INIT_TS,4))+1)) 
				end  AS FINYEAR,
				DUE_DATE
				FROM ( 					
					SELECT CUST_ID , "functions::TF_LT_CHECK_IF_TP_DEBTOR"(CLEARED_DATE, DUE_DATE, DUEAMOUNT, CLEAREDAMOUNT).ISDEBTOR AS ISDEBTOR, DUE_DATE ,
							TO_INT(CONCAT(YEAR(DUE_DATE),LPAD(MONTH(DUE_DATE),2,0))) AS "INIT_TS"
					FROM 
					(
					SELECT CUST_ID, MAX(CLEARING_DATE) AS CLEARED_DATE, MAX(DUE_DATE) AS DUE_DATE , OPBEL, SUM(BETRH) AS DUEAMOUNT, SUM(AUGBT) AS CLEAREDAMOUNT FROM(					
					SELECT A8.OPBEL ,COALESCE(PAYMENT_DATE, A8.AUGVD, A8.AUGDT) AS CLEARING_DATE , CUST_ID AS "CUST_ID", A8.BETRH , 
							A8.FAEDN, A8.AUGDT, A8.AUGBT, A8.PERSL,A8.FBNUM, INV_DUEDATE,  EPODueDate, REISSUE_DUE_DATE , COALESCE(EPODueDate,REISSUE_DUE_DATE,INV_DUEDATE) as DUE_DATE,
							YEAR(COALESCE(REISSUE_DUE_DATE,EPODueDate,INV_DUEDATE)) AS DUE_YEAR
							FROM	(SELECT   DEBTOR_DATA.OPBEL,OPUPW,OPUPK,OPUPZ, TAXPAYER.CUST_ID AS "CUST_ID", BETRH , 
								     			DEBTOR_DATA.FAEDN, AUGDT, AUGVD, AUGBT, AUGBL, PERSL,DEBTOR_DATA.FBNUM, B.FAEDN AS INV_DUEDATE, 
								     			B3.DueDate as EPODueDate, CASE WHEN B4.REISSUE_DUE_DATE = '00000000' THEN NULL ELSE B4.REISSUE_DUE_DATE END AS REISSUE_DUE_DATE
												FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" DEBTOR_DATA 
												    INNER JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_DFKKINVDOC_H" B 
												ON  DEBTOR_DATA.XBLNR =  CAST(LPAD(B.INVDOCNO,16,0) AS VARCHAR)
													LEFT JOIN
												(SELECT  B2.OPBEL, DueDate  FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" A2 
														INNER JOIN 
												(SELECT  PPKEY, OPBEL, DueDate FROM (SELECT DISTINCT A1.PPKEY, opbel, DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPP" A1
														INNER JOIN 	
												(SELECT PPKEY,MAX(PRDAT) as DueDate FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPD" GROUP BY PPKEY) B1 on A1.PPKEY = B1.PPKEY )) B2
												   ON A2.PPKEY = B2.PPKEY WHERE PPCAT = 'Z7' AND PPSTA in ('1','')) B3 ON DEBTOR_DATA.OPBEL = B3.OPBEL
														LEFT JOIN
												"osr.edw.staging.td.rms.proxy.synonym::CV_LTAXASFB" B4
													ON B4.ASSESS_FBNUM = DEBTOR_DATA.FBNUM
														INNER JOIN 
												 "db::app.Customer" TAXPAYER ON TAXPAYER.EXT_ID = DEBTOR_DATA.GPART
												 WHERE  KOFIZ='LT' AND HVORG = '4000'  AND TVORG = '0150' AND DEBTOR_DATA.GPART IN (SELECT GPART FROM :LT_CUST_ID)) AS A8--AND TAXPAYER.CUST_ID = 1275802  
													LEFT JOIN
										(SELECT AUGBL, MAX(FAEDN) AS PAYMENT_DATE FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" A6 
										   WHERE AUGBL IN (SELECT AUGBL from  "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" WHERE AUGBL != '')
											AND A6.HVORG = '5000' GROUP BY AUGBL ) B8 
											ON A8.AUGBL = B8.AUGBL ) GROUP BY 	CUST_ID, OPBEL)
					)WHERE ISDEBTOR = 1;
				
   INSERT INTO "db::app.CustomerEvents" 
		SELECT
		CUST_ID, 
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP,
		:LV_HVNG_DEBT_1 AS EVENT_NAME,
		INIT_DATE,
		null as END_DATE, 
		1 EVENT_VALUE, 
		:LV_HVNG_DEBT_1 AS DESCRIPTION,
		LEFT(INIT_DATE,6) as INIT_TS,
		NULL AS END_TS
			FROM (  SELECT CUST_ID, FINYEAR  , MAX(DUE_DATE) AS "INIT_DATE", COUNT(*) AS NO_OF_DEBTS
    				FROM :LT_DEBT_DATA
					 GROUP BY CUST_ID, FINYEAR
				) WHERE NO_OF_DEBTS >= 2 ORDER BY CUST_ID DESC;
				
	INSERT INTO "db::app.CustomerEvents" 
		SELECT
		CUST_ID, 
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP,
		:LV_HVNG_DEBT_2 AS EVENT_NAME,
		INIT_DATE,
		null as END_DATE, 
		1 EVENT_VALUE, 
		:LV_HVNG_DEBT_2 AS DESCRIPTION,
		LEFT(INIT_DATE,6) as INIT_TS,
		NULL AS END_TS
		FROM (
	 SELECT CUST_ID, LAST_DEBT_DATE AS INIT_DATE, NO_OF_DEBTS, FINYEAR ,
		LAG (NO_OF_DEBTS, 2) OVER (PARTITION BY CUST_ID ORDER BY FINYEAR ASC) AS LAST_2_YEARS_DEBT FROM (
		 SELECT CUST_ID,  MAX(DUE_DATE) AS LAST_DEBT_DATE, COUNT(*) AS NO_OF_DEBTS, FINYEAR FROM :LT_DEBT_DATA GROUP BY CUST_ID , FINYEAR)) WHERE 
		 LAST_2_YEARS_DEBT IS NOT NULL;
		 
	INSERT INTO "db::app.CustomerEvents" 
		SELECT
		CUST_ID, 
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP,
		:LV_HVNG_DEBT_3 AS EVENT_NAME,
		INIT_DATE,
		null as END_DATE, 
		1 EVENT_VALUE, 
		:LV_HVNG_DEBT_3 AS DESCRIPTION,
		LEFT(INIT_DATE,6) as INIT_TS,
		NULL AS END_TS
			FROM (  SELECT CUST_ID  , MAX(DUE_DATE) AS "INIT_DATE", COUNT(*) AS NO_OF_DEBTS
    				FROM :LT_DEBT_DATA
					 GROUP BY CUST_ID
				) WHERE NO_OF_DEBTS > 2 ORDER BY CUST_ID DESC;
				
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'PREDEFINED', I_TYPE => 1);
	
	SELECT MAX(Z_RUN_SEQ_ID) INTO LV_NEW_MAX_SEQ_ID FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP";
	
	UPDATE "db::adm.config.event.name" 
		SET "LATEST_EXTRACTED_SEQUENCE" = LV_NEW_MAX_SEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE ( UPPER("EVENT_NAME") = UPPER(LV_HVNG_DEBT_1)
		OR UPPER("EVENT_NAME") = UPPER(LV_HVNG_DEBT_2)
		OR UPPER("EVENT_NAME") = UPPER(LV_HVNG_DEBT_3) )
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);
	
END