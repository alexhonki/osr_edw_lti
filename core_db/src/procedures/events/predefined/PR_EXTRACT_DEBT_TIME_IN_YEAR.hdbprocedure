PROCEDURE "procedures.events.predefined::PR_EXTRACT_DEBT_TIME_IN_YEAR" (
	IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
    AS
BEGIN
   /*************************************
       Write your procedure logic  - INCOMPLETE
   *************************************/
   DECLARE  LV_HVNG_DEBT_1 CONSTANT NVARCHAR(500) := 'Having debts 2 times or more in a year' ;
   DECLARE LV_HVNG_DEBT_2 CONSTANT NVARCHAR(500) := 'Having debts in the past 2 years';
   DECLARE LV_HVNG_DEBT_3 CONSTANT NVARCHAR(500)  := 'Having debt >2 times in Past Years';
   DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Non-Payment';
   DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'unpaid-leave';
   
   DECLARE LV_DEBT_1_MAX_SEQ_ID INTEGER;
   DECLARE LV_DEBT_2_MAX_SEQ_ID INTEGER;
   DECLARE LV_DEBT_3_MAX_SEQ_ID INTEGER;
   DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
   	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
   --Delta Load 
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_HVNG_DEBT_1);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_HVNG_DEBT_2);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_HVNG_DEBT_3);
	SELECT OUT_MAX_SEQ_ID into LV_DEBT_1_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_HVNG_DEBT_1);
	SELECT OUT_MAX_SEQ_ID into LV_DEBT_2_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_HVNG_DEBT_2);
	SELECT OUT_MAX_SEQ_ID into LV_DEBT_3_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_HVNG_DEBT_3);
	IF :LV_DEBT_1_MAX_SEQ_ID IS NULL THEN
		LV_DEBT_1_MAX_SEQ_ID = 0;
	END IF;
	
	IF :LV_DEBT_2_MAX_SEQ_ID IS NULL THEN
		LV_DEBT_2_MAX_SEQ_ID = 0;
	END IF;
	IF :LV_DEBT_3_MAX_SEQ_ID IS NULL THEN
		LV_DEBT_3_MAX_SEQ_ID = 0;
	END IF;
	LT_CUST_EDITED_DEBT_1 = SELECT distinct GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_DEBT_1_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_DEBT_1 = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_DEBT_1;
	
	LT_CUST_EDITED_DEBT_2 = SELECT distinct GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_DEBT_2_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_DEBT_2 = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_DEBT_2;
	
	LT_CUST_EDITED_DEBT_3 = SELECT distinct GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP" inner join
							"db::app.Customer" on EXT_ID = GPART WHERE 
						"Z_RUN_SEQ_ID">:LV_DEBT_3_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_DEBT_3 = select to_int(GPART) as "CUST_ID" from :LT_CUST_EDITED_DEBT_3;
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_HVNG_DEBT_1,
		IT_CUST=>:LT_CUST_ID_EDITED_DEBT_1
   );
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_HVNG_DEBT_2,
		IT_CUST=>:LT_CUST_ID_EDITED_DEBT_2
   );
   	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_HVNG_DEBT_3,
		IT_CUST=>:LT_CUST_ID_EDITED_DEBT_3
   );
   LT_CUST_ID = SELECT GPART FROM :LT_CUST_EDITED_DEBT_1 UNION SELECT GPART FROM :LT_CUST_EDITED_DEBT_2 UNION SELECT GPART FROM :LT_CUST_EDITED_DEBT_3;
   LT_DEBT_DATA = SELECT        CUST_ID, 
				CASE  WHEN TO_INT(RIGHT(INIT_TS,2)) < 6 THEN CONCAT (TO_INT(LEFT(INIT_TS,4))-1, CONCAT('-',TO_INT(LEFT(INIT_TS,4)))) 
				ELSE 
				CONCAT (TO_INT(LEFT(INIT_TS,4)), CONCAT('-',TO_INT(LEFT(INIT_TS,4))+1)) 
				end  AS FINYEAR,
				INIT_DATE AS DUE_DATE,
				INIT_TS AS INIT_TS
				FROM  "db::app.CustomerReactions";
				
   INSERT INTO "db::app.CustomerEvents" 
	/*	SELECT
		CUST_ID, 
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP,
		:LV_HVNG_DEBT_1 AS EVENT_NAME,
		INIT_DATE,
		null as END_DATE, 
		1 EVENT_VALUE, 
		:LV_HVNG_DEBT_1 AS DESCRIPTION,
		INIT_TS as INIT_TS,
		NULL AS END_TS
			FROM ( */ SELECT CUST_ID,
							NULL,
							:LV_EVENT_GROUP EVENT_GROUP,
							:LV_HVNG_DEBT_1 AS EVENT_NAME,
							MAX(DUE_DATE) AS "INIT_DATE",
							NULL AS END_DATE,
							1 EVENT_VALUE, 
							:LV_HVNG_DEBT_1 AS DESCRIPTION,
						    MAX(INIT_TS) AS INIT_TS,
						    NULL AS END_TS
    				FROM :LT_DEBT_DATA
					 GROUP BY CUST_ID, FINYEAR HAVING COUNT(*) >= 2 ORDER BY CUST_ID DESC;
			--	) WHERE NO_OF_DEBTS >= 2 ORDER BY CUST_ID DESC;
				
	INSERT INTO "db::app.CustomerEvents" 
		SELECT
		CUST_ID, 
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP,
		:LV_HVNG_DEBT_2 AS EVENT_NAME,
		INIT_DATE,
		null as END_DATE, 
		1 EVENT_VALUE, 
		:LV_HVNG_DEBT_2 AS DESCRIPTION,
		INIT_TS as INIT_TS,
		NULL AS END_TS
		FROM (
		 SELECT CUST_ID, 
				LAST_DEBT_DATE AS INIT_DATE,
				INIT_TS, 
				NO_OF_DEBTS,
				FINYEAR ,
				LAG (NO_OF_DEBTS, 2) OVER (PARTITION BY CUST_ID ORDER BY FINYEAR ASC) AS LAST_2_YEARS_DEBT FROM (
					SELECT CUST_ID,  
							MAX(DUE_DATE) AS LAST_DEBT_DATE,
							COUNT(*) AS NO_OF_DEBTS, 
							FINYEAR, 
							MAX(INIT_TS) AS INIT_TS 
					FROM :LT_DEBT_DATA 
					GROUP BY CUST_ID , FINYEAR )
			) WHERE 
		 LAST_2_YEARS_DEBT IS NOT NULL;
	
		 
	INSERT INTO "db::app.CustomerEvents" 
		/*SELECT
		CUST_ID, 
		NULL,
		:LV_EVENT_GROUP EVENT_GROUP,
		:LV_HVNG_DEBT_3 AS EVENT_NAME,
		INIT_DATE,
		null as END_DATE, 
		1 EVENT_VALUE, 
		:LV_HVNG_DEBT_3 AS DESCRIPTION,
		INIT_TS as INIT_TS,
		NULL AS END_TS
			FROM (  */
					SELECT CUST_ID, 
							NULL,
							:LV_EVENT_GROUP EVENT_GROUP,
							:LV_HVNG_DEBT_3 AS EVENT_NAME,
							MAX(DUE_DATE) AS "INIT_DATE",
							NULL AS END_DATE, 
							1 EVENT_VALUE, 
							:LV_HVNG_DEBT_3 AS DESCRIPTION,
							MAX(INIT_TS) AS INIT_TS,
							NULL AS END_TS
    				FROM :LT_DEBT_DATA
					 GROUP BY CUST_ID HAVING COUNT(*) > 2 ORDER BY CUST_ID DESC;
			--	) WHERE NO_OF_DEBTS > 2 ORDER BY CUST_ID DESC;
				
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'PREDEFINED', I_TYPE => 1);
	
	SELECT MAX(Z_RUN_SEQ_ID) INTO LV_NEW_MAX_SEQ_ID FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKOP";
	
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = null, "LATEST_EXTRACTED_SEQUENCE" = LV_NEW_MAX_SEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE ( UPPER("EVENT_NAME") = UPPER(LV_HVNG_DEBT_1)
		OR UPPER("EVENT_NAME") = UPPER(LV_HVNG_DEBT_2)
		OR UPPER("EVENT_NAME") = UPPER(LV_HVNG_DEBT_3) )
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);
	
END