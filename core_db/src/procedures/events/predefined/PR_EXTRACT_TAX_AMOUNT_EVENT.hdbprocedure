PROCEDURE "procedures.events.predefined::PR_EXTRACT_TAX_AMOUNT_EVENT" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   DECLARE LV_TA NVARCHAR(500) := 'Increase in Tax Amount by 50% or more';
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
   LT_TEMP =	SELECT 
					*, 
					TO_TIMESTAMP(LEAST(TAXYRSTARTDT, CHDATE), 'YYYYMMDD') "INIT_DATE", 
					TO_TIMESTAMP('9999-12-31') "END_DATE",
					CASE PREV_TAX
						WHEN 0 THEN NULL
						ELSE (TOTAL_TAX / PREV_TAX) * 100
					END AS RATIO
				FROM(
					SELECT *, LAG(TOTAL_TAX) OVER (PARTITION BY ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_TAX
					FROM(
						select ZZ_PARTNER, TAXYRSTARTDT, SUM(TAXAMOUNT) AS TOTAL_TAX, CHDATE
						from "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV"
					group by ZZ_PARTNER, TAXYRSTARTDT, CHDATE
					)
				) A
				LEFT JOIN (
					SELECT CUST_ID, EXT_ID
					FROM "db::app.Customer"
				) B ON A.ZZ_PARTNER = B.EXT_ID;




		/*Increase in Tax Amount by 50% or more*/
		   INSERT INTO "db::app.CustomerEvents" 
		   	SELECT
				CUST_ID,
				(SELECT EVENT_ID FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_TA)) as EVENT_ID,
				(SELECT EVENT_GROUP FROM "functions::TF_GET_EVENT_DETAIL_FOR_EVENT_NAME"(:LV_TA))	EVENT_GROUP,
				:LV_TA EVENT_NAME,
				INIT_DATE, 
				END_DATE, 
				1 EVENT_VALUE, 
				:LV_TA DESCRIPTION,
				YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
				YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
			FROM :LT_TEMP
			WHERE RATIO >= 100 + 50
					AND RATIO <> 0
					AND CUST_ID IS NOT NULL
			ORDER BY INIT_DATE; 			
			
			
   
END