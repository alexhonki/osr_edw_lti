PROCEDURE "procedures.events.predefined::PR_EXTRACT_TAX_AMOUNT_EVENT" 
( 	IN IV_MODE INTEGER DEFAULT 0 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
	DECLARE LV_TA CONSTANT NVARCHAR(500) := 'Increase in Tax Amount by 50% or more';
	DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Assessment';
	DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'add-document';
	
	DECLARE LV_MAX_LASTSEQ_ID INTEGER;
	DECLARE LV_MAX_NEWSEQ_ID INTEGER;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_TA);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_TA);
	
	IF :LV_MAX_LASTSEQ_ID is null then
	LV_MAX_LASTSEQ_ID = 0;
	END IF;
	
	LT_CUST        = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
						 "db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						  "Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID;
	LT_CUST_EDITED = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST ;
	
	 CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
	IV_EVENT_NAME=>:LV_TA,
	IT_CUST=>:LT_CUST_EDITED);
	
	LT_RESV = 	select X.ZZ_PARTNER as ZZ_PARTNER,
						LAG( SUM(TAXAMOUNT)) OVER (PARTITION BY X.ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_TAX,
						TAXYRSTARTDT, SUM(TAXAMOUNT) AS TOTAL_TAX, CHDATE
						from "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" X
						INNER JOIN :LT_CUST delt ON X.ZZ_PARTNER = delt.ZZ_PARTNER
						group by X.ZZ_PARTNER, TAXYRSTARTDT, CHDATE;
	LT_TEMP =	SELECT 
					B.CUST_ID, 
					TO_TIMESTAMP(TAXYRSTARTDT, 'YYYYMMDD') "INIT_DATE", 
					TO_TIMESTAMP('9999-12-31') "END_DATE",
					CASE PREV_TAX
						WHEN 0 THEN NULL
						ELSE (TOTAL_TAX / PREV_TAX) * 100
					END AS RATIO
				FROM :LT_RESV A
				LEFT JOIN  "db::app.Customer" B
				ON A.ZZ_PARTNER = B.EXT_ID;
				
	/*Increase in Tax Amount by 50% or more*/
	INSERT INTO "db::app.CustomerEvents" 
		SELECT CUST_ID,
		NULL,
		:LV_EVENT_GROUP	EVENT_GROUP,
		:LV_TA EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_TA DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM :LT_TEMP
	WHERE RATIO >= 100 + 50
			AND RATIO <> 0
			AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE; 			
			
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'PREDEFINED', I_TYPE => 1);
	
    select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID from "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";

	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = 10, "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_TA)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);		
   
END