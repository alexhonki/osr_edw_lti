PROCEDURE "procedures.events.predefined::PR_EXTRACT_LAND_VALUATION_EVENT" (
	IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
   	DECLARE LV_LAND_VAL_D CONSTANT NVARCHAR(500) := 'Decrease in Land Valuation by 20%';
   	DECLARE LV_LAND_VAL_I CONSTANT NVARCHAR(500) := 'Increase in Land Valuation by 30%';
   	DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Land Related';
   	DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'home';
   	
   	DECLARE LV_LAND_VAL_D_MAX_SEQ_ID INTEGER;
	DECLARE LV_LAND_VAL_I_MAX_SEQ_ID INTEGER;
	DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_LAND_VAL_D);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_LAND_VAL_I);
	SELECT OUT_MAX_SEQ_ID into LV_LAND_VAL_D_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_LAND_VAL_D);
	SELECT OUT_MAX_SEQ_ID into LV_LAND_VAL_I_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_LAND_VAL_I);
	
	IF :LV_LAND_VAL_D_MAX_SEQ_ID IS NULL THEN
		LV_LAND_VAL_D_MAX_SEQ_ID = 0;
	END IF;
	
	IF :LV_LAND_VAL_I_MAX_SEQ_ID IS NULL THEN
		LV_LAND_VAL_I_MAX_SEQ_ID = 0;
	END IF;
	
	LT_CUST_EDITED_LV_D = SELECT distinct ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_LAND_VAL_D_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_LV_D = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED_LV_D;
	
	LT_CUST_EDITED_LV_I = SELECT distinct ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_LAND_VAL_I_MAX_SEQ_ID;
	LT_CUST_ID_EDITED_LV_I = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED_LV_I;
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_LAND_VAL_D,
		IT_CUST=>:LT_CUST_ID_EDITED_LV_D
	);
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_LAND_VAL_I,
		IT_CUST=>:LT_CUST_ID_EDITED_LV_I
	);
	LT_CUST_ID = SELECT ZZ_PARTNER FROM :LT_CUST_EDITED_LV_D UNION SELECT ZZ_PARTNER FROM :LT_CUST_EDITED_LV_I;
	LT_RESV = SELECT CHDATE, TAXYRSTARTDT, INTRENOPL, BPRELVNTVAL, 
					LAG(BPRELVNTVAL) OVER (PARTITION BY INTRENOPL,
					X.ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_VAL, X.ZZ_PARTNER
				FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" X
				INNER JOIN :LT_CUST_ID as delt ON X.ZZ_PARTNER = delt.ZZ_PARTNER
				GROUP BY CHDATE, INTRENOPL, BPRELVNTVAL, X.ZZ_PARTNER, TAXYRSTARTDT;
	LT_TEMP = SELECT B.CUST_ID,
				TO_TIMESTAMP(LEAST(TAXYRSTARTDT, CHDATE), 'YYYYMMDD') INIT_DATE, 
				TO_TIMESTAMP('9999-12-31') END_DATE,
				CASE PREV_VAL
					WHEN 0 THEN NULL
					ELSE (BPRELVNTVAL / PREV_VAL) * 100
				END AS RATIO
	FROM :LT_RESV A
	LEFT JOIN "db::app.Customer" B ON A.ZZ_PARTNER = B.EXT_ID;
   
   /*Decrease in Land Valuation by 20%*/
   INSERT INTO "db::app.CustomerEvents" 
   	(SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP	EVENT_GROUP,
		:LV_LAND_VAL_D EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_VAL_D DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
		from :LT_TEMP
	WHERE RATIO <= 100 - 20
	AND RATIO <> 0
	AND CUST_ID IS NOT NULL )
	
	/*Increase in Land Valuation by 30%*/
	UNION ALL

   (SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP	EVENT_GROUP,
		:LV_LAND_VAL_I EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_LAND_VAL_I DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
		from :LT_TEMP
	WHERE RATIO >= 100 + 30
	AND RATIO <> 0
	AND CUST_ID IS NOT NULL);
	
	CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'PREDEFINED', I_TYPE => 1);
	
	SELECT MAX(Z_RUN_SEQ_ID) INTO LV_NEW_MAX_SEQ_ID FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	
	UPDATE "db::adm.config.event.name" 
		SET "ICON" = LV_EVENT_ICON, "PRIORITY" = null, "LATEST_EXTRACTED_SEQUENCE" = LV_NEW_MAX_SEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE ( UPPER("EVENT_NAME") = UPPER(LV_LAND_VAL_D)
		OR UPPER("EVENT_NAME") = UPPER(LV_LAND_VAL_I))
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);
   
END
   