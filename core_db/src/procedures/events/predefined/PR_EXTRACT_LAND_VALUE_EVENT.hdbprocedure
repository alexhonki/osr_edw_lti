PROCEDURE "procedures.events.predefined::PR_EXTRACT_LAND_VALUE_EVENT" ( )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/

	DECLARE LV_LAND_VALUE NVARCHAR(500) := 'Moved to Lower Value Land';
	DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Predefined';
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	/*Moved to Lower Value Land*/
    INSERT INTO "db::app.CustomerEvents" 
	   	SELECT
			CUST_ID,
			NULL,
			:LV_EVENT_GROUP	EVENT_GROUP,
			:LV_LAND_VALUE EVENT_NAME,
			INIT_DATE, 
			END_DATE, 
			1 EVENT_VALUE, 
			:LV_LAND_VALUE DESCRIPTION,
			YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
			YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
			FROM (
				SELECT
					A.*,
					TO_TIMESTAMP(A.TAXYRSTARTDT, 'YYYYMMDD') "INIT_DATE", 
					TO_TIMESTAMP('9999-12-31') "END_DATE",
					B.PLNO,
					B.PREV_PLNO,
					C.CUST_ID,
					CASE PREV_VAL
						WHEN 0 THEN NULL
						ELSE (B.RELVNTVAL / PREV_VAL) * 100
					END AS RATIO
				FROM (
					SELECT COUNT(*) AS NUM_PARCEL, ZZ_PARTNER, TAXYRSTARTDT, CHDATE
					FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV"
					GROUP BY TAXYRSTARTDT, ZZ_PARTNER, CHDATE
				) A
				JOIN (
					SELECT
						ZZ_PARTNER,
						TAXYRSTARTDT,
						PLNO,
						RELVNTVAL,
						LAG(PLNO) OVER (PARTITION BY ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_PLNO,
						LAG(RELVNTVAL) OVER (PARTITION BY ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_VAL
					FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV"
				) B
				ON A.ZZ_PARTNER = B.ZZ_PARTNER AND A.TAXYRSTARTDT = B.TAXYRSTARTDT
				LEFT JOIN (
					SELECT CUST_ID, EXT_ID
					FROM "db::app.Customer"
				) C 
				ON B.ZZ_PARTNER = C.EXT_ID
				WHERE NUM_PARCEL = 1
		)
		WHERE PLNO <> PREV_PLNO
		AND RATIO < 100
		AND CUST_ID IS NOT NULL
		ORDER BY INIT_DATE;
		
		CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"();
	
		/*UPDATE "db::adm.config.event.name" 
		SET "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_CL_F, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_AB_PYMNT_1)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_AB_EVENT_GRP);*/
   
END