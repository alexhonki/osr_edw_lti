PROCEDURE "procedures.events.predefined::PR_EXTRACT_LAND_VALUE_EVENT" (
	IN IV_MODE INTEGER DEFAULT 0
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/

	DECLARE LV_LAND_VALUE CONSTANT NVARCHAR(500) := 'Moved to Lower Value Land';
	DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Land Related';
	DECLARE LV_EVENT_ICON CONSTANT NVARCHAR(500) := 'home';
	
	DECLARE LV_MAX_SEQ_ID INTEGER;
	DECLARE LV_NEW_MAX_SEQ_ID INTEGER;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_LAND_VALUE);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_SEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_LAND_VALUE);
	IF :LV_MAX_SEQ_ID IS NULL THEN
		LV_MAX_SEQ_ID = 0;
	END IF;
	LT_CUST_EDITED = SELECT ZZ_PARTNER FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV" inner join
							"db::app.Customer" on EXT_ID = ZZ_PARTNER WHERE 
						"Z_RUN_SEQ_ID">:LV_MAX_SEQ_ID;
	LT_CUST_ID_EDITED = select to_int(ZZ_PARTNER) as "CUST_ID" from :LT_CUST_EDITED;
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
		IV_EVENT_NAME=>:LV_LAND_VALUE,
		IT_CUST=>:LT_CUST_ID_EDITED
   );
   LT_CUST_ID = SELECT ZZ_PARTNER FROM :LT_CUST_EDITED;
   LT_RESV =	SELECT COUNT(*) AS NUM_PARCEL, ZZ_PARTNER, TAXYRSTARTDT, CHDATE
							FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV"
					--WHERE ZZ_PARTNER IN (SELECT ZZ_PARTNER FROM :LT_CUST_ID)
							WHERE Z_RUN_SEQ_ID > :LV_MAX_SEQ_ID
							GROUP BY TAXYRSTARTDT, ZZ_PARTNER, CHDATE;
	LT_RESV_PARCEL_RELVAL_VIEW = SELECT
							ZZ_PARTNER,
							TAXYRSTARTDT,
							PLNO,
							RELVNTVAL,
							LAG(PLNO) OVER (PARTITION BY ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_PLNO,
							LAG(RELVNTVAL) OVER (PARTITION BY ZZ_PARTNER ORDER BY TAXYRSTARTDT) AS PREV_VAL
							FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
	LT_CUST_PARCEL_RATIO = 	SELECT
							A.*,
							TO_TIMESTAMP(A.TAXYRSTARTDT, 'YYYYMMDD') "INIT_DATE", 
							TO_TIMESTAMP('9999-12-31') "END_DATE",
							B.PLNO,
							B.PREV_PLNO,
							C.CUST_ID,
							CASE PREV_VAL
								WHEN 0 THEN NULL
								ELSE (B.RELVNTVAL / PREV_VAL) * 100
							END AS RATIO
							FROM :LT_RESV A
							JOIN :LT_RESV_PARCEL_RELVAL_VIEW B
							ON A.ZZ_PARTNER = B.ZZ_PARTNER AND A.TAXYRSTARTDT = B.TAXYRSTARTDT
							LEFT JOIN 
							 "db::app.Customer" C 
							ON B.ZZ_PARTNER = C.EXT_ID
							WHERE NUM_PARCEL = 1;
	/*Moved to Lower Value Land*/
    INSERT INTO "db::app.CustomerEvents" 
	   	SELECT
			CUST_ID,
			NULL,
			:LV_EVENT_GROUP	EVENT_GROUP,
			:LV_LAND_VALUE EVENT_NAME,
			INIT_DATE, 
			END_DATE, 
			1 EVENT_VALUE, 
			CONCAT(CONCAT(:LV_LAND_VALUE, ' - '), PLNO) DESCRIPTION,
			YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
			YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
			FROM :LT_CUST_PARCEL_RATIO
		WHERE PLNO <> PREV_PLNO
		AND RATIO < 100
		AND CUST_ID IS NOT NULL
		ORDER BY INIT_DATE;
		
		CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'PREDEFINED', I_TYPE => 1);
		
		SELECT MAX(Z_RUN_SEQ_ID) INTO LV_NEW_MAX_SEQ_ID FROM "osr.edw.staging.td.rms.proxy.synonym::CV_LTCNRESV";
		
		UPDATE "db::adm.config.event.name" 
			SET "ICON" = LV_EVENT_ICON, "PRIORITY" = null ,DESCRIPTION = LV_LAND_VALUE, "LATEST_EXTRACTED_SEQUENCE" = LV_NEW_MAX_SEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
			WHERE ( UPPER("EVENT_NAME") = UPPER(LV_LAND_VALUE) )
			AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);
   
END