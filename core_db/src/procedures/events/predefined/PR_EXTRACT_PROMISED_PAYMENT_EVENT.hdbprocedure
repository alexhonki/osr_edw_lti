PROCEDURE "procedures.events.predefined::PR_EXTRACT_PROMISED_PAYMENT_EVENT" 
( 	IN IV_MODE INTEGER DEFAULT 0 )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA <default_schema_name>
   --READS SQL DATA 
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   
	DECLARE LV_PP NVARCHAR(500) := 'Promised Payment';
	DECLARE LV_PP_1 NVARCHAR(500) := 'Promised Payment in 3 or more Consecutive Years';
	DECLARE LV_PP_2 NVARCHAR(500) := 'Promised Payment with More Than 3 Instalments';  --TBD
	DECLARE LV_PP_3 NVARCHAR(500) := 'Promise to Pay Payment was Late';	--TBD
	DECLARE LV_EVENT_GROUP CONSTANT NVARCHAR(500) := 'Predefined';
   
    DECLARE LV_MAX_LASTSEQ_ID INTEGER;
    DECLARE LV_MAX_LASTSEQ_ID_1 INTEGER;
    DECLARE LV_MAX_LASTSEQ_ID_2 INTEGER;
    DECLARE LV_MAX_LASTSEQ_ID_3 INTEGER;
	DECLARE LV_MAX_NEWSEQ_ID INTEGER;
	DECLARE LV_MAX_NEWSEQ_ID_1 INTEGER;
	DECLARE LV_MAX_NEWSEQ_ID_2 INTEGER;
	DECLARE LV_MAX_NEWSEQ_ID_3 INTEGER;
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM "synonyms::dummy";
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_PP);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_PP_1);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_PP_2);
	CALL "procedures.utils::PR_DELETE_ALL_DATA_FOR_EVENT"(IV_MODE=>:IV_MODE, IV_EVENT_NAME=>:LV_PP_3);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_PP);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_1 from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_PP_1);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_2 from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_PP_2);
	SELECT OUT_MAX_SEQ_ID into LV_MAX_LASTSEQ_ID_3 from "functions::TF_GET_MAX_SEQID_EVENT"(:LV_PP_3);
	
	IF :LV_MAX_LASTSEQ_ID is null then
	LV_MAX_LASTSEQ_ID = 0;
	END IF;
	IF :LV_MAX_LASTSEQ_ID_1 is null then
	LV_MAX_LASTSEQ_ID_1 = 0;
	END IF;
	IF :LV_MAX_LASTSEQ_ID_2 is null then
	LV_MAX_LASTSEQ_ID_2 = 0;
	END IF;
	IF :LV_MAX_LASTSEQ_ID_3 is null then
	LV_MAX_LASTSEQ_ID_3 = 0;
	END IF;
	
	LT_CUST        = SELECT GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" inner join
						 "db::app.Customer" on EXT_ID = GPART WHERE 
						  "Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID;
	LT_CUST_EDITED = select to_int(GPART) as "CUST_ID" from :LT_CUST ;
	
	LT_CUST_1        = SELECT PRGPA FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" inner join
						 "db::app.Customer" on EXT_ID = PRGPA WHERE 
						  "Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_1;
	LT_CUST_EDITED_1 = select to_int(PRGPA) as "CUST_ID" from :LT_CUST_1 ;
	
	LT_CUST_2        = SELECT PRGPA FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" inner join
						 "db::app.Customer" on EXT_ID = PRGPA WHERE 
						  "Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_2;
	LT_CUST_EDITED_2 = select to_int(PRGPA) as "CUST_ID" from :LT_CUST_2 ;
	
	LT_CUST_3        = SELECT GPART FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" inner join
						 "db::app.Customer" on EXT_ID = GPART WHERE 
						  "Z_RUN_SEQ_ID">:LV_MAX_LASTSEQ_ID_3;
	LT_CUST_EDITED_3 = select to_int(GPART) as "CUST_ID" from :LT_CUST_3 ;
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
	IV_EVENT_NAME=>:LV_PP,
	IT_CUST=>:LT_CUST_EDITED);
	
	 CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
	IV_EVENT_NAME=>:LV_PP_1,
	IT_CUST=>:LT_CUST_EDITED_1);
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
	IV_EVENT_NAME=>:LV_PP_2,
	IT_CUST=>:LT_CUST_EDITED_2);
	
	CALL "procedures.utils::PR_DELETE_EVENT_DATA_FOR_CUST"(
	IV_EVENT_NAME=>:LV_PP_3,
	IT_CUST=>:LT_CUST_EDITED_3);
	
	/*Promised Payment*/
	INSERT INTO "db::app.CustomerEvents" 
	   SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP	EVENT_GROUP,
		:LV_PP EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_PP DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM (
			SELECT
				*,
				TO_TIMESTAMP(ERDAT, 'YYYYMMDD') "INIT_DATE", 
				TO_TIMESTAMP('9999-12-31') "END_DATE"
			FROM (
				SELECT X.GPART as GPART, ERDAT
				FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" X
				INNER JOIN :LT_CUST delt ON X.GPART = delt.GPART
				ORDER BY ERDAT, X.GPART
			) A
			JOIN (
				SELECT CUST_ID, EXT_ID
				FROM "db::app.Customer"
			) B 
			ON A.GPART = B.EXT_ID
		)
	WHERE CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;
   
   /*Promised Payment in 3 or more Consecutive Years*/
    INSERT INTO "db::app.CustomerEvents" 
   	SELECT
		CUST_ID,
		NULL,
		:LV_EVENT_GROUP	EVENT_GROUP,
		:LV_PP_1 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE, 
		:LV_PP_1 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	FROM (
			SELECT
				*,
				TO_TIMESTAMP(MAX_DATE, 'YYYYMMDD') "INIT_DATE", 
				TO_TIMESTAMP('9999-12-31') "END_DATE"
			FROM (
				SELECT *, ROW_NUMBER() OVER( PARTITION BY CUST_ID, GRP) AS NUM_CONSECUTIVE_YEARS
				FROM (
					SELECT 
						CUST_ID, 
						MAX_DATE,
						(YEAR_ - ROW_NUMBER() OVER( PARTITION BY CUST_ID  ORDER BY YEAR_)) AS GRP
					FROM (
						SELECT X.PRGPA as PRGPA, MAX(ERDAT) AS MAX_DATE, SUBSTRING(ERDAT, 0,4) AS YEAR_
						FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" X
						INNER JOIN :LT_CUST_1 delt ON X.PRGPA = delt.PRGPA
						GROUP BY X.PRGPA, SUBSTRING(ERDAT, 0,4)
					) A
					LEFT JOIN (
						SELECT EXT_ID, CUST_ID
				        FROM "db::app.Customer"
					) B
						ON A.PRGPA = B.EXT_ID
				)
			)
		)
	WHERE NUM_CONSECUTIVE_YEARS >= 3
	AND CUST_ID IS NOT NULL
	ORDER BY CUST_ID, MAX_DATE;

	INSERT INTO "db::app.CustomerEvents"
	SELECT
		CUST_ID, 
		NULL,
		:LV_EVENT_GROUP	EVENT_GROUP,
	-- Modify Event Name and Description
		:LV_PP_2 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE,
		:LV_PP_2 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	-- Insert Predefined Event Logic ---
	FROM (
		SELECT
			*,
			TO_TIMESTAMP(MAX_DATE, 'YYYYMMDD') "INIT_DATE", 
			TO_TIMESTAMP('9999-12-31') "END_DATE"
		FROM (
			SELECT 
				A.CUST_ID, 
				A.PRGPA, 
				A.YEAR_,
				A.MAX_DATE, 
				A.NO_OF_INSTALLMENT_PLAN FROM 
		    (    
		        SELECT * 
		        FROM (
		            SELECT A.PRGPA, A.MAX_DATE, A.YEAR_, COUNT(b.PPKEY) AS NO_OF_INSTALLMENT_PLAN
		            FROM(
		                SELECT A.PRGPA, A.MAX_DATE, A.YEAR_, B.PPKEY
		                FROM(
		                    SELECT X.PRGPA as PRGPA, MAX(ERDAT) MAX_DATE, SUBSTRING(ERDAT, 0,4) YEAR_
		                    FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" X
		                    INNER JOIN :LT_CUST_2 delt ON X.PRGPA = delt.PRGPA
		                    GROUP BY X.PRGPA, SUBSTRING(ERDAT, 0,4)
		                ) A
		                JOIN(
		                    SELECT X.PRGPA as PRGPA, ERDAT, PPKEY
		                    FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP"X
		                    INNER JOIN :LT_CUST_2 delt ON X.PRGPA = delt.PRGPA
		                ) B
		                ON A.PRGPA = B.PRGPA AND A.MAX_DATE = B.ERDAT
		                ORDER BY A.PRGPA
		            ) A
		            JOIN(
		                SELECT PPKEY
		                FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPD"
		            ) B
		            ON A.PPKEY = B.PPKEY
		            GROUP BY A.PRGPA, A.YEAR_, A.MAX_DATE
		            ORDER BY COUNT(b.PPKEY) DESC
		        )A
		        JOIN( 
		            SELECT EXT_ID, CUST_ID
		            FROM "db::app.Customer"
		        ) B
		        ON A.PRGPA = B.EXT_ID
		    ) A 
		    JOIN (
		        SELECT CUST_ID
		        FROM "db::app.Customer"
		    ) B
		    ON A.CUST_ID = B.CUST_ID
		    ORDER BY A.CUST_ID, A.YEAR_
		)
	)
	WHERE NO_OF_INSTALLMENT_PLAN > 3
	AND CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;
				
	INSERT INTO "db::app.CustomerEvents" 
	SELECT
		CUST_ID, 
		NULL,
		LV_EVENT_GROUP	EVENT_GROUP,
	-- Modify Event Name and Description
		:LV_PP_3 EVENT_NAME,
		INIT_DATE, 
		END_DATE, 
		1 EVENT_VALUE,
		:LV_PP_3 DESCRIPTION,
		YEAR(INIT_DATE)*100 + MONTH(INIT_DATE) INIT_TS,
		YEAR(END_DATE)*100 + MONTH(END_DATE) END_TS
	-- Insert Predefined Event Logic ---
	FROM (
		SELECT
			TO_TIMESTAMP(PRDAT, 'YYYYMMDD') "INIT_DATE", 
			TO_TIMESTAMP('9999-12-31') "END_DATE",
			A.*,
			B.VALUT, B.PAYMENT_VALUE,
			C.GPART,
			D.CUST_ID
		FROM (
			-- get the total sum of payment made due and the next payment date
			select "PPKEY", "PRDAT", SUM("PRAMT"), LEAD(PRDAT) OVER (PARTITION BY PPKEY ORDER BY PRDAT) as NEXT_DATE
			from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPD" -- installment plan tables
			group by PPKEY, PRDAT
			order by PPKEY, PRDAT
		) A
		JOIN (
			-- get the total payment made and its total payment number
			select PPKEY, VALUT, SUM(BETRZ) as PAYMENT_VALUE, COUNT(BETRZ)
			from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPPP" -- installment actually paid
			group by PPKEY, VALUT
			order by PPKEY, VALUT
		) B
		ON A.PPKEY = B.PPKEY
		JOIN (
			SELECT PPKEY, X.GPART as GPART
			FROM "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP" X -- header tableX
            INNER JOIN :LT_CUST_3 delt ON X.GPART = delt.GPART
		) C
		ON B.PPKEY = C.PPKEY
		JOIN (
			SELECT CUST_ID, EXT_ID
			FROM "db::app.Customer"
		) D 
		ON C.GPART = D.EXT_ID
		WHERE B.VALUT > A.PRDAT
		AND (A.NEXT_DATE IS NULL OR B.VALUT < A.NEXT_DATE)
	)
	WHERE CUST_ID IS NOT NULL
	ORDER BY INIT_DATE;
	
    select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP";
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID_1 from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP";
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID_2 from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP";
	select max(Z_RUN_SEQ_ID) INTO LV_MAX_NEWSEQ_ID_3 from "osr.edw.staging.td.rms.proxy.synonym::CV_DFKKPP";
	
    CALL "procedures.utils::PR_UTIL_POPULATE_EVENT_ID"(I_EVENT_SOURCE => 'PREDEFINED', I_TYPE => 1);
	
	UPDATE "db::adm.config.event.name" 
		SET "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_PP)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);	
	
	UPDATE "db::adm.config.event.name" 
		SET "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_1, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_PP_1)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);	
	
	UPDATE "db::adm.config.event.name" 
		SET "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_2, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_PP_2)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);	
	
	UPDATE "db::adm.config.event.name" 
		SET "LATEST_EXTRACTED_SEQUENCE" = LV_MAX_NEWSEQ_ID_3, "LAST_EXTRACTED_DATE" = CURRENT_UTCTIMESTAMP
		WHERE UPPER("EVENT_NAME") = UPPER(LV_PP_3)
		AND UPPER("CATEGORY_NAME") = UPPER(LV_EVENT_GROUP);	
   
END