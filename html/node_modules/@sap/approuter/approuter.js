'use strict';

var assert = require('assert');
var commander = require('commander');
var _ = require('lodash');
var EventEmitter = require('events');
var util = require('util');

var bootstrap = require('./lib/bootstrap');
var loggerUtil = require('./lib/utils/logger');
var validators = require('./lib/configuration/validators');
var appConfig = require('./lib/configuration/app-config');
var envConfig = require('./lib/configuration/env-config');
var MiddlewareList = require('./lib/extensions/MiddlewareList');
var serverLib = require('./lib/server');
var optionalCallback = require('./lib/utils/callback');
var uaaUtils = require('./lib/utils/uaa-utils');

module.exports = Approuter;

function Approuter() {
  assert(arguments.length === 0, 'Constructor takes no arguments');
  if (!(this instanceof Approuter)) {
    return new Approuter();
  }
  EventEmitter.call(this);

  this.cmdParser = new commander.Command()
    .option('-w, --workingDir <s>', 'The working directory containting the resources folder and xs-app.json file')
    .option('-p, --port <n>', 'The port of the approuter');

  this.first = new MiddlewareList();
  this.beforeRequestHandler = new MiddlewareList();
  this.beforeErrorHandler = new MiddlewareList();
}

util.inherits(Approuter, EventEmitter);

Approuter.prototype.start = function (options, callback) {
  var self = this;
  if (options) {
    validators.validateApprouterStartOptions(options);
    options = _.cloneDeep(options);
  } else {
    options = {};
  }
  callback = optionalCallback(callback);

  if (this.cmdParser) {
    this.cmdParser.parse(process.argv);
    options = _.defaults(options, this.cmdParser);
  }
  addImplicitExtension(this, options);

  var logger = loggerUtil.getLogger('/approuter');
  logger.info('Application router version %s', require('./package.json').version);

  var app = bootstrap(options);
  app.logger = logger;
  app.approuter = this;
  this._app = app;
  serverLib.start(app, function(err, server) {
    self._server = server;
    callback(err);
  });
};

Approuter.prototype.close = function (callback) {
  if (this._server) {
    this._server.close(callback);
  } else {
    process.nextTick(callback);
  }
};

Approuter.prototype.resolveUaaConfig = uaaUtils.resolveUaaConfig;

Approuter.prototype.createRouterConfig = function (options, callback) {
  options = _.cloneDeep(options); // avoid side effects in case of modifications
  var error;
  var routerConfig;
  try {
    assert(this._app, 'Call Approuter.start before Approuter.createRouterConfig');
    routerConfig = this._app.get('mainRouterConfig');
    var xsappname = options.xsappname || routerConfig.uaaConfig.options.xsappname;
    var customDestinations = envConfig.loadDestinations(options.destinations);
    var customAppConfig = appConfig.loadConfiguration(routerConfig.workingDir,
      options.xsappConfig, customDestinations, xsappname);
    customAppConfig.logout = _.extend({}, routerConfig.appConfig.logout, _.pick(customAppConfig.logout, 'logoutPage'));
    routerConfig = _.defaults({
      appConfig: customAppConfig,
      destinations: customDestinations
    }, routerConfig);
  } catch (err) {
    error = err;
  }
  callback(error, routerConfig);
};

function addImplicitExtension(ar, options) {
  var ext = {
    insertMiddleware: {
      first: ar.first._middleware,
      beforeRequestHandler: ar.beforeRequestHandler._middleware,
      beforeErrorHandler: ar.beforeErrorHandler._middleware
    }
  };
  options.extensions = options.extensions || [];
  options.extensions.unshift(ext);
}


if (require.main === module) {
  var ar = new Approuter();
  ar.start();
}

