'use strict';

var xsenv = require('@sap/xsenv');
var validators = require('../configuration/validators');
var passportUtils = require('../passport/utils');
var loggerUtils = require('./logger');
var tracer = loggerUtils.getTracer(__filename);

exports.getProxyToken = getProxyToken;

function getProxyToken(app){

  var destinations = app.get('mainRouterConfig').destinations;
  if (!destinations) {
    return;
  }
  var credentials;
  var proxyTokenRequired =  false;
  for (var destinationProp in destinations){
    var destinationConfig = destinations[destinationProp];
    if (destinationConfig.proxyType === 'onPremise'){
      credentials = credentials ? credentials : loadServiceCredentials('connectivity');
      validators.validateConnectivityCredentials(credentials);
      proxyTokenRequired =  true;
      destinationConfig.proxyHost = credentials.onpremise_proxy_host;
      destinationConfig.proxyPort = credentials.onpremise_proxy_port;
    }
  }
  if (proxyTokenRequired){
    loadClientCredentialsToken(app, credentials, 'connProxyToken');
  }
}

function loadServiceCredentials(serviceName){
  try {
    return xsenv.cfServiceCredentials({tag: serviceName});
  } catch (err){
    throw new Error('Error reading credentials for ' + serviceName + ' service. Please verify service is bound. ' + err);
  }
}

function loadClientCredentialsToken(app, credentials, tokenName){
  var requestOptions = {
    url: credentials.url + '/oauth/token/?grant_type=client_credentials',
    headers: {
      'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
      'accept': 'application/json;charset=utf-8'
    },
    auth: {
      user: credentials.clientid,
      pass: credentials.clientsecret
    }
  };

  passportUtils.callUaa(requestOptions, null, function (err, uaaResponse) {
    if (err) {
      return tracer.error('Error getting ' + credentials.label + ' client credentials from UAA. Number of attempts done: %d, error: %s',
        passportUtils.MAX_ATTEMPTS_NUMBER, err.message);
    }

    if (!uaaResponse.access_token || !uaaResponse.expires_in) {
      return tracer.error ('Bad response from UAA when getting client credentials for ' + credentials.label + '- not all fields are present');
    }
    var options = {
      accessToken: uaaResponse.access_token,
      expiryDate: passportUtils.getExpiresAt(uaaResponse.expires_in).getTime()
    };
    app[tokenName] = options;
    var tokenRefreshTimestamp = options.expiryDate - toMilliseconds(5);
    var msBeforeRetrieval = tokenRefreshTimestamp - Date.now();
    executeAfter(function () {
      loadClientCredentialsToken(app, credentials, tokenName);
    }, msBeforeRetrieval);
  });
}


function executeAfter (fn, timeout) {
  setTimeout(fn, timeout);
}

function toMilliseconds(minutes) {
  return minutes * 60 * 1000;
}

