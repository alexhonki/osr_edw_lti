'use strict';

var assert = require('assert');
var Strategy = require('passport').Strategy;
var util = require('util');
var OAuth2 = require('./oauth2').OAuth2;
var passportUtils = require('./utils');

module.exports = OAuth2Strategy;

function OAuth2Strategy(options, verify) {
  this.name = 'oauth2';
  assert(verify, 'OAuth2Strategy requires a "verify" callback');
  assert(options.callbackURL, 'OAuth2Strategy requires "callbackURL" option');
  assert(options.authorizationURL, 'OAuth2Strategy requires "authorizationURL" option');

  this.verify = verify;
  this._callbackURL = options.callbackURL;
  this._authorizationURL = options.authorizationURL;
  this._oauth2 = new OAuth2(options);

  Strategy.call(this, options, verify);
}

util.inherits(OAuth2Strategy, Strategy);

OAuth2Strategy.prototype.authenticate = function (req, options) {
  options = options || {};

  if (req.query && req.query.error) {
    var error = getAuthorizationError(req.query.error_description, req.query.error);
    return (req.query.error === 'access_denied') ? this.fail(error) : this.error(error);
  }
  var loggingContext = req.loggingContext;
  var callbackURL = options.callbackURL || this._callbackURL;
  var authorizationURL = options.authorizationURL || this._authorizationURL;
  if (!req.query || !req.query.code) {
    var logger = loggingContext.getLogger('/Auth/OAuth2');
    var location = this._oauth2.getCodeAuthorizationUrl(authorizationURL, callbackURL);
    logger.info('sending redirect to %s', location);
    return this.redirect(location);
  }
  var params = {
    'grant_type': 'authorization_code',
    'redirect_uri': callbackURL,
    code: req.query.code
  };
  var callback = passportUtils.getAccessTokenCallback(this, req);
  this._oauth2.getOAuthAccessToken(params, loggingContext, function (err, result) {
    if (err) {
      err.status = 500;
    }
    callback(err, result);
  });
};

function getAuthorizationError(message, code) {
  var error = new Error(message);
  switch (code) {
  case 'access_denied': error.status = 403; break;
  case 'server_error': error.status = 502; break;
  case 'temporarily_unavailable': error.status = 503; break;
  }
}
