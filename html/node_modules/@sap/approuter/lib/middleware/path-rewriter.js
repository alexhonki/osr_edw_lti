'use strict';

var _ = require('lodash');
var urlUtils = require('../utils/url-utils');

module.exports = function (req, matchHttpMethods /* default undefined, does not make sense for WebSockets */) {
  matchHttpMethods = !!matchHttpMethods; // Normalize to boolean

  var routerConfig = req.routerConfig;
  var routes = routerConfig.appConfig.routes;
  if (!routes) {
    return;
  }

  /*
   * Record here which HTTP methods are supported by routes that match the path.
   * If any is recorded by the end of an unsuccessful route matching, then
   * there were paths matching but supporting other HTTP methods.
   */
  var supportedHttpMethods = [];
  for (var i = 0; i < routes.length; i++) {
    var route = routes[i];
    if (!route.source.test(req.url)) {
      continue;
    }

    if (!matchHttpMethods || httpMethodsMatch(route.httpMethods, req.method)) {
      var rewrittenUrl = applyRewriteRule(req, route, routerConfig);
      return rewrittenUrl;
    }

    supportedHttpMethods = supportedHttpMethods.concat(route.httpMethods);
  }

  if (matchHttpMethods && supportedHttpMethods.length) {
	/*
	 * Remove potential duplicates in case multiple routes
	 * matching by path support same HTTP method
	 */
    req.supportedHttpMethods = _.uniq(supportedHttpMethods).sort();
  }
};

function httpMethodsMatch(allowedHttpMethods, requestMethod) {
  return !Array.isArray(allowedHttpMethods) || allowedHttpMethods.indexOf(requestMethod.toUpperCase()) > -1;
}

function applyRewriteRule(req, route, routerConfig) {
  var destination = route.destination;
  var path;

  if (route.target) {
    path = req.url.replace(route.source, route.target);
  } else {
    path = req.url;
  }
  var rewrittenUrl = null;
  if (destination) {
    var oDestination = routerConfig.destinations[destination];
    rewrittenUrl = urlUtils.parse(_.trimEnd(oDestination.url, '/') + '/' + _.trimStart(path, '/'));
    rewrittenUrl.destination = oDestination;
  } else {
    rewrittenUrl = urlUtils.parse(path);
  }
  rewrittenUrl.route = route;
  return rewrittenUrl;
}
