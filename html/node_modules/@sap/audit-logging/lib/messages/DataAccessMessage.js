'use strict';

var assert = require('assert');
var MessageBase = require('./MessageBase');
var utils = require('../utils');

module.exports = DataAccessMessage;


function DataAccessMessage(action, objectID, objectName) {
  validateArguments(objectID, objectName);
  MessageBase.call(this, action);

  this._object = { objectID: objectID, objectName: objectName };
  this._objectAttributes = {};
  this._successful = true;
}

require('util').inherits(DataAccessMessage, MessageBase);


DataAccessMessage.prototype.attribute = function (name, val1, val2) {
  utils.validate.isValidString(name, 'Object attribute name');
  var state = determineValuesState(val1, val2);
  var attributes = this._objectAttributes;

  if (state.bothMissing) {
    attributes[name] = 'n/a';
  } else if (state.onlyFirstProvided) {
    attributes[name] = val1;
  } else if (state.onlySecondProvided) {
    throw new Error("Object attribute: cannot set 'new value' without providing 'old value'");
  } else {
    // both provided
    assert(this._verb.action === 'update', "Setting 'old value' and 'new value' is applicable only for 'update' actions");
    attributes[name] = { oldValue: val1, newValue: val2 };
  }

  return this;
};

DataAccessMessage.prototype.successful = function (successful) {
  utils.validate.isBoolean(successful, 'Action success flag');
  if (this._successful === successful) {
    return this;
  }
  var currentAction = this._verb.action;
  this._verb.action = (successful) ? currentAction.substring(0, currentAction.indexOf('-attempt')) : currentAction + '-attempt';
  this._successful = successful;
  return this;
};

DataAccessMessage.prototype.toString = function () {
  var parts = this._stringifyParts();
  var str = parts.verb;
  if (utils.hasContent(this._objectAttributes)) {
    this._object.objectAttributes = this._objectAttributes;
  }
  str += ',object=' + utils.stringify(this._object);
  if (parts.custom) {
    str += ',' + parts.custom;
  }
  return str;
};

DataAccessMessage.prototype.log = function (callback) {
  assert(this._custom['driver of action'], 'Providing the driver of the action is mandatory.');
  this._outputToTransport(callback);
};

function validateArguments(objectID, objectName) {
  utils.validate.isValidString(objectID, 'Object ID');
  if (objectName !== undefined) {
    utils.validate.isValidString(objectName, 'Object name');
  }
}

function determineValuesState(val1, val2) {
  var state = {};
  state.bothMissing = (val1 === undefined && val2 === undefined);
  state.onlyFirstProvided = (val1 !== undefined && val2 === undefined);
  state.onlySecondProvided = (val1 === undefined && val2 !== undefined);
  return state;
}
